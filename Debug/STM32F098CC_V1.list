
STM32F098CC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b84  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003c40  08003c40  00013c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003cdc  08003cdc  00013cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003ce0  08003ce0  00013ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08003ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000124  2000001c  08003d00  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000140  08003d00  00020140  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000e86f  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f56  00000000  00000000  0002e8b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000708  00000000  00000000  00030810  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000610  00000000  00000000  00030f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003eda  00000000  00000000  00031528  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000023e9  00000000  00000000  00035402  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000377eb  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001740  00000000  00000000  00037868  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003c28 	.word	0x08003c28

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	08003c28 	.word	0x08003c28

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_fmul>:
 800021c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800021e:	4657      	mov	r7, sl
 8000220:	464e      	mov	r6, r9
 8000222:	4645      	mov	r5, r8
 8000224:	46de      	mov	lr, fp
 8000226:	b5e0      	push	{r5, r6, r7, lr}
 8000228:	0247      	lsls	r7, r0, #9
 800022a:	0046      	lsls	r6, r0, #1
 800022c:	4688      	mov	r8, r1
 800022e:	0a7f      	lsrs	r7, r7, #9
 8000230:	0e36      	lsrs	r6, r6, #24
 8000232:	0fc4      	lsrs	r4, r0, #31
 8000234:	2e00      	cmp	r6, #0
 8000236:	d047      	beq.n	80002c8 <__aeabi_fmul+0xac>
 8000238:	2eff      	cmp	r6, #255	; 0xff
 800023a:	d024      	beq.n	8000286 <__aeabi_fmul+0x6a>
 800023c:	00fb      	lsls	r3, r7, #3
 800023e:	2780      	movs	r7, #128	; 0x80
 8000240:	04ff      	lsls	r7, r7, #19
 8000242:	431f      	orrs	r7, r3
 8000244:	2300      	movs	r3, #0
 8000246:	4699      	mov	r9, r3
 8000248:	469a      	mov	sl, r3
 800024a:	3e7f      	subs	r6, #127	; 0x7f
 800024c:	4643      	mov	r3, r8
 800024e:	025d      	lsls	r5, r3, #9
 8000250:	0058      	lsls	r0, r3, #1
 8000252:	0fdb      	lsrs	r3, r3, #31
 8000254:	0a6d      	lsrs	r5, r5, #9
 8000256:	0e00      	lsrs	r0, r0, #24
 8000258:	4698      	mov	r8, r3
 800025a:	d043      	beq.n	80002e4 <__aeabi_fmul+0xc8>
 800025c:	28ff      	cmp	r0, #255	; 0xff
 800025e:	d03b      	beq.n	80002d8 <__aeabi_fmul+0xbc>
 8000260:	00eb      	lsls	r3, r5, #3
 8000262:	2580      	movs	r5, #128	; 0x80
 8000264:	2200      	movs	r2, #0
 8000266:	04ed      	lsls	r5, r5, #19
 8000268:	431d      	orrs	r5, r3
 800026a:	387f      	subs	r0, #127	; 0x7f
 800026c:	1836      	adds	r6, r6, r0
 800026e:	1c73      	adds	r3, r6, #1
 8000270:	4641      	mov	r1, r8
 8000272:	469b      	mov	fp, r3
 8000274:	464b      	mov	r3, r9
 8000276:	4061      	eors	r1, r4
 8000278:	4313      	orrs	r3, r2
 800027a:	2b0f      	cmp	r3, #15
 800027c:	d864      	bhi.n	8000348 <__aeabi_fmul+0x12c>
 800027e:	4875      	ldr	r0, [pc, #468]	; (8000454 <__aeabi_fmul+0x238>)
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	58c3      	ldr	r3, [r0, r3]
 8000284:	469f      	mov	pc, r3
 8000286:	2f00      	cmp	r7, #0
 8000288:	d142      	bne.n	8000310 <__aeabi_fmul+0xf4>
 800028a:	2308      	movs	r3, #8
 800028c:	4699      	mov	r9, r3
 800028e:	3b06      	subs	r3, #6
 8000290:	26ff      	movs	r6, #255	; 0xff
 8000292:	469a      	mov	sl, r3
 8000294:	e7da      	b.n	800024c <__aeabi_fmul+0x30>
 8000296:	4641      	mov	r1, r8
 8000298:	2a02      	cmp	r2, #2
 800029a:	d028      	beq.n	80002ee <__aeabi_fmul+0xd2>
 800029c:	2a03      	cmp	r2, #3
 800029e:	d100      	bne.n	80002a2 <__aeabi_fmul+0x86>
 80002a0:	e0ce      	b.n	8000440 <__aeabi_fmul+0x224>
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	d000      	beq.n	80002a8 <__aeabi_fmul+0x8c>
 80002a6:	e0ac      	b.n	8000402 <__aeabi_fmul+0x1e6>
 80002a8:	4011      	ands	r1, r2
 80002aa:	2000      	movs	r0, #0
 80002ac:	2200      	movs	r2, #0
 80002ae:	b2cc      	uxtb	r4, r1
 80002b0:	0240      	lsls	r0, r0, #9
 80002b2:	05d2      	lsls	r2, r2, #23
 80002b4:	0a40      	lsrs	r0, r0, #9
 80002b6:	07e4      	lsls	r4, r4, #31
 80002b8:	4310      	orrs	r0, r2
 80002ba:	4320      	orrs	r0, r4
 80002bc:	bc3c      	pop	{r2, r3, r4, r5}
 80002be:	4690      	mov	r8, r2
 80002c0:	4699      	mov	r9, r3
 80002c2:	46a2      	mov	sl, r4
 80002c4:	46ab      	mov	fp, r5
 80002c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002c8:	2f00      	cmp	r7, #0
 80002ca:	d115      	bne.n	80002f8 <__aeabi_fmul+0xdc>
 80002cc:	2304      	movs	r3, #4
 80002ce:	4699      	mov	r9, r3
 80002d0:	3b03      	subs	r3, #3
 80002d2:	2600      	movs	r6, #0
 80002d4:	469a      	mov	sl, r3
 80002d6:	e7b9      	b.n	800024c <__aeabi_fmul+0x30>
 80002d8:	20ff      	movs	r0, #255	; 0xff
 80002da:	2202      	movs	r2, #2
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0c5      	beq.n	800026c <__aeabi_fmul+0x50>
 80002e0:	2203      	movs	r2, #3
 80002e2:	e7c3      	b.n	800026c <__aeabi_fmul+0x50>
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d119      	bne.n	800031c <__aeabi_fmul+0x100>
 80002e8:	2000      	movs	r0, #0
 80002ea:	2201      	movs	r2, #1
 80002ec:	e7be      	b.n	800026c <__aeabi_fmul+0x50>
 80002ee:	2401      	movs	r4, #1
 80002f0:	22ff      	movs	r2, #255	; 0xff
 80002f2:	400c      	ands	r4, r1
 80002f4:	2000      	movs	r0, #0
 80002f6:	e7db      	b.n	80002b0 <__aeabi_fmul+0x94>
 80002f8:	0038      	movs	r0, r7
 80002fa:	f000 f8ff 	bl	80004fc <__clzsi2>
 80002fe:	2676      	movs	r6, #118	; 0x76
 8000300:	1f43      	subs	r3, r0, #5
 8000302:	409f      	lsls	r7, r3
 8000304:	2300      	movs	r3, #0
 8000306:	4276      	negs	r6, r6
 8000308:	1a36      	subs	r6, r6, r0
 800030a:	4699      	mov	r9, r3
 800030c:	469a      	mov	sl, r3
 800030e:	e79d      	b.n	800024c <__aeabi_fmul+0x30>
 8000310:	230c      	movs	r3, #12
 8000312:	4699      	mov	r9, r3
 8000314:	3b09      	subs	r3, #9
 8000316:	26ff      	movs	r6, #255	; 0xff
 8000318:	469a      	mov	sl, r3
 800031a:	e797      	b.n	800024c <__aeabi_fmul+0x30>
 800031c:	0028      	movs	r0, r5
 800031e:	f000 f8ed 	bl	80004fc <__clzsi2>
 8000322:	1f43      	subs	r3, r0, #5
 8000324:	409d      	lsls	r5, r3
 8000326:	2376      	movs	r3, #118	; 0x76
 8000328:	425b      	negs	r3, r3
 800032a:	1a18      	subs	r0, r3, r0
 800032c:	2200      	movs	r2, #0
 800032e:	e79d      	b.n	800026c <__aeabi_fmul+0x50>
 8000330:	2080      	movs	r0, #128	; 0x80
 8000332:	2400      	movs	r4, #0
 8000334:	03c0      	lsls	r0, r0, #15
 8000336:	22ff      	movs	r2, #255	; 0xff
 8000338:	e7ba      	b.n	80002b0 <__aeabi_fmul+0x94>
 800033a:	003d      	movs	r5, r7
 800033c:	4652      	mov	r2, sl
 800033e:	e7ab      	b.n	8000298 <__aeabi_fmul+0x7c>
 8000340:	003d      	movs	r5, r7
 8000342:	0021      	movs	r1, r4
 8000344:	4652      	mov	r2, sl
 8000346:	e7a7      	b.n	8000298 <__aeabi_fmul+0x7c>
 8000348:	0c3b      	lsrs	r3, r7, #16
 800034a:	469c      	mov	ip, r3
 800034c:	042a      	lsls	r2, r5, #16
 800034e:	0c12      	lsrs	r2, r2, #16
 8000350:	0c2b      	lsrs	r3, r5, #16
 8000352:	0014      	movs	r4, r2
 8000354:	4660      	mov	r0, ip
 8000356:	4665      	mov	r5, ip
 8000358:	043f      	lsls	r7, r7, #16
 800035a:	0c3f      	lsrs	r7, r7, #16
 800035c:	437c      	muls	r4, r7
 800035e:	4342      	muls	r2, r0
 8000360:	435d      	muls	r5, r3
 8000362:	437b      	muls	r3, r7
 8000364:	0c27      	lsrs	r7, r4, #16
 8000366:	189b      	adds	r3, r3, r2
 8000368:	18ff      	adds	r7, r7, r3
 800036a:	42ba      	cmp	r2, r7
 800036c:	d903      	bls.n	8000376 <__aeabi_fmul+0x15a>
 800036e:	2380      	movs	r3, #128	; 0x80
 8000370:	025b      	lsls	r3, r3, #9
 8000372:	469c      	mov	ip, r3
 8000374:	4465      	add	r5, ip
 8000376:	0424      	lsls	r4, r4, #16
 8000378:	043a      	lsls	r2, r7, #16
 800037a:	0c24      	lsrs	r4, r4, #16
 800037c:	1912      	adds	r2, r2, r4
 800037e:	0193      	lsls	r3, r2, #6
 8000380:	1e5c      	subs	r4, r3, #1
 8000382:	41a3      	sbcs	r3, r4
 8000384:	0c3f      	lsrs	r7, r7, #16
 8000386:	0e92      	lsrs	r2, r2, #26
 8000388:	197d      	adds	r5, r7, r5
 800038a:	431a      	orrs	r2, r3
 800038c:	01ad      	lsls	r5, r5, #6
 800038e:	4315      	orrs	r5, r2
 8000390:	012b      	lsls	r3, r5, #4
 8000392:	d504      	bpl.n	800039e <__aeabi_fmul+0x182>
 8000394:	2301      	movs	r3, #1
 8000396:	465e      	mov	r6, fp
 8000398:	086a      	lsrs	r2, r5, #1
 800039a:	401d      	ands	r5, r3
 800039c:	4315      	orrs	r5, r2
 800039e:	0032      	movs	r2, r6
 80003a0:	327f      	adds	r2, #127	; 0x7f
 80003a2:	2a00      	cmp	r2, #0
 80003a4:	dd25      	ble.n	80003f2 <__aeabi_fmul+0x1d6>
 80003a6:	076b      	lsls	r3, r5, #29
 80003a8:	d004      	beq.n	80003b4 <__aeabi_fmul+0x198>
 80003aa:	230f      	movs	r3, #15
 80003ac:	402b      	ands	r3, r5
 80003ae:	2b04      	cmp	r3, #4
 80003b0:	d000      	beq.n	80003b4 <__aeabi_fmul+0x198>
 80003b2:	3504      	adds	r5, #4
 80003b4:	012b      	lsls	r3, r5, #4
 80003b6:	d503      	bpl.n	80003c0 <__aeabi_fmul+0x1a4>
 80003b8:	0032      	movs	r2, r6
 80003ba:	4b27      	ldr	r3, [pc, #156]	; (8000458 <__aeabi_fmul+0x23c>)
 80003bc:	3280      	adds	r2, #128	; 0x80
 80003be:	401d      	ands	r5, r3
 80003c0:	2afe      	cmp	r2, #254	; 0xfe
 80003c2:	dc94      	bgt.n	80002ee <__aeabi_fmul+0xd2>
 80003c4:	2401      	movs	r4, #1
 80003c6:	01a8      	lsls	r0, r5, #6
 80003c8:	0a40      	lsrs	r0, r0, #9
 80003ca:	b2d2      	uxtb	r2, r2
 80003cc:	400c      	ands	r4, r1
 80003ce:	e76f      	b.n	80002b0 <__aeabi_fmul+0x94>
 80003d0:	2080      	movs	r0, #128	; 0x80
 80003d2:	03c0      	lsls	r0, r0, #15
 80003d4:	4207      	tst	r7, r0
 80003d6:	d007      	beq.n	80003e8 <__aeabi_fmul+0x1cc>
 80003d8:	4205      	tst	r5, r0
 80003da:	d105      	bne.n	80003e8 <__aeabi_fmul+0x1cc>
 80003dc:	4328      	orrs	r0, r5
 80003de:	0240      	lsls	r0, r0, #9
 80003e0:	0a40      	lsrs	r0, r0, #9
 80003e2:	4644      	mov	r4, r8
 80003e4:	22ff      	movs	r2, #255	; 0xff
 80003e6:	e763      	b.n	80002b0 <__aeabi_fmul+0x94>
 80003e8:	4338      	orrs	r0, r7
 80003ea:	0240      	lsls	r0, r0, #9
 80003ec:	0a40      	lsrs	r0, r0, #9
 80003ee:	22ff      	movs	r2, #255	; 0xff
 80003f0:	e75e      	b.n	80002b0 <__aeabi_fmul+0x94>
 80003f2:	2401      	movs	r4, #1
 80003f4:	1aa3      	subs	r3, r4, r2
 80003f6:	2b1b      	cmp	r3, #27
 80003f8:	dd05      	ble.n	8000406 <__aeabi_fmul+0x1ea>
 80003fa:	400c      	ands	r4, r1
 80003fc:	2200      	movs	r2, #0
 80003fe:	2000      	movs	r0, #0
 8000400:	e756      	b.n	80002b0 <__aeabi_fmul+0x94>
 8000402:	465e      	mov	r6, fp
 8000404:	e7cb      	b.n	800039e <__aeabi_fmul+0x182>
 8000406:	002a      	movs	r2, r5
 8000408:	2020      	movs	r0, #32
 800040a:	40da      	lsrs	r2, r3
 800040c:	1ac3      	subs	r3, r0, r3
 800040e:	409d      	lsls	r5, r3
 8000410:	002b      	movs	r3, r5
 8000412:	1e5d      	subs	r5, r3, #1
 8000414:	41ab      	sbcs	r3, r5
 8000416:	4313      	orrs	r3, r2
 8000418:	075a      	lsls	r2, r3, #29
 800041a:	d004      	beq.n	8000426 <__aeabi_fmul+0x20a>
 800041c:	220f      	movs	r2, #15
 800041e:	401a      	ands	r2, r3
 8000420:	2a04      	cmp	r2, #4
 8000422:	d000      	beq.n	8000426 <__aeabi_fmul+0x20a>
 8000424:	3304      	adds	r3, #4
 8000426:	015a      	lsls	r2, r3, #5
 8000428:	d504      	bpl.n	8000434 <__aeabi_fmul+0x218>
 800042a:	2401      	movs	r4, #1
 800042c:	2201      	movs	r2, #1
 800042e:	400c      	ands	r4, r1
 8000430:	2000      	movs	r0, #0
 8000432:	e73d      	b.n	80002b0 <__aeabi_fmul+0x94>
 8000434:	2401      	movs	r4, #1
 8000436:	019b      	lsls	r3, r3, #6
 8000438:	0a58      	lsrs	r0, r3, #9
 800043a:	400c      	ands	r4, r1
 800043c:	2200      	movs	r2, #0
 800043e:	e737      	b.n	80002b0 <__aeabi_fmul+0x94>
 8000440:	2080      	movs	r0, #128	; 0x80
 8000442:	2401      	movs	r4, #1
 8000444:	03c0      	lsls	r0, r0, #15
 8000446:	4328      	orrs	r0, r5
 8000448:	0240      	lsls	r0, r0, #9
 800044a:	0a40      	lsrs	r0, r0, #9
 800044c:	400c      	ands	r4, r1
 800044e:	22ff      	movs	r2, #255	; 0xff
 8000450:	e72e      	b.n	80002b0 <__aeabi_fmul+0x94>
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	08003c8c 	.word	0x08003c8c
 8000458:	f7ffffff 	.word	0xf7ffffff

0800045c <__aeabi_i2f>:
 800045c:	b570      	push	{r4, r5, r6, lr}
 800045e:	2800      	cmp	r0, #0
 8000460:	d030      	beq.n	80004c4 <__aeabi_i2f+0x68>
 8000462:	17c3      	asrs	r3, r0, #31
 8000464:	18c4      	adds	r4, r0, r3
 8000466:	405c      	eors	r4, r3
 8000468:	0fc5      	lsrs	r5, r0, #31
 800046a:	0020      	movs	r0, r4
 800046c:	f000 f846 	bl	80004fc <__clzsi2>
 8000470:	239e      	movs	r3, #158	; 0x9e
 8000472:	1a1b      	subs	r3, r3, r0
 8000474:	2b96      	cmp	r3, #150	; 0x96
 8000476:	dc0d      	bgt.n	8000494 <__aeabi_i2f+0x38>
 8000478:	2296      	movs	r2, #150	; 0x96
 800047a:	1ad2      	subs	r2, r2, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	002a      	movs	r2, r5
 8000480:	0264      	lsls	r4, r4, #9
 8000482:	0a64      	lsrs	r4, r4, #9
 8000484:	b2db      	uxtb	r3, r3
 8000486:	0264      	lsls	r4, r4, #9
 8000488:	05db      	lsls	r3, r3, #23
 800048a:	0a60      	lsrs	r0, r4, #9
 800048c:	07d2      	lsls	r2, r2, #31
 800048e:	4318      	orrs	r0, r3
 8000490:	4310      	orrs	r0, r2
 8000492:	bd70      	pop	{r4, r5, r6, pc}
 8000494:	2b99      	cmp	r3, #153	; 0x99
 8000496:	dc19      	bgt.n	80004cc <__aeabi_i2f+0x70>
 8000498:	2299      	movs	r2, #153	; 0x99
 800049a:	1ad2      	subs	r2, r2, r3
 800049c:	2a00      	cmp	r2, #0
 800049e:	dd29      	ble.n	80004f4 <__aeabi_i2f+0x98>
 80004a0:	4094      	lsls	r4, r2
 80004a2:	0022      	movs	r2, r4
 80004a4:	4c14      	ldr	r4, [pc, #80]	; (80004f8 <__aeabi_i2f+0x9c>)
 80004a6:	4014      	ands	r4, r2
 80004a8:	0751      	lsls	r1, r2, #29
 80004aa:	d004      	beq.n	80004b6 <__aeabi_i2f+0x5a>
 80004ac:	210f      	movs	r1, #15
 80004ae:	400a      	ands	r2, r1
 80004b0:	2a04      	cmp	r2, #4
 80004b2:	d000      	beq.n	80004b6 <__aeabi_i2f+0x5a>
 80004b4:	3404      	adds	r4, #4
 80004b6:	0162      	lsls	r2, r4, #5
 80004b8:	d413      	bmi.n	80004e2 <__aeabi_i2f+0x86>
 80004ba:	01a4      	lsls	r4, r4, #6
 80004bc:	0a64      	lsrs	r4, r4, #9
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	002a      	movs	r2, r5
 80004c2:	e7e0      	b.n	8000486 <__aeabi_i2f+0x2a>
 80004c4:	2200      	movs	r2, #0
 80004c6:	2300      	movs	r3, #0
 80004c8:	2400      	movs	r4, #0
 80004ca:	e7dc      	b.n	8000486 <__aeabi_i2f+0x2a>
 80004cc:	2205      	movs	r2, #5
 80004ce:	0021      	movs	r1, r4
 80004d0:	1a12      	subs	r2, r2, r0
 80004d2:	40d1      	lsrs	r1, r2
 80004d4:	22b9      	movs	r2, #185	; 0xb9
 80004d6:	1ad2      	subs	r2, r2, r3
 80004d8:	4094      	lsls	r4, r2
 80004da:	1e62      	subs	r2, r4, #1
 80004dc:	4194      	sbcs	r4, r2
 80004de:	430c      	orrs	r4, r1
 80004e0:	e7da      	b.n	8000498 <__aeabi_i2f+0x3c>
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <__aeabi_i2f+0x9c>)
 80004e4:	002a      	movs	r2, r5
 80004e6:	401c      	ands	r4, r3
 80004e8:	239f      	movs	r3, #159	; 0x9f
 80004ea:	01a4      	lsls	r4, r4, #6
 80004ec:	1a1b      	subs	r3, r3, r0
 80004ee:	0a64      	lsrs	r4, r4, #9
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	e7c8      	b.n	8000486 <__aeabi_i2f+0x2a>
 80004f4:	0022      	movs	r2, r4
 80004f6:	e7d5      	b.n	80004a4 <__aeabi_i2f+0x48>
 80004f8:	fbffffff 	.word	0xfbffffff

080004fc <__clzsi2>:
 80004fc:	211c      	movs	r1, #28
 80004fe:	2301      	movs	r3, #1
 8000500:	041b      	lsls	r3, r3, #16
 8000502:	4298      	cmp	r0, r3
 8000504:	d301      	bcc.n	800050a <__clzsi2+0xe>
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	3910      	subs	r1, #16
 800050a:	0a1b      	lsrs	r3, r3, #8
 800050c:	4298      	cmp	r0, r3
 800050e:	d301      	bcc.n	8000514 <__clzsi2+0x18>
 8000510:	0a00      	lsrs	r0, r0, #8
 8000512:	3908      	subs	r1, #8
 8000514:	091b      	lsrs	r3, r3, #4
 8000516:	4298      	cmp	r0, r3
 8000518:	d301      	bcc.n	800051e <__clzsi2+0x22>
 800051a:	0900      	lsrs	r0, r0, #4
 800051c:	3904      	subs	r1, #4
 800051e:	a202      	add	r2, pc, #8	; (adr r2, 8000528 <__clzsi2+0x2c>)
 8000520:	5c10      	ldrb	r0, [r2, r0]
 8000522:	1840      	adds	r0, r0, r1
 8000524:	4770      	bx	lr
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	02020304 	.word	0x02020304
 800052c:	01010101 	.word	0x01010101
	...

08000538 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <HAL_Init+0x24>)
 800053e:	4a07      	ldr	r2, [pc, #28]	; (800055c <HAL_Init+0x24>)
 8000540:	6812      	ldr	r2, [r2, #0]
 8000542:	2110      	movs	r1, #16
 8000544:	430a      	orrs	r2, r1
 8000546:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000548:	2000      	movs	r0, #0
 800054a:	f000 f809 	bl	8000560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800054e:	f003 f9ad 	bl	80038ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
}
 8000554:	0018      	movs	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	40022000 	.word	0x40022000

08000560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000568:	f001 ff02 	bl	8002370 <HAL_RCC_GetHCLKFreq>
 800056c:	0002      	movs	r2, r0
 800056e:	23fa      	movs	r3, #250	; 0xfa
 8000570:	0099      	lsls	r1, r3, #2
 8000572:	0010      	movs	r0, r2
 8000574:	f7ff fdc6 	bl	8000104 <__udivsi3>
 8000578:	0003      	movs	r3, r0
 800057a:	0018      	movs	r0, r3
 800057c:	f000 ff04 	bl	8001388 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000580:	6879      	ldr	r1, [r7, #4]
 8000582:	2301      	movs	r3, #1
 8000584:	425b      	negs	r3, r3
 8000586:	2200      	movs	r2, #0
 8000588:	0018      	movs	r0, r3
 800058a:	f000 fed7 	bl	800133c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
}
 8000590:	0018      	movs	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	b002      	add	sp, #8
 8000596:	bd80      	pop	{r7, pc}

08000598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  uwTick++;
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <HAL_IncTick+0x14>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	4b02      	ldr	r3, [pc, #8]	; (80005ac <HAL_IncTick+0x14>)
 80005a4:	601a      	str	r2, [r3, #0]
}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000050 	.word	0x20000050

080005b0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  return uwTick;
 80005b4:	4b02      	ldr	r3, [pc, #8]	; (80005c0 <HAL_GetTick+0x10>)
 80005b6:	681b      	ldr	r3, [r3, #0]
}
 80005b8:	0018      	movs	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	20000050 	.word	0x20000050

080005c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005cc:	f7ff fff0 	bl	80005b0 <HAL_GetTick>
 80005d0:	0003      	movs	r3, r0
 80005d2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3301      	adds	r3, #1
 80005dc:	d002      	beq.n	80005e4 <HAL_Delay+0x20>
  {
     wait++;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	3301      	adds	r3, #1
 80005e2:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	f7ff ffe3 	bl	80005b0 <HAL_GetTick>
 80005ea:	0002      	movs	r2, r0
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	1ad2      	subs	r2, r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	429a      	cmp	r2, r3
 80005f4:	d3f7      	bcc.n	80005e6 <HAL_Delay+0x22>
  {
  }
}
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b004      	add	sp, #16
 80005fc:	bd80      	pop	{r7, pc}

080005fe <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *             the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b084      	sub	sp, #16
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
  
  /* Check CAN handle */
  if(hcan == NULL)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d101      	bne.n	8000618 <HAL_CAN_Init+0x1a>
  {
     return HAL_ERROR;
 8000614:	2301      	movs	r3, #1
 8000616:	e111      	b.n	800083c <HAL_CAN_Init+0x23e>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	223d      	movs	r2, #61	; 0x3d
 800061c:	5c9b      	ldrb	r3, [r3, r2]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2b00      	cmp	r3, #0
 8000622:	d107      	bne.n	8000634 <HAL_CAN_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	223c      	movs	r2, #60	; 0x3c
 8000628:	2100      	movs	r1, #0
 800062a:	5499      	strb	r1, [r3, r2]
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	0018      	movs	r0, r3
 8000630:	f003 f974 	bl	800391c <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	223d      	movs	r2, #61	; 0x3d
 8000638:	2102      	movs	r1, #2
 800063a:	5499      	strb	r1, [r3, r2]
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	6812      	ldr	r2, [r2, #0]
 8000644:	6812      	ldr	r2, [r2, #0]
 8000646:	2102      	movs	r1, #2
 8000648:	438a      	bics	r2, r1
 800064a:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	6812      	ldr	r2, [r2, #0]
 8000654:	6812      	ldr	r2, [r2, #0]
 8000656:	2101      	movs	r1, #1
 8000658:	430a      	orrs	r2, r1
 800065a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();   
 800065c:	f7ff ffa8 	bl	80005b0 <HAL_GetTick>
 8000660:	0003      	movs	r3, r0
 8000662:	60bb      	str	r3, [r7, #8]
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000664:	e010      	b.n	8000688 <HAL_CAN_Init+0x8a>
  {
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8000666:	f7ff ffa3 	bl	80005b0 <HAL_GetTick>
 800066a:	0002      	movs	r2, r0
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	2b0a      	cmp	r3, #10
 8000672:	d909      	bls.n	8000688 <HAL_CAN_Init+0x8a>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	223d      	movs	r2, #61	; 0x3d
 8000678:	2103      	movs	r1, #3
 800067a:	5499      	strb	r1, [r3, r2]
      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	223c      	movs	r2, #60	; 0x3c
 8000680:	2100      	movs	r1, #0
 8000682:	5499      	strb	r1, [r3, r2]
      return HAL_TIMEOUT;
 8000684:	2303      	movs	r3, #3
 8000686:	e0d9      	b.n	800083c <HAL_CAN_Init+0x23e>
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	2201      	movs	r2, #1
 8000690:	4013      	ands	r3, r2
 8000692:	d0e8      	beq.n	8000666 <HAL_CAN_Init+0x68>
    }
  }

  /* Check acknowledge */
  if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	2201      	movs	r2, #1
 800069c:	4013      	ands	r3, r2
 800069e:	d100      	bne.n	80006a2 <HAL_CAN_Init+0xa4>
 80006a0:	e0bb      	b.n	800081a <HAL_CAN_Init+0x21c>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	699b      	ldr	r3, [r3, #24]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d108      	bne.n	80006bc <HAL_CAN_Init+0xbe>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	6812      	ldr	r2, [r2, #0]
 80006b2:	6812      	ldr	r2, [r2, #0]
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	430a      	orrs	r2, r1
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	e007      	b.n	80006cc <HAL_CAN_Init+0xce>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	6812      	ldr	r2, [r2, #0]
 80006c4:	6812      	ldr	r2, [r2, #0]
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	438a      	bics	r2, r1
 80006ca:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	69db      	ldr	r3, [r3, #28]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d108      	bne.n	80006e6 <HAL_CAN_Init+0xe8>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	6812      	ldr	r2, [r2, #0]
 80006dc:	6812      	ldr	r2, [r2, #0]
 80006de:	2140      	movs	r1, #64	; 0x40
 80006e0:	430a      	orrs	r2, r1
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	e007      	b.n	80006f6 <HAL_CAN_Init+0xf8>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	6812      	ldr	r2, [r2, #0]
 80006ee:	6812      	ldr	r2, [r2, #0]
 80006f0:	2140      	movs	r1, #64	; 0x40
 80006f2:	438a      	bics	r2, r1
 80006f4:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6a1b      	ldr	r3, [r3, #32]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d108      	bne.n	8000710 <HAL_CAN_Init+0x112>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	6812      	ldr	r2, [r2, #0]
 8000706:	6812      	ldr	r2, [r2, #0]
 8000708:	2120      	movs	r1, #32
 800070a:	430a      	orrs	r2, r1
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	e007      	b.n	8000720 <HAL_CAN_Init+0x122>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	6812      	ldr	r2, [r2, #0]
 8000718:	6812      	ldr	r2, [r2, #0]
 800071a:	2120      	movs	r1, #32
 800071c:	438a      	bics	r2, r1
 800071e:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000724:	2b01      	cmp	r3, #1
 8000726:	d108      	bne.n	800073a <HAL_CAN_Init+0x13c>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	6812      	ldr	r2, [r2, #0]
 8000730:	6812      	ldr	r2, [r2, #0]
 8000732:	2110      	movs	r1, #16
 8000734:	430a      	orrs	r2, r1
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	e007      	b.n	800074a <HAL_CAN_Init+0x14c>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	687a      	ldr	r2, [r7, #4]
 8000740:	6812      	ldr	r2, [r2, #0]
 8000742:	6812      	ldr	r2, [r2, #0]
 8000744:	2110      	movs	r1, #16
 8000746:	438a      	bics	r2, r1
 8000748:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800074e:	2b01      	cmp	r3, #1
 8000750:	d108      	bne.n	8000764 <HAL_CAN_Init+0x166>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	687a      	ldr	r2, [r7, #4]
 8000758:	6812      	ldr	r2, [r2, #0]
 800075a:	6812      	ldr	r2, [r2, #0]
 800075c:	2108      	movs	r1, #8
 800075e:	430a      	orrs	r2, r1
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	e007      	b.n	8000774 <HAL_CAN_Init+0x176>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	6812      	ldr	r2, [r2, #0]
 800076c:	6812      	ldr	r2, [r2, #0]
 800076e:	2108      	movs	r1, #8
 8000770:	438a      	bics	r2, r1
 8000772:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000778:	2b01      	cmp	r3, #1
 800077a:	d108      	bne.n	800078e <HAL_CAN_Init+0x190>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	687a      	ldr	r2, [r7, #4]
 8000782:	6812      	ldr	r2, [r2, #0]
 8000784:	6812      	ldr	r2, [r2, #0]
 8000786:	2104      	movs	r1, #4
 8000788:	430a      	orrs	r2, r1
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	e007      	b.n	800079e <HAL_CAN_Init+0x1a0>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	6812      	ldr	r2, [r2, #0]
 8000796:	6812      	ldr	r2, [r2, #0]
 8000798:	2104      	movs	r1, #4
 800079a:	438a      	bics	r2, r1
 800079c:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	6891      	ldr	r1, [r2, #8]
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	68d2      	ldr	r2, [r2, #12]
 80007aa:	4311      	orrs	r1, r2
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	6912      	ldr	r2, [r2, #16]
 80007b0:	4311      	orrs	r1, r2
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	6952      	ldr	r2, [r2, #20]
 80007b6:	4311      	orrs	r1, r2
 80007b8:	687a      	ldr	r2, [r7, #4]
 80007ba:	6852      	ldr	r2, [r2, #4]
 80007bc:	3a01      	subs	r2, #1
 80007be:	430a      	orrs	r2, r1
 80007c0:	61da      	str	r2, [r3, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1U) ));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	6812      	ldr	r2, [r2, #0]
 80007ca:	6812      	ldr	r2, [r2, #0]
 80007cc:	2101      	movs	r1, #1
 80007ce:	438a      	bics	r2, r1
 80007d0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();   
 80007d2:	f7ff feed 	bl	80005b0 <HAL_GetTick>
 80007d6:	0003      	movs	r3, r0
 80007d8:	60bb      	str	r3, [r7, #8]
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 80007da:	e010      	b.n	80007fe <HAL_CAN_Init+0x200>
    {
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 80007dc:	f7ff fee8 	bl	80005b0 <HAL_GetTick>
 80007e0:	0002      	movs	r2, r0
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	2b0a      	cmp	r3, #10
 80007e8:	d909      	bls.n	80007fe <HAL_CAN_Init+0x200>
      {
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	223d      	movs	r2, #61	; 0x3d
 80007ee:	2103      	movs	r1, #3
 80007f0:	5499      	strb	r1, [r3, r2]

       /* Process unlocked */
       __HAL_UNLOCK(hcan);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	223c      	movs	r2, #60	; 0x3c
 80007f6:	2100      	movs	r1, #0
 80007f8:	5499      	strb	r1, [r3, r2]

       return HAL_TIMEOUT;
 80007fa:	2303      	movs	r3, #3
 80007fc:	e01e      	b.n	800083c <HAL_CAN_Init+0x23e>
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	2201      	movs	r2, #1
 8000806:	4013      	ands	r3, r2
 8000808:	d1e8      	bne.n	80007dc <HAL_CAN_Init+0x1de>
      }
    }

    /* Check acknowledged */
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	2201      	movs	r2, #1
 8000812:	4013      	ands	r3, r2
 8000814:	d101      	bne.n	800081a <HAL_CAN_Init+0x21c>
    {
      status = CAN_INITSTATUS_SUCCESS;
 8000816:	2301      	movs	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
    }
  }
 
  if(status == CAN_INITSTATUS_SUCCESS)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d108      	bne.n	8000832 <HAL_CAN_Init+0x234>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2200      	movs	r2, #0
 8000824:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	223d      	movs	r2, #61	; 0x3d
 800082a:	2101      	movs	r1, #1
 800082c:	5499      	strb	r1, [r3, r2]
  
    /* Return function status */
    return HAL_OK;
 800082e:	2300      	movs	r3, #0
 8000830:	e004      	b.n	800083c <HAL_CAN_Init+0x23e>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	223d      	movs	r2, #61	; 0x3d
 8000836:	2104      	movs	r1, #4
 8000838:	5499      	strb	r1, [r3, r2]

    /* Return function status */
    return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
  }
}
 800083c:	0018      	movs	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	b004      	add	sp, #16
 8000842:	bd80      	pop	{r7, pc}

08000844 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos = 0U;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	2201      	movs	r2, #1
 8000858:	409a      	lsls	r2, r3
 800085a:	0013      	movs	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	6819      	ldr	r1, [r3, #0]
 8000866:	2380      	movs	r3, #128	; 0x80
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	58cb      	ldr	r3, [r1, r3]
 800086c:	496d      	ldr	r1, [pc, #436]	; (8000a24 <HAL_CAN_ConfigFilter+0x1e0>)
 800086e:	4019      	ands	r1, r3
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000874:	021b      	lsls	r3, r3, #8
 8000876:	430b      	orrs	r3, r1
 8000878:	2101      	movs	r1, #1
 800087a:	4319      	orrs	r1, r3
 800087c:	2380      	movs	r3, #128	; 0x80
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	50d1      	str	r1, [r2, r3]
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8U)   );  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6819      	ldr	r1, [r3, #0]
 800088a:	2387      	movs	r3, #135	; 0x87
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	58cb      	ldr	r3, [r1, r3]
 8000890:	68f9      	ldr	r1, [r7, #12]
 8000892:	43c9      	mvns	r1, r1
 8000894:	4019      	ands	r1, r3
 8000896:	2387      	movs	r3, #135	; 0x87
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	50d1      	str	r1, [r2, r3]

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	69db      	ldr	r3, [r3, #28]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d12e      	bne.n	8000902 <HAL_CAN_ConfigFilter+0xbe>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6819      	ldr	r1, [r3, #0]
 80008ac:	2383      	movs	r3, #131	; 0x83
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	58cb      	ldr	r3, [r1, r3]
 80008b2:	68f9      	ldr	r1, [r7, #12]
 80008b4:	43c9      	mvns	r1, r1
 80008b6:	4019      	ands	r1, r3
 80008b8:	2383      	movs	r3, #131	; 0x83
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	50d1      	str	r1, [r2, r3]

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	6958      	ldr	r0, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	041b      	lsls	r3, r3, #16
 80008d2:	0c1b      	lsrs	r3, r3, #16
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008d4:	4319      	orrs	r1, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80008d6:	0003      	movs	r3, r0
 80008d8:	3348      	adds	r3, #72	; 0x48
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	5099      	str	r1, [r3, r2]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6819      	ldr	r1, [r3, #0]
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	6958      	ldr	r0, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	041a      	lsls	r2, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	041b      	lsls	r3, r3, #16
 80008f2:	0c1b      	lsrs	r3, r3, #16
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008f4:	431a      	orrs	r2, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80008f6:	0003      	movs	r3, r0
 80008f8:	3348      	adds	r3, #72	; 0x48
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	18cb      	adds	r3, r1, r3
 80008fe:	3304      	adds	r3, #4
 8000900:	601a      	str	r2, [r3, #0]
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	69db      	ldr	r3, [r3, #28]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d12d      	bne.n	8000966 <HAL_CAN_ConfigFilter+0x122>
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	6819      	ldr	r1, [r3, #0]
 8000912:	2383      	movs	r3, #131	; 0x83
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	58c9      	ldr	r1, [r1, r3]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4319      	orrs	r1, r3
 800091c:	2383      	movs	r3, #131	; 0x83
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	50d1      	str	r1, [r2, r3]

    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	6958      	ldr	r0, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	041b      	lsls	r3, r3, #16
 8000936:	0c1b      	lsrs	r3, r3, #16
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000938:	4319      	orrs	r1, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 800093a:	0003      	movs	r3, r0
 800093c:	3348      	adds	r3, #72	; 0x48
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	5099      	str	r1, [r3, r2]

    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6819      	ldr	r1, [r3, #0]
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	6958      	ldr	r0, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	041a      	lsls	r2, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	041b      	lsls	r3, r3, #16
 8000956:	0c1b      	lsrs	r3, r3, #16
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000958:	431a      	orrs	r2, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 800095a:	0003      	movs	r3, r0
 800095c:	3348      	adds	r3, #72	; 0x48
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	18cb      	adds	r3, r1, r3
 8000962:	3304      	adds	r3, #4
 8000964:	601a      	str	r2, [r3, #0]
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d10d      	bne.n	800098a <HAL_CAN_ConfigFilter+0x146>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6819      	ldr	r1, [r3, #0]
 8000976:	2381      	movs	r3, #129	; 0x81
 8000978:	009b      	lsls	r3, r3, #2
 800097a:	58cb      	ldr	r3, [r1, r3]
 800097c:	68f9      	ldr	r1, [r7, #12]
 800097e:	43c9      	mvns	r1, r1
 8000980:	4019      	ands	r1, r3
 8000982:	2381      	movs	r3, #129	; 0x81
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	50d1      	str	r1, [r2, r3]
 8000988:	e00b      	b.n	80009a2 <HAL_CAN_ConfigFilter+0x15e>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6819      	ldr	r1, [r3, #0]
 8000992:	2381      	movs	r3, #129	; 0x81
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	58c9      	ldr	r1, [r1, r3]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	4319      	orrs	r1, r3
 800099c:	2381      	movs	r3, #129	; 0x81
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	50d1      	str	r1, [r2, r3]
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d10d      	bne.n	80009c6 <HAL_CAN_ConfigFilter+0x182>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	2385      	movs	r3, #133	; 0x85
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	58cb      	ldr	r3, [r1, r3]
 80009b8:	68f9      	ldr	r1, [r7, #12]
 80009ba:	43c9      	mvns	r1, r1
 80009bc:	4019      	ands	r1, r3
 80009be:	2385      	movs	r3, #133	; 0x85
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	50d1      	str	r1, [r2, r3]
 80009c4:	e00b      	b.n	80009de <HAL_CAN_ConfigFilter+0x19a>
  }
  else
  {
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6819      	ldr	r1, [r3, #0]
 80009ce:	2385      	movs	r3, #133	; 0x85
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	58c9      	ldr	r1, [r1, r3]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	4319      	orrs	r1, r3
 80009d8:	2385      	movs	r3, #133	; 0x85
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	50d1      	str	r1, [r2, r3]
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	6a1b      	ldr	r3, [r3, #32]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d10b      	bne.n	80009fe <HAL_CAN_ConfigFilter+0x1ba>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6819      	ldr	r1, [r3, #0]
 80009ee:	2387      	movs	r3, #135	; 0x87
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	58c9      	ldr	r1, [r1, r3]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4319      	orrs	r1, r3
 80009f8:	2387      	movs	r3, #135	; 0x87
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	50d1      	str	r1, [r2, r3]
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6819      	ldr	r1, [r3, #0]
 8000a06:	2380      	movs	r3, #128	; 0x80
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	58cb      	ldr	r3, [r1, r3]
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	438b      	bics	r3, r1
 8000a10:	0019      	movs	r1, r3
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	50d1      	str	r1, [r2, r3]
  
  /* Return function status */
  return HAL_OK;
 8000a18:	2300      	movs	r3, #0
}
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b004      	add	sp, #16
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	ffffc0ff 	.word	0xffffc0ff

08000a28 <HAL_CAN_Transmit>:
  *         the configuration information for the specified CAN.  
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  uint32_t transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
 8000a32:	2304      	movs	r3, #4
 8000a34:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	689a      	ldr	r2, [r3, #8]
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	04db      	lsls	r3, r3, #19
 8000a44:	401a      	ands	r2, r3
 8000a46:	2380      	movs	r3, #128	; 0x80
 8000a48:	04db      	lsls	r3, r3, #19
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d014      	beq.n	8000a78 <HAL_CAN_Transmit+0x50>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	689a      	ldr	r2, [r3, #8]
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	051b      	lsls	r3, r3, #20
 8000a58:	401a      	ands	r2, r3
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	051b      	lsls	r3, r3, #20
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d00a      	beq.n	8000a78 <HAL_CAN_Transmit+0x50>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	689a      	ldr	r2, [r3, #8]
 8000a68:	2380      	movs	r3, #128	; 0x80
 8000a6a:	055b      	lsls	r3, r3, #21
 8000a6c:	401a      	ands	r2, r3
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	055b      	lsls	r3, r3, #21
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d000      	beq.n	8000a78 <HAL_CAN_Transmit+0x50>
 8000a76:	e181      	b.n	8000d7c <HAL_CAN_Transmit+0x354>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	223c      	movs	r2, #60	; 0x3c
 8000a7c:	5c9b      	ldrb	r3, [r3, r2]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d101      	bne.n	8000a86 <HAL_CAN_Transmit+0x5e>
 8000a82:	2302      	movs	r3, #2
 8000a84:	e17f      	b.n	8000d86 <HAL_CAN_Transmit+0x35e>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	223c      	movs	r2, #60	; 0x3c
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	5499      	strb	r1, [r3, r2]

    /* Change CAN state */
    switch(hcan->State)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	223d      	movs	r2, #61	; 0x3d
 8000a92:	5c9b      	ldrb	r3, [r3, r2]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b32      	cmp	r3, #50	; 0x32
 8000a98:	d008      	beq.n	8000aac <HAL_CAN_Transmit+0x84>
 8000a9a:	2b62      	cmp	r3, #98	; 0x62
 8000a9c:	d00b      	beq.n	8000ab6 <HAL_CAN_Transmit+0x8e>
 8000a9e:	2b22      	cmp	r3, #34	; 0x22
 8000aa0:	d10e      	bne.n	8000ac0 <HAL_CAN_Transmit+0x98>
    {
      case(HAL_CAN_STATE_BUSY_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	223d      	movs	r2, #61	; 0x3d
 8000aa6:	2142      	movs	r1, #66	; 0x42
 8000aa8:	5499      	strb	r1, [r3, r2]
          break;
 8000aaa:	e00e      	b.n	8000aca <HAL_CAN_Transmit+0xa2>
      case(HAL_CAN_STATE_BUSY_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	223d      	movs	r2, #61	; 0x3d
 8000ab0:	2152      	movs	r1, #82	; 0x52
 8000ab2:	5499      	strb	r1, [r3, r2]
          break;
 8000ab4:	e009      	b.n	8000aca <HAL_CAN_Transmit+0xa2>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	223d      	movs	r2, #61	; 0x3d
 8000aba:	2172      	movs	r1, #114	; 0x72
 8000abc:	5499      	strb	r1, [r3, r2]
          break;
 8000abe:	e004      	b.n	8000aca <HAL_CAN_Transmit+0xa2>
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	223d      	movs	r2, #61	; 0x3d
 8000ac4:	2112      	movs	r1, #18
 8000ac6:	5499      	strb	r1, [r3, r2]
          break;
 8000ac8:	46c0      	nop			; (mov r8, r8)
    }

    /* Select one empty transmit mailbox */
    if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	689a      	ldr	r2, [r3, #8]
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	04db      	lsls	r3, r3, #19
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	d002      	beq.n	8000ade <HAL_CAN_Transmit+0xb6>
    {
      transmitmailbox = CAN_TXMAILBOX_0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	e00b      	b.n	8000af6 <HAL_CAN_Transmit+0xce>
    }
    else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	689a      	ldr	r2, [r3, #8]
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	051b      	lsls	r3, r3, #20
 8000ae8:	4013      	ands	r3, r2
 8000aea:	d002      	beq.n	8000af2 <HAL_CAN_Transmit+0xca>
    {
      transmitmailbox = CAN_TXMAILBOX_1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	e001      	b.n	8000af6 <HAL_CAN_Transmit+0xce>
    }
    else
    {
      transmitmailbox = CAN_TXMAILBOX_2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	60fb      	str	r3, [r7, #12]
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	68f9      	ldr	r1, [r7, #12]
 8000b00:	3118      	adds	r1, #24
 8000b02:	0109      	lsls	r1, r1, #4
 8000b04:	58cb      	ldr	r3, [r1, r3]
 8000b06:	2101      	movs	r1, #1
 8000b08:	4019      	ands	r1, r3
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	3318      	adds	r3, #24
 8000b0e:	011b      	lsls	r3, r3, #4
 8000b10:	5099      	str	r1, [r3, r2]
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d115      	bne.n	8000b48 <HAL_CAN_Transmit+0x120>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) | \
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68f9      	ldr	r1, [r7, #12]
 8000b26:	3118      	adds	r1, #24
 8000b28:	0109      	lsls	r1, r1, #4
 8000b2a:	58c9      	ldr	r1, [r1, r3]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	0558      	lsls	r0, r3, #21
                                                           hcan->pTxMsg->RTR);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	68db      	ldr	r3, [r3, #12]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) | \
 8000b3a:	4303      	orrs	r3, r0
 8000b3c:	4319      	orrs	r1, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	3318      	adds	r3, #24
 8000b42:	011b      	lsls	r3, r3, #4
 8000b44:	5099      	str	r1, [r3, r2]
 8000b46:	e018      	b.n	8000b7a <HAL_CAN_Transmit+0x152>
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	68f9      	ldr	r1, [r7, #12]
 8000b52:	3118      	adds	r1, #24
 8000b54:	0109      	lsls	r1, r1, #4
 8000b56:	58c9      	ldr	r1, [r1, r3]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	00d8      	lsls	r0, r3, #3
                                                           hcan->pTxMsg->IDE | \
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b64:	689b      	ldr	r3, [r3, #8]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 8000b66:	4318      	orrs	r0, r3
                                                           hcan->pTxMsg->RTR);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	68db      	ldr	r3, [r3, #12]
                                                           hcan->pTxMsg->IDE | \
 8000b6e:	4303      	orrs	r3, r0
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 8000b70:	4319      	orrs	r1, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3318      	adds	r3, #24
 8000b76:	011b      	lsls	r3, r3, #4
 8000b78:	5099      	str	r1, [r3, r2]
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000b82:	6912      	ldr	r2, [r2, #16]
 8000b84:	210f      	movs	r1, #15
 8000b86:	400a      	ands	r2, r1
 8000b88:	611a      	str	r2, [r3, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6819      	ldr	r1, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3318      	adds	r3, #24
 8000b96:	011b      	lsls	r3, r3, #4
 8000b98:	18d3      	adds	r3, r2, r3
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	220f      	movs	r2, #15
 8000ba0:	4393      	bics	r3, r2
 8000ba2:	001a      	movs	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3318      	adds	r3, #24
 8000ba8:	011b      	lsls	r3, r3, #4
 8000baa:	18cb      	adds	r3, r1, r3
 8000bac:	3304      	adds	r3, #4
 8000bae:	601a      	str	r2, [r3, #0]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6819      	ldr	r1, [r3, #0]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3318      	adds	r3, #24
 8000bbc:	011b      	lsls	r3, r3, #4
 8000bbe:	18d3      	adds	r3, r2, r3
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	691b      	ldr	r3, [r3, #16]
 8000bca:	431a      	orrs	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3318      	adds	r3, #24
 8000bd0:	011b      	lsls	r3, r3, #4
 8000bd2:	18cb      	adds	r3, r1, r3
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) |
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6818      	ldr	r0, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	7ddb      	ldrb	r3, [r3, #23]
 8000be2:	061a      	lsls	r2, r3, #24
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	7d9b      	ldrb	r3, [r3, #22]
 8000bea:	041b      	lsls	r3, r3, #16
 8000bec:	431a      	orrs	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	7d5b      	ldrb	r3, [r3, #21]
 8000bf4:	021b      	lsls	r3, r3, #8
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	7d1b      	ldrb	r3, [r3, #20]
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	68f9      	ldr	r1, [r7, #12]
 8000c02:	23c4      	movs	r3, #196	; 0xc4
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	0109      	lsls	r1, r1, #4
 8000c08:	1841      	adds	r1, r0, r1
 8000c0a:	18cb      	adds	r3, r1, r3
 8000c0c:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[2] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[1] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[0] << CAN_TDL0R_DATA0_Pos));
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_Pos) |
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6818      	ldr	r0, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	7edb      	ldrb	r3, [r3, #27]
 8000c18:	061a      	lsls	r2, r3, #24
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	7e9b      	ldrb	r3, [r3, #26]
 8000c20:	041b      	lsls	r3, r3, #16
 8000c22:	431a      	orrs	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	7e5b      	ldrb	r3, [r3, #25]
 8000c2a:	021b      	lsls	r3, r3, #8
 8000c2c:	431a      	orrs	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	7e1b      	ldrb	r3, [r3, #24]
 8000c34:	431a      	orrs	r2, r3
 8000c36:	68f9      	ldr	r1, [r7, #12]
 8000c38:	23c6      	movs	r3, #198	; 0xc6
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	0109      	lsls	r1, r1, #4
 8000c3e:	1841      	adds	r1, r0, r1
 8000c40:	18cb      	adds	r3, r1, r3
 8000c42:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[6] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[5] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[4] << CAN_TDL0R_DATA0_Pos));

    /* Request transmission */
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68f9      	ldr	r1, [r7, #12]
 8000c4e:	3118      	adds	r1, #24
 8000c50:	0109      	lsls	r1, r1, #4
 8000c52:	58cb      	ldr	r3, [r1, r3]
 8000c54:	2101      	movs	r1, #1
 8000c56:	4319      	orrs	r1, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3318      	adds	r3, #24
 8000c5c:	011b      	lsls	r3, r3, #4
 8000c5e:	5099      	str	r1, [r3, r2]
  
    /* Get tick */
    tickstart = HAL_GetTick();   
 8000c60:	f7ff fca6 	bl	80005b0 <HAL_GetTick>
 8000c64:	0003      	movs	r3, r0
 8000c66:	60bb      	str	r3, [r7, #8]
  
    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8000c68:	e039      	b.n	8000cde <HAL_CAN_Transmit+0x2b6>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	d036      	beq.n	8000cde <HAL_CAN_Transmit+0x2b6>
      {
        if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d007      	beq.n	8000c86 <HAL_CAN_Transmit+0x25e>
 8000c76:	f7ff fc9b 	bl	80005b0 <HAL_GetTick>
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	1ad2      	subs	r2, r2, r3
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	429a      	cmp	r2, r3
 8000c84:	d92b      	bls.n	8000cde <HAL_CAN_Transmit+0x2b6>
        {
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	223d      	movs	r2, #61	; 0x3d
 8000c8a:	2103      	movs	r1, #3
 8000c8c:	5499      	strb	r1, [r3, r2]

          /* Cancel transmission */
          __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d108      	bne.n	8000ca6 <HAL_CAN_Transmit+0x27e>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	6812      	ldr	r2, [r2, #0]
 8000c9c:	6892      	ldr	r2, [r2, #8]
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	e015      	b.n	8000cd2 <HAL_CAN_Transmit+0x2aa>
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d109      	bne.n	8000cc0 <HAL_CAN_Transmit+0x298>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	6812      	ldr	r2, [r2, #0]
 8000cb4:	6892      	ldr	r2, [r2, #8]
 8000cb6:	2180      	movs	r1, #128	; 0x80
 8000cb8:	0209      	lsls	r1, r1, #8
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	e008      	b.n	8000cd2 <HAL_CAN_Transmit+0x2aa>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	6812      	ldr	r2, [r2, #0]
 8000cc8:	6892      	ldr	r2, [r2, #8]
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	0409      	lsls	r1, r1, #16
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	609a      	str	r2, [r3, #8]

          /* Process unlocked */
          __HAL_UNLOCK(hcan);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	223c      	movs	r2, #60	; 0x3c
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e053      	b.n	8000d86 <HAL_CAN_Transmit+0x35e>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d10b      	bne.n	8000cfc <HAL_CAN_Transmit+0x2d4>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	4a29      	ldr	r2, [pc, #164]	; (8000d90 <HAL_CAN_Transmit+0x368>)
 8000cec:	4013      	ands	r3, r2
 8000cee:	4a29      	ldr	r2, [pc, #164]	; (8000d94 <HAL_CAN_Transmit+0x36c>)
 8000cf0:	4694      	mov	ip, r2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	1e5a      	subs	r2, r3, #1
 8000cf6:	4193      	sbcs	r3, r2
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	e019      	b.n	8000d30 <HAL_CAN_Transmit+0x308>
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d10b      	bne.n	8000d1a <HAL_CAN_Transmit+0x2f2>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	4a23      	ldr	r2, [pc, #140]	; (8000d98 <HAL_CAN_Transmit+0x370>)
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	4a23      	ldr	r2, [pc, #140]	; (8000d9c <HAL_CAN_Transmit+0x374>)
 8000d0e:	4694      	mov	ip, r2
 8000d10:	4463      	add	r3, ip
 8000d12:	1e5a      	subs	r2, r3, #1
 8000d14:	4193      	sbcs	r3, r2
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	e00a      	b.n	8000d30 <HAL_CAN_Transmit+0x308>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	4a1f      	ldr	r2, [pc, #124]	; (8000da0 <HAL_CAN_Transmit+0x378>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	4a1f      	ldr	r2, [pc, #124]	; (8000da4 <HAL_CAN_Transmit+0x37c>)
 8000d26:	4694      	mov	ip, r2
 8000d28:	4463      	add	r3, ip
 8000d2a:	1e5a      	subs	r2, r3, #1
 8000d2c:	4193      	sbcs	r3, r2
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d19a      	bne.n	8000c6a <HAL_CAN_Transmit+0x242>
        }
      }
    }

    /* Change CAN state */
    switch(hcan->State)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	223d      	movs	r2, #61	; 0x3d
 8000d38:	5c9b      	ldrb	r3, [r3, r2]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b52      	cmp	r3, #82	; 0x52
 8000d3e:	d008      	beq.n	8000d52 <HAL_CAN_Transmit+0x32a>
 8000d40:	2b72      	cmp	r3, #114	; 0x72
 8000d42:	d00b      	beq.n	8000d5c <HAL_CAN_Transmit+0x334>
 8000d44:	2b42      	cmp	r3, #66	; 0x42
 8000d46:	d10e      	bne.n	8000d66 <HAL_CAN_Transmit+0x33e>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	223d      	movs	r2, #61	; 0x3d
 8000d4c:	2122      	movs	r1, #34	; 0x22
 8000d4e:	5499      	strb	r1, [r3, r2]
          break;
 8000d50:	e00e      	b.n	8000d70 <HAL_CAN_Transmit+0x348>
      case(HAL_CAN_STATE_BUSY_TX_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	223d      	movs	r2, #61	; 0x3d
 8000d56:	2132      	movs	r1, #50	; 0x32
 8000d58:	5499      	strb	r1, [r3, r2]
          break;
 8000d5a:	e009      	b.n	8000d70 <HAL_CAN_Transmit+0x348>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	223d      	movs	r2, #61	; 0x3d
 8000d60:	2162      	movs	r1, #98	; 0x62
 8000d62:	5499      	strb	r1, [r3, r2]
          break;
 8000d64:	e004      	b.n	8000d70 <HAL_CAN_Transmit+0x348>
      default: /* HAL_CAN_STATE_BUSY_TX */
          hcan->State = HAL_CAN_STATE_READY;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	223d      	movs	r2, #61	; 0x3d
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	5499      	strb	r1, [r3, r2]
          break;
 8000d6e:	46c0      	nop			; (mov r8, r8)
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	223c      	movs	r2, #60	; 0x3c
 8000d74:	2100      	movs	r1, #0
 8000d76:	5499      	strb	r1, [r3, r2]
    
    /* Return function status */
    return HAL_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e004      	b.n	8000d86 <HAL_CAN_Transmit+0x35e>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR; 
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	223d      	movs	r2, #61	; 0x3d
 8000d80:	2104      	movs	r1, #4
 8000d82:	5499      	strb	r1, [r3, r2]

    /* Return function status */
    return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
  }
}
 8000d86:	0018      	movs	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b004      	add	sp, #16
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	04000001 	.word	0x04000001
 8000d94:	fbffffff 	.word	0xfbffffff
 8000d98:	08000100 	.word	0x08000100
 8000d9c:	f7ffff00 	.word	0xf7ffff00
 8000da0:	10010000 	.word	0x10010000
 8000da4:	efff0000 	.word	0xefff0000

08000da8 <HAL_CAN_Receive>:
  * @param  FIFONumber    FIFO number.
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Receive(CAN_HandleTypeDef* hcan, uint8_t FIFONumber, uint32_t Timeout)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	230b      	movs	r3, #11
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	1c0a      	adds	r2, r1, #0
 8000db8:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  CanRxMsgTypeDef* pRxMsg = NULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));

  /* Process locked */
  __HAL_LOCK(hcan);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	223c      	movs	r2, #60	; 0x3c
 8000dc6:	5c9b      	ldrb	r3, [r3, r2]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d101      	bne.n	8000dd0 <HAL_CAN_Receive+0x28>
 8000dcc:	2302      	movs	r3, #2
 8000dce:	e1fd      	b.n	80011cc <HAL_CAN_Receive+0x424>
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	223c      	movs	r2, #60	; 0x3c
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	5499      	strb	r1, [r3, r2]

  /* Check if CAN state is not busy for RX FIFO0 */
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||         \
 8000dd8:	230b      	movs	r3, #11
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d11d      	bne.n	8000e1e <HAL_CAN_Receive+0x76>
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	223d      	movs	r2, #61	; 0x3d
 8000de6:	5c9b      	ldrb	r3, [r3, r2]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b22      	cmp	r3, #34	; 0x22
 8000dec:	d011      	beq.n	8000e12 <HAL_CAN_Receive+0x6a>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	223d      	movs	r2, #61	; 0x3d
 8000df2:	5c9b      	ldrb	r3, [r3, r2]
 8000df4:	b2db      	uxtb	r3, r3
  if ((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||         \
 8000df6:	2b42      	cmp	r3, #66	; 0x42
 8000df8:	d00b      	beq.n	8000e12 <HAL_CAN_Receive+0x6a>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	223d      	movs	r2, #61	; 0x3d
 8000dfe:	5c9b      	ldrb	r3, [r3, r2]
 8000e00:	b2db      	uxtb	r3, r3
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 8000e02:	2b62      	cmp	r3, #98	; 0x62
 8000e04:	d005      	beq.n	8000e12 <HAL_CAN_Receive+0x6a>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	223d      	movs	r2, #61	; 0x3d
 8000e0a:	5c9b      	ldrb	r3, [r3, r2]
 8000e0c:	b2db      	uxtb	r3, r3
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000e0e:	2b72      	cmp	r3, #114	; 0x72
 8000e10:	d105      	bne.n	8000e1e <HAL_CAN_Receive+0x76>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	223c      	movs	r2, #60	; 0x3c
 8000e16:	2100      	movs	r1, #0
 8000e18:	5499      	strb	r1, [r3, r2]

    return HAL_BUSY;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	e1d6      	b.n	80011cc <HAL_CAN_Receive+0x424>
  }

  /* Check if CAN state is not busy for RX FIFO1 */
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 8000e1e:	230b      	movs	r3, #11
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d11d      	bne.n	8000e64 <HAL_CAN_Receive+0xbc>
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	223d      	movs	r2, #61	; 0x3d
 8000e2c:	5c9b      	ldrb	r3, [r3, r2]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b32      	cmp	r3, #50	; 0x32
 8000e32:	d011      	beq.n	8000e58 <HAL_CAN_Receive+0xb0>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	223d      	movs	r2, #61	; 0x3d
 8000e38:	5c9b      	ldrb	r3, [r3, r2]
 8000e3a:	b2db      	uxtb	r3, r3
  if ((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 8000e3c:	2b52      	cmp	r3, #82	; 0x52
 8000e3e:	d00b      	beq.n	8000e58 <HAL_CAN_Receive+0xb0>
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	223d      	movs	r2, #61	; 0x3d
 8000e44:	5c9b      	ldrb	r3, [r3, r2]
 8000e46:	b2db      	uxtb	r3, r3
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 8000e48:	2b62      	cmp	r3, #98	; 0x62
 8000e4a:	d005      	beq.n	8000e58 <HAL_CAN_Receive+0xb0>
                                    (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	223d      	movs	r2, #61	; 0x3d
 8000e50:	5c9b      	ldrb	r3, [r3, r2]
 8000e52:	b2db      	uxtb	r3, r3
                                    (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8000e54:	2b72      	cmp	r3, #114	; 0x72
 8000e56:	d105      	bne.n	8000e64 <HAL_CAN_Receive+0xbc>
  {
    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	223c      	movs	r2, #60	; 0x3c
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	5499      	strb	r1, [r3, r2]

    return HAL_BUSY;
 8000e60:	2302      	movs	r3, #2
 8000e62:	e1b3      	b.n	80011cc <HAL_CAN_Receive+0x424>
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
 8000e64:	230b      	movs	r3, #11
 8000e66:	18fb      	adds	r3, r7, r3
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d11e      	bne.n	8000eac <HAL_CAN_Receive+0x104>
  {
    switch(hcan->State)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	223d      	movs	r2, #61	; 0x3d
 8000e72:	5c9b      	ldrb	r3, [r3, r2]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b32      	cmp	r3, #50	; 0x32
 8000e78:	d008      	beq.n	8000e8c <HAL_CAN_Receive+0xe4>
 8000e7a:	2b52      	cmp	r3, #82	; 0x52
 8000e7c:	d00b      	beq.n	8000e96 <HAL_CAN_Receive+0xee>
 8000e7e:	2b12      	cmp	r3, #18
 8000e80:	d10e      	bne.n	8000ea0 <HAL_CAN_Receive+0xf8>
    {
      case(HAL_CAN_STATE_BUSY_TX):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	223d      	movs	r2, #61	; 0x3d
 8000e86:	2142      	movs	r1, #66	; 0x42
 8000e88:	5499      	strb	r1, [r3, r2]
        break;
 8000e8a:	e02d      	b.n	8000ee8 <HAL_CAN_Receive+0x140>
      case(HAL_CAN_STATE_BUSY_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	223d      	movs	r2, #61	; 0x3d
 8000e90:	2162      	movs	r1, #98	; 0x62
 8000e92:	5499      	strb	r1, [r3, r2]
        break;
 8000e94:	e028      	b.n	8000ee8 <HAL_CAN_Receive+0x140>
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	223d      	movs	r2, #61	; 0x3d
 8000e9a:	2172      	movs	r1, #114	; 0x72
 8000e9c:	5499      	strb	r1, [r3, r2]
        break;
 8000e9e:	e023      	b.n	8000ee8 <HAL_CAN_Receive+0x140>
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	223d      	movs	r2, #61	; 0x3d
 8000ea4:	2122      	movs	r1, #34	; 0x22
 8000ea6:	5499      	strb	r1, [r3, r2]
        break;
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	e01d      	b.n	8000ee8 <HAL_CAN_Receive+0x140>
    }
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    switch(hcan->State)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	223d      	movs	r2, #61	; 0x3d
 8000eb0:	5c9b      	ldrb	r3, [r3, r2]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b22      	cmp	r3, #34	; 0x22
 8000eb6:	d008      	beq.n	8000eca <HAL_CAN_Receive+0x122>
 8000eb8:	2b42      	cmp	r3, #66	; 0x42
 8000eba:	d00b      	beq.n	8000ed4 <HAL_CAN_Receive+0x12c>
 8000ebc:	2b12      	cmp	r3, #18
 8000ebe:	d10e      	bne.n	8000ede <HAL_CAN_Receive+0x136>
    {
      case(HAL_CAN_STATE_BUSY_TX):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	223d      	movs	r2, #61	; 0x3d
 8000ec4:	2152      	movs	r1, #82	; 0x52
 8000ec6:	5499      	strb	r1, [r3, r2]
        break;
 8000ec8:	e00e      	b.n	8000ee8 <HAL_CAN_Receive+0x140>
      case(HAL_CAN_STATE_BUSY_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	223d      	movs	r2, #61	; 0x3d
 8000ece:	2162      	movs	r1, #98	; 0x62
 8000ed0:	5499      	strb	r1, [r3, r2]
        break;
 8000ed2:	e009      	b.n	8000ee8 <HAL_CAN_Receive+0x140>
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	223d      	movs	r2, #61	; 0x3d
 8000ed8:	2172      	movs	r1, #114	; 0x72
 8000eda:	5499      	strb	r1, [r3, r2]
        break;
 8000edc:	e004      	b.n	8000ee8 <HAL_CAN_Receive+0x140>
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	223d      	movs	r2, #61	; 0x3d
 8000ee2:	2132      	movs	r1, #50	; 0x32
 8000ee4:	5499      	strb	r1, [r3, r2]
        break;
 8000ee6:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Get tick */
  tickstart = HAL_GetTick();   
 8000ee8:	f7ff fb62 	bl	80005b0 <HAL_GetTick>
 8000eec:	0003      	movs	r3, r0
 8000eee:	613b      	str	r3, [r7, #16]
  
  /* Check pending message */
  while(__HAL_CAN_MSG_PENDING(hcan, FIFONumber) == 0U)
 8000ef0:	e017      	b.n	8000f22 <HAL_CAN_Receive+0x17a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	d014      	beq.n	8000f22 <HAL_CAN_Receive+0x17a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d007      	beq.n	8000f0e <HAL_CAN_Receive+0x166>
 8000efe:	f7ff fb57 	bl	80005b0 <HAL_GetTick>
 8000f02:	0002      	movs	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad2      	subs	r2, r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d909      	bls.n	8000f22 <HAL_CAN_Receive+0x17a>
      {
        hcan->State = HAL_CAN_STATE_TIMEOUT;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	223d      	movs	r2, #61	; 0x3d
 8000f12:	2103      	movs	r1, #3
 8000f14:	5499      	strb	r1, [r3, r2]

        /* Process unlocked */
        __HAL_UNLOCK(hcan);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	223c      	movs	r2, #60	; 0x3c
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e154      	b.n	80011cc <HAL_CAN_Receive+0x424>
  while(__HAL_CAN_MSG_PENDING(hcan, FIFONumber) == 0U)
 8000f22:	230b      	movs	r3, #11
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d10a      	bne.n	8000f42 <HAL_CAN_Receive+0x19a>
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	001a      	movs	r2, r3
 8000f36:	2303      	movs	r3, #3
 8000f38:	4013      	ands	r3, r2
 8000f3a:	425a      	negs	r2, r3
 8000f3c:	4153      	adcs	r3, r2
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	e009      	b.n	8000f56 <HAL_CAN_Receive+0x1ae>
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	001a      	movs	r2, r3
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	4013      	ands	r3, r2
 8000f50:	425a      	negs	r2, r3
 8000f52:	4153      	adcs	r3, r2
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1cb      	bne.n	8000ef2 <HAL_CAN_Receive+0x14a>
      }
    }
  }

  /* Set RxMsg pointer */
  if(FIFONumber == CAN_FIFO0)
 8000f5a:	230b      	movs	r3, #11
 8000f5c:	18fb      	adds	r3, r7, r3
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d103      	bne.n	8000f6c <HAL_CAN_Receive+0x1c4>
  {
    pRxMsg = hcan->pRxMsg;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	e002      	b.n	8000f72 <HAL_CAN_Receive+0x1ca>
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    pRxMsg = hcan->pRx1Msg;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f70:	617b      	str	r3, [r7, #20]
  }

  /* Get the Id */
  pRxMsg->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	220b      	movs	r2, #11
 8000f78:	18ba      	adds	r2, r7, r2
 8000f7a:	7812      	ldrb	r2, [r2, #0]
 8000f7c:	321b      	adds	r2, #27
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	58d3      	ldr	r3, [r2, r3]
 8000f82:	2204      	movs	r2, #4
 8000f84:	401a      	ands	r2, r3
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	609a      	str	r2, [r3, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10d      	bne.n	8000fae <HAL_CAN_Receive+0x206>
  {
    pRxMsg->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_TI0R_STID_Pos;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	220b      	movs	r2, #11
 8000f98:	18ba      	adds	r2, r7, r2
 8000f9a:	7812      	ldrb	r2, [r2, #0]
 8000f9c:	321b      	adds	r2, #27
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	58d3      	ldr	r3, [r2, r3]
 8000fa2:	0d5b      	lsrs	r3, r3, #21
 8000fa4:	055b      	lsls	r3, r3, #21
 8000fa6:	0d5a      	lsrs	r2, r3, #21
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	e00c      	b.n	8000fc8 <HAL_CAN_Receive+0x220>
  }
  else
  {
    pRxMsg->ExtId = (0xFFFFFFF8U & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_EXID_Pos;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	220b      	movs	r2, #11
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	7812      	ldrb	r2, [r2, #0]
 8000fb8:	321b      	adds	r2, #27
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	58d3      	ldr	r3, [r2, r3]
 8000fbe:	08db      	lsrs	r3, r3, #3
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	08da      	lsrs	r2, r3, #3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	605a      	str	r2, [r3, #4]
  }
  pRxMsg->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[FIFONumber].RIR) >> CAN_RI0R_RTR_Pos;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	220b      	movs	r2, #11
 8000fce:	18ba      	adds	r2, r7, r2
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	321b      	adds	r2, #27
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	58d3      	ldr	r3, [r2, r3]
 8000fd8:	085b      	lsrs	r3, r3, #1
 8000fda:	2201      	movs	r2, #1
 8000fdc:	401a      	ands	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	60da      	str	r2, [r3, #12]
  /* Get the DLC */
  pRxMsg->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	230b      	movs	r3, #11
 8000fe8:	18fb      	adds	r3, r7, r3
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	331b      	adds	r3, #27
 8000fee:	011b      	lsls	r3, r3, #4
 8000ff0:	18d3      	adds	r3, r2, r3
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	220f      	movs	r2, #15
 8000ff8:	401a      	ands	r2, r3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	611a      	str	r2, [r3, #16]
  /* Get the FMI */
  pRxMsg->FMI = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	230b      	movs	r3, #11
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	331b      	adds	r3, #27
 800100a:	011b      	lsls	r3, r3, #4
 800100c:	18d3      	adds	r3, r2, r3
 800100e:	3304      	adds	r3, #4
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	0a1b      	lsrs	r3, r3, #8
 8001014:	22ff      	movs	r2, #255	; 0xff
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	61da      	str	r2, [r3, #28]
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
 800101c:	230b      	movs	r3, #11
 800101e:	18fb      	adds	r3, r7, r3
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	621a      	str	r2, [r3, #32]
  /* Get the data field */
  pRxMsg->Data[0] = (CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA0_Pos;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6819      	ldr	r1, [r3, #0]
 800102a:	230b      	movs	r3, #11
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	781a      	ldrb	r2, [r3, #0]
 8001030:	23dc      	movs	r3, #220	; 0xdc
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	0112      	lsls	r2, r2, #4
 8001036:	188a      	adds	r2, r1, r2
 8001038:	18d3      	adds	r3, r2, r3
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	751a      	strb	r2, [r3, #20]
  pRxMsg->Data[1] = (CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA1_Pos;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6819      	ldr	r1, [r3, #0]
 8001046:	230b      	movs	r3, #11
 8001048:	18fb      	adds	r3, r7, r3
 800104a:	781a      	ldrb	r2, [r3, #0]
 800104c:	23dc      	movs	r3, #220	; 0xdc
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	188a      	adds	r2, r1, r2
 8001054:	18d3      	adds	r3, r2, r3
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	0a1b      	lsrs	r3, r3, #8
 800105a:	b2da      	uxtb	r2, r3
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	755a      	strb	r2, [r3, #21]
  pRxMsg->Data[2] = (CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA2_Pos;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6819      	ldr	r1, [r3, #0]
 8001064:	230b      	movs	r3, #11
 8001066:	18fb      	adds	r3, r7, r3
 8001068:	781a      	ldrb	r2, [r3, #0]
 800106a:	23dc      	movs	r3, #220	; 0xdc
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	0112      	lsls	r2, r2, #4
 8001070:	188a      	adds	r2, r1, r2
 8001072:	18d3      	adds	r3, r2, r3
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	0c1b      	lsrs	r3, r3, #16
 8001078:	b2da      	uxtb	r2, r3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	759a      	strb	r2, [r3, #22]
  pRxMsg->Data[3] = (CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR) >> CAN_RDL0R_DATA3_Pos;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6819      	ldr	r1, [r3, #0]
 8001082:	230b      	movs	r3, #11
 8001084:	18fb      	adds	r3, r7, r3
 8001086:	781a      	ldrb	r2, [r3, #0]
 8001088:	23dc      	movs	r3, #220	; 0xdc
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	188a      	adds	r2, r1, r2
 8001090:	18d3      	adds	r3, r2, r3
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	0e1b      	lsrs	r3, r3, #24
 8001096:	b2da      	uxtb	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	75da      	strb	r2, [r3, #23]
  pRxMsg->Data[4] = (CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA4_Pos;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6819      	ldr	r1, [r3, #0]
 80010a0:	230b      	movs	r3, #11
 80010a2:	18fb      	adds	r3, r7, r3
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	23de      	movs	r3, #222	; 0xde
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	188a      	adds	r2, r1, r2
 80010ae:	18d3      	adds	r3, r2, r3
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	761a      	strb	r2, [r3, #24]
  pRxMsg->Data[5] = (CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA5_Pos;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	6819      	ldr	r1, [r3, #0]
 80010bc:	230b      	movs	r3, #11
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	781a      	ldrb	r2, [r3, #0]
 80010c2:	23de      	movs	r3, #222	; 0xde
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	0112      	lsls	r2, r2, #4
 80010c8:	188a      	adds	r2, r1, r2
 80010ca:	18d3      	adds	r3, r2, r3
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	0a1b      	lsrs	r3, r3, #8
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	765a      	strb	r2, [r3, #25]
  pRxMsg->Data[6] = (CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA6_Pos;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6819      	ldr	r1, [r3, #0]
 80010da:	230b      	movs	r3, #11
 80010dc:	18fb      	adds	r3, r7, r3
 80010de:	781a      	ldrb	r2, [r3, #0]
 80010e0:	23de      	movs	r3, #222	; 0xde
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	188a      	adds	r2, r1, r2
 80010e8:	18d3      	adds	r3, r2, r3
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	0c1b      	lsrs	r3, r3, #16
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	769a      	strb	r2, [r3, #26]
  pRxMsg->Data[7] = (CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR) >> CAN_RDH0R_DATA7_Pos;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	6819      	ldr	r1, [r3, #0]
 80010f8:	230b      	movs	r3, #11
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	23de      	movs	r3, #222	; 0xde
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	0112      	lsls	r2, r2, #4
 8001104:	188a      	adds	r2, r1, r2
 8001106:	18d3      	adds	r3, r2, r3
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	0e1b      	lsrs	r3, r3, #24
 800110c:	b2da      	uxtb	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	76da      	strb	r2, [r3, #27]
  
  /* Release the FIFO */
  if(FIFONumber == CAN_FIFO0)
 8001112:	230b      	movs	r3, #11
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d108      	bne.n	800112e <HAL_CAN_Receive+0x386>
  {
    /* Release FIFO0 */
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	68d2      	ldr	r2, [r2, #12]
 8001126:	2120      	movs	r1, #32
 8001128:	430a      	orrs	r2, r1
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	e007      	b.n	800113e <HAL_CAN_Receive+0x396>
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    /* Release FIFO1 */
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	6912      	ldr	r2, [r2, #16]
 8001138:	2120      	movs	r1, #32
 800113a:	430a      	orrs	r2, r1
 800113c:	611a      	str	r2, [r3, #16]
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
 800113e:	230b      	movs	r3, #11
 8001140:	18fb      	adds	r3, r7, r3
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d11e      	bne.n	8001186 <HAL_CAN_Receive+0x3de>
  {
    switch(hcan->State)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	223d      	movs	r2, #61	; 0x3d
 800114c:	5c9b      	ldrb	r3, [r3, r2]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b62      	cmp	r3, #98	; 0x62
 8001152:	d008      	beq.n	8001166 <HAL_CAN_Receive+0x3be>
 8001154:	2b72      	cmp	r3, #114	; 0x72
 8001156:	d00b      	beq.n	8001170 <HAL_CAN_Receive+0x3c8>
 8001158:	2b42      	cmp	r3, #66	; 0x42
 800115a:	d10e      	bne.n	800117a <HAL_CAN_Receive+0x3d2>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	223d      	movs	r2, #61	; 0x3d
 8001160:	2112      	movs	r1, #18
 8001162:	5499      	strb	r1, [r3, r2]
        break;
 8001164:	e02d      	b.n	80011c2 <HAL_CAN_Receive+0x41a>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	223d      	movs	r2, #61	; 0x3d
 800116a:	2132      	movs	r1, #50	; 0x32
 800116c:	5499      	strb	r1, [r3, r2]
        break;
 800116e:	e028      	b.n	80011c2 <HAL_CAN_Receive+0x41a>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	223d      	movs	r2, #61	; 0x3d
 8001174:	2152      	movs	r1, #82	; 0x52
 8001176:	5499      	strb	r1, [r3, r2]
        break;
 8001178:	e023      	b.n	80011c2 <HAL_CAN_Receive+0x41a>
      default: /* HAL_CAN_STATE_BUSY_RX0 */
        hcan->State = HAL_CAN_STATE_READY;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	223d      	movs	r2, #61	; 0x3d
 800117e:	2101      	movs	r1, #1
 8001180:	5499      	strb	r1, [r3, r2]
        break;
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	e01d      	b.n	80011c2 <HAL_CAN_Receive+0x41a>
    }
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    switch(hcan->State)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	223d      	movs	r2, #61	; 0x3d
 800118a:	5c9b      	ldrb	r3, [r3, r2]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b62      	cmp	r3, #98	; 0x62
 8001190:	d008      	beq.n	80011a4 <HAL_CAN_Receive+0x3fc>
 8001192:	2b72      	cmp	r3, #114	; 0x72
 8001194:	d00b      	beq.n	80011ae <HAL_CAN_Receive+0x406>
 8001196:	2b52      	cmp	r3, #82	; 0x52
 8001198:	d10e      	bne.n	80011b8 <HAL_CAN_Receive+0x410>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	223d      	movs	r2, #61	; 0x3d
 800119e:	2112      	movs	r1, #18
 80011a0:	5499      	strb	r1, [r3, r2]
        break;
 80011a2:	e00e      	b.n	80011c2 <HAL_CAN_Receive+0x41a>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	223d      	movs	r2, #61	; 0x3d
 80011a8:	2122      	movs	r1, #34	; 0x22
 80011aa:	5499      	strb	r1, [r3, r2]
        break;
 80011ac:	e009      	b.n	80011c2 <HAL_CAN_Receive+0x41a>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	223d      	movs	r2, #61	; 0x3d
 80011b2:	2142      	movs	r1, #66	; 0x42
 80011b4:	5499      	strb	r1, [r3, r2]
        break;
 80011b6:	e004      	b.n	80011c2 <HAL_CAN_Receive+0x41a>
      default: /* HAL_CAN_STATE_BUSY_RX1 */
        hcan->State = HAL_CAN_STATE_READY;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	223d      	movs	r2, #61	; 0x3d
 80011bc:	2101      	movs	r1, #1
 80011be:	5499      	strb	r1, [r3, r2]
        break;
 80011c0:	46c0      	nop			; (mov r8, r8)
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hcan);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	223c      	movs	r2, #60	; 0x3c
 80011c6:	2100      	movs	r1, #0
 80011c8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	0018      	movs	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	b006      	add	sp, #24
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_CAN_GetState>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(CAN_HandleTypeDef* hcan)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Return CAN state */
  return hcan->State;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	223d      	movs	r2, #61	; 0x3d
 80011e0:	5c9b      	ldrb	r3, [r3, r2]
 80011e2:	b2db      	uxtb	r3, r3
}
 80011e4:	0018      	movs	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b002      	add	sp, #8
 80011ea:	bd80      	pop	{r7, pc}

080011ec <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	0002      	movs	r2, r0
 80011f4:	1dfb      	adds	r3, r7, #7
 80011f6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <NVIC_EnableIRQ+0x28>)
 80011fa:	1dfa      	adds	r2, r7, #7
 80011fc:	7812      	ldrb	r2, [r2, #0]
 80011fe:	0011      	movs	r1, r2
 8001200:	221f      	movs	r2, #31
 8001202:	400a      	ands	r2, r1
 8001204:	2101      	movs	r1, #1
 8001206:	4091      	lsls	r1, r2
 8001208:	000a      	movs	r2, r1
 800120a:	601a      	str	r2, [r3, #0]
}
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	b002      	add	sp, #8
 8001212:	bd80      	pop	{r7, pc}
 8001214:	e000e100 	.word	0xe000e100

08001218 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b5b0      	push	{r4, r5, r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	0002      	movs	r2, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8001226:	1dfb      	adds	r3, r7, #7
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b7f      	cmp	r3, #127	; 0x7f
 800122c:	d932      	bls.n	8001294 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800122e:	4c2f      	ldr	r4, [pc, #188]	; (80012ec <NVIC_SetPriority+0xd4>)
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	001a      	movs	r2, r3
 8001236:	230f      	movs	r3, #15
 8001238:	4013      	ands	r3, r2
 800123a:	3b08      	subs	r3, #8
 800123c:	0899      	lsrs	r1, r3, #2
 800123e:	4a2b      	ldr	r2, [pc, #172]	; (80012ec <NVIC_SetPriority+0xd4>)
 8001240:	1dfb      	adds	r3, r7, #7
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	0018      	movs	r0, r3
 8001246:	230f      	movs	r3, #15
 8001248:	4003      	ands	r3, r0
 800124a:	3b08      	subs	r3, #8
 800124c:	089b      	lsrs	r3, r3, #2
 800124e:	3306      	adds	r3, #6
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	18d3      	adds	r3, r2, r3
 8001254:	3304      	adds	r3, #4
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	1dfa      	adds	r2, r7, #7
 800125a:	7812      	ldrb	r2, [r2, #0]
 800125c:	0010      	movs	r0, r2
 800125e:	2203      	movs	r2, #3
 8001260:	4002      	ands	r2, r0
 8001262:	00d2      	lsls	r2, r2, #3
 8001264:	20ff      	movs	r0, #255	; 0xff
 8001266:	4090      	lsls	r0, r2
 8001268:	0002      	movs	r2, r0
 800126a:	43d2      	mvns	r2, r2
 800126c:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	019b      	lsls	r3, r3, #6
 8001272:	20ff      	movs	r0, #255	; 0xff
 8001274:	4018      	ands	r0, r3
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	001d      	movs	r5, r3
 800127c:	2303      	movs	r3, #3
 800127e:	402b      	ands	r3, r5
 8001280:	00db      	lsls	r3, r3, #3
 8001282:	4098      	lsls	r0, r3
 8001284:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001286:	431a      	orrs	r2, r3
 8001288:	1d8b      	adds	r3, r1, #6
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	18e3      	adds	r3, r4, r3
 800128e:	3304      	adds	r3, #4
 8001290:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001292:	e027      	b.n	80012e4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001294:	4c16      	ldr	r4, [pc, #88]	; (80012f0 <NVIC_SetPriority+0xd8>)
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	b25b      	sxtb	r3, r3
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	4914      	ldr	r1, [pc, #80]	; (80012f0 <NVIC_SetPriority+0xd8>)
 80012a0:	1dfa      	adds	r2, r7, #7
 80012a2:	7812      	ldrb	r2, [r2, #0]
 80012a4:	b252      	sxtb	r2, r2
 80012a6:	0892      	lsrs	r2, r2, #2
 80012a8:	32c0      	adds	r2, #192	; 0xc0
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	5852      	ldr	r2, [r2, r1]
 80012ae:	1df9      	adds	r1, r7, #7
 80012b0:	7809      	ldrb	r1, [r1, #0]
 80012b2:	0008      	movs	r0, r1
 80012b4:	2103      	movs	r1, #3
 80012b6:	4001      	ands	r1, r0
 80012b8:	00c9      	lsls	r1, r1, #3
 80012ba:	20ff      	movs	r0, #255	; 0xff
 80012bc:	4088      	lsls	r0, r1
 80012be:	0001      	movs	r1, r0
 80012c0:	43c9      	mvns	r1, r1
 80012c2:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	0192      	lsls	r2, r2, #6
 80012c8:	20ff      	movs	r0, #255	; 0xff
 80012ca:	4010      	ands	r0, r2
 80012cc:	1dfa      	adds	r2, r7, #7
 80012ce:	7812      	ldrb	r2, [r2, #0]
 80012d0:	0015      	movs	r5, r2
 80012d2:	2203      	movs	r2, #3
 80012d4:	402a      	ands	r2, r5
 80012d6:	00d2      	lsls	r2, r2, #3
 80012d8:	4090      	lsls	r0, r2
 80012da:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012dc:	430a      	orrs	r2, r1
 80012de:	33c0      	adds	r3, #192	; 0xc0
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	511a      	str	r2, [r3, r4]
}
 80012e4:	46c0      	nop			; (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b002      	add	sp, #8
 80012ea:	bdb0      	pop	{r4, r5, r7, pc}
 80012ec:	e000ed00 	.word	0xe000ed00
 80012f0:	e000e100 	.word	0xe000e100

080012f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <SysTick_Config+0x40>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d901      	bls.n	800130a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001306:	2301      	movs	r3, #1
 8001308:	e010      	b.n	800132c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <SysTick_Config+0x44>)
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	3a01      	subs	r2, #1
 8001310:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001312:	2301      	movs	r3, #1
 8001314:	425b      	negs	r3, r3
 8001316:	2103      	movs	r1, #3
 8001318:	0018      	movs	r0, r3
 800131a:	f7ff ff7d 	bl	8001218 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SysTick_Config+0x44>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <SysTick_Config+0x44>)
 8001326:	2207      	movs	r2, #7
 8001328:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800132a:	2300      	movs	r3, #0
}
 800132c:	0018      	movs	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	b002      	add	sp, #8
 8001332:	bd80      	pop	{r7, pc}
 8001334:	00ffffff 	.word	0x00ffffff
 8001338:	e000e010 	.word	0xe000e010

0800133c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	230f      	movs	r3, #15
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	1c02      	adds	r2, r0, #0
 800134c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	230f      	movs	r3, #15
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	b25b      	sxtb	r3, r3
 8001358:	0011      	movs	r1, r2
 800135a:	0018      	movs	r0, r3
 800135c:	f7ff ff5c 	bl	8001218 <NVIC_SetPriority>
}
 8001360:	46c0      	nop			; (mov r8, r8)
 8001362:	46bd      	mov	sp, r7
 8001364:	b004      	add	sp, #16
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	0002      	movs	r2, r0
 8001370:	1dfb      	adds	r3, r7, #7
 8001372:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001374:	1dfb      	adds	r3, r7, #7
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b25b      	sxtb	r3, r3
 800137a:	0018      	movs	r0, r3
 800137c:	f7ff ff36 	bl	80011ec <NVIC_EnableIRQ>
}
 8001380:	46c0      	nop			; (mov r8, r8)
 8001382:	46bd      	mov	sp, r7
 8001384:	b002      	add	sp, #8
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	0018      	movs	r0, r3
 8001394:	f7ff ffae 	bl	80012f4 <SysTick_Config>
 8001398:	0003      	movs	r3, r0
}
 800139a:	0018      	movs	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	b002      	add	sp, #8
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	d106      	bne.n	80013c0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80013b4:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	2104      	movs	r1, #4
 80013ba:	430a      	orrs	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80013be:	e005      	b.n	80013cc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80013c4:	6812      	ldr	r2, [r2, #0]
 80013c6:	2104      	movs	r1, #4
 80013c8:	438a      	bics	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
}
 80013cc:	46c0      	nop			; (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b002      	add	sp, #8
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	e000e010 	.word	0xe000e010

080013d8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80013dc:	f000 f803 	bl	80013e6 <HAL_SYSTICK_Callback>
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e042      	b.n	800148c <HAL_DMA_Init+0x9c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2221      	movs	r2, #33	; 0x21
 800140a:	2102      	movs	r1, #2
 800140c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4a1e      	ldr	r2, [pc, #120]	; (8001494 <HAL_DMA_Init+0xa4>)
 800141a:	4013      	ands	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001426:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001432:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	0018      	movs	r0, r3
 8001458:	f000 f8c0 	bl	80015dc <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2200      	movs	r2, #0
 8001460:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2221      	movs	r2, #33	; 0x21
 800147e:	2101      	movs	r1, #1
 8001480:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2220      	movs	r2, #32
 8001486:	2100      	movs	r1, #0
 8001488:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}  
 800148c:	0018      	movs	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	b004      	add	sp, #16
 8001492:	bd80      	pop	{r7, pc}
 8001494:	ffffc00f 	.word	0xffffc00f

08001498 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	2204      	movs	r2, #4
 80014b6:	409a      	lsls	r2, r3
 80014b8:	0013      	movs	r3, r2
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	4013      	ands	r3, r2
 80014be:	d024      	beq.n	800150a <HAL_DMA_IRQHandler+0x72>
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	2204      	movs	r2, #4
 80014c4:	4013      	ands	r3, r2
 80014c6:	d020      	beq.n	800150a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2220      	movs	r2, #32
 80014d0:	4013      	ands	r3, r2
 80014d2:	d107      	bne.n	80014e4 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	6812      	ldr	r2, [r2, #0]
 80014de:	2104      	movs	r1, #4
 80014e0:	438a      	bics	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014ec:	2104      	movs	r1, #4
 80014ee:	4091      	lsls	r1, r2
 80014f0:	000a      	movs	r2, r1
 80014f2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d100      	bne.n	80014fe <HAL_DMA_IRQHandler+0x66>
 80014fc:	e06a      	b.n	80015d4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	0010      	movs	r0, r2
 8001506:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001508:	e064      	b.n	80015d4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	2202      	movs	r2, #2
 8001510:	409a      	lsls	r2, r3
 8001512:	0013      	movs	r3, r2
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4013      	ands	r3, r2
 8001518:	d02b      	beq.n	8001572 <HAL_DMA_IRQHandler+0xda>
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	2202      	movs	r2, #2
 800151e:	4013      	ands	r3, r2
 8001520:	d027      	beq.n	8001572 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2220      	movs	r2, #32
 800152a:	4013      	ands	r3, r2
 800152c:	d10b      	bne.n	8001546 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	6812      	ldr	r2, [r2, #0]
 8001538:	210a      	movs	r1, #10
 800153a:	438a      	bics	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2221      	movs	r2, #33	; 0x21
 8001542:	2101      	movs	r1, #1
 8001544:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800154e:	2102      	movs	r1, #2
 8001550:	4091      	lsls	r1, r2
 8001552:	000a      	movs	r2, r1
 8001554:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2220      	movs	r2, #32
 800155a:	2100      	movs	r1, #0
 800155c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	2b00      	cmp	r3, #0
 8001564:	d036      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	0010      	movs	r0, r2
 800156e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001570:	e030      	b.n	80015d4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	2208      	movs	r2, #8
 8001578:	409a      	lsls	r2, r3
 800157a:	0013      	movs	r3, r2
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4013      	ands	r3, r2
 8001580:	d028      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x13c>
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	2208      	movs	r2, #8
 8001586:	4013      	ands	r3, r2
 8001588:	d024      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	6812      	ldr	r2, [r2, #0]
 8001594:	210e      	movs	r1, #14
 8001596:	438a      	bics	r2, r1
 8001598:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015a2:	2101      	movs	r1, #1
 80015a4:	4091      	lsls	r1, r2
 80015a6:	000a      	movs	r2, r1
 80015a8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2221      	movs	r2, #33	; 0x21
 80015b4:	2101      	movs	r1, #1
 80015b6:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2220      	movs	r2, #32
 80015bc:	2100      	movs	r1, #0
 80015be:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	0010      	movs	r0, r2
 80015d0:	4798      	blx	r3
    }
   }
}  
 80015d2:	e7ff      	b.n	80015d4 <HAL_DMA_IRQHandler+0x13c>
 80015d4:	46c0      	nop			; (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b004      	add	sp, #16
 80015da:	bd80      	pop	{r7, pc}

080015dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	001a      	movs	r2, r3
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <DMA_CalcBaseAndBitshift+0x60>)
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d810      	bhi.n	8001612 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a12      	ldr	r2, [pc, #72]	; (8001640 <DMA_CalcBaseAndBitshift+0x64>)
 80015f6:	4694      	mov	ip, r2
 80015f8:	4463      	add	r3, ip
 80015fa:	2114      	movs	r1, #20
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7fe fd81 	bl	8000104 <__udivsi3>
 8001602:	0003      	movs	r3, r0
 8001604:	009a      	lsls	r2, r3, #2
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a0d      	ldr	r2, [pc, #52]	; (8001644 <DMA_CalcBaseAndBitshift+0x68>)
 800160e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001610:	e00f      	b.n	8001632 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a0c      	ldr	r2, [pc, #48]	; (8001648 <DMA_CalcBaseAndBitshift+0x6c>)
 8001618:	4694      	mov	ip, r2
 800161a:	4463      	add	r3, ip
 800161c:	2114      	movs	r1, #20
 800161e:	0018      	movs	r0, r3
 8001620:	f7fe fd70 	bl	8000104 <__udivsi3>
 8001624:	0003      	movs	r3, r0
 8001626:	009a      	lsls	r2, r3, #2
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a07      	ldr	r2, [pc, #28]	; (800164c <DMA_CalcBaseAndBitshift+0x70>)
 8001630:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	46bd      	mov	sp, r7
 8001636:	b002      	add	sp, #8
 8001638:	bd80      	pop	{r7, pc}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	40020407 	.word	0x40020407
 8001640:	bffdfff8 	.word	0xbffdfff8
 8001644:	40020000 	.word	0x40020000
 8001648:	bffdfbf8 	.word	0xbffdfbf8
 800164c:	40020400 	.word	0x40020400

08001650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001666:	e155      	b.n	8001914 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2101      	movs	r1, #1
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	4091      	lsls	r1, r2
 8001672:	000a      	movs	r2, r1
 8001674:	4013      	ands	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d100      	bne.n	8001680 <HAL_GPIO_Init+0x30>
 800167e:	e146      	b.n	800190e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x40>
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2b12      	cmp	r3, #18
 800168e:	d123      	bne.n	80016d8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	08da      	lsrs	r2, r3, #3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	3208      	adds	r2, #8
 8001698:	0092      	lsls	r2, r2, #2
 800169a:	58d3      	ldr	r3, [r2, r3]
 800169c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2207      	movs	r2, #7
 80016a2:	4013      	ands	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	220f      	movs	r2, #15
 80016a8:	409a      	lsls	r2, r3
 80016aa:	0013      	movs	r3, r2
 80016ac:	43da      	mvns	r2, r3
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	691a      	ldr	r2, [r3, #16]
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	2107      	movs	r1, #7
 80016bc:	400b      	ands	r3, r1
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	409a      	lsls	r2, r3
 80016c2:	0013      	movs	r3, r2
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	08da      	lsrs	r2, r3, #3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3208      	adds	r2, #8
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	6939      	ldr	r1, [r7, #16]
 80016d6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	409a      	lsls	r2, r3
 80016e6:	0013      	movs	r3, r2
 80016e8:	43da      	mvns	r2, r3
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2203      	movs	r2, #3
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	409a      	lsls	r2, r3
 80016fe:	0013      	movs	r3, r2
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d00b      	beq.n	800172c <HAL_GPIO_Init+0xdc>
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	2b02      	cmp	r3, #2
 800171a:	d007      	beq.n	800172c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001720:	2b11      	cmp	r3, #17
 8001722:	d003      	beq.n	800172c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b12      	cmp	r3, #18
 800172a:	d130      	bne.n	800178e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	2203      	movs	r2, #3
 8001738:	409a      	lsls	r2, r3
 800173a:	0013      	movs	r3, r2
 800173c:	43da      	mvns	r2, r3
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4013      	ands	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	409a      	lsls	r2, r3
 800174e:	0013      	movs	r3, r2
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001762:	2201      	movs	r2, #1
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	409a      	lsls	r2, r3
 8001768:	0013      	movs	r3, r2
 800176a:	43da      	mvns	r2, r3
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	091b      	lsrs	r3, r3, #4
 8001778:	2201      	movs	r2, #1
 800177a:	401a      	ands	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	409a      	lsls	r2, r3
 8001780:	0013      	movs	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	2203      	movs	r2, #3
 800179a:	409a      	lsls	r2, r3
 800179c:	0013      	movs	r3, r2
 800179e:	43da      	mvns	r2, r3
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	409a      	lsls	r2, r3
 80017b0:	0013      	movs	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685a      	ldr	r2, [r3, #4]
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	055b      	lsls	r3, r3, #21
 80017c6:	4013      	ands	r3, r2
 80017c8:	d100      	bne.n	80017cc <HAL_GPIO_Init+0x17c>
 80017ca:	e0a0      	b.n	800190e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017cc:	4b57      	ldr	r3, [pc, #348]	; (800192c <HAL_GPIO_Init+0x2dc>)
 80017ce:	4a57      	ldr	r2, [pc, #348]	; (800192c <HAL_GPIO_Init+0x2dc>)
 80017d0:	6992      	ldr	r2, [r2, #24]
 80017d2:	2101      	movs	r1, #1
 80017d4:	430a      	orrs	r2, r1
 80017d6:	619a      	str	r2, [r3, #24]
 80017d8:	4b54      	ldr	r3, [pc, #336]	; (800192c <HAL_GPIO_Init+0x2dc>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2201      	movs	r2, #1
 80017de:	4013      	ands	r3, r2
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80017e4:	4a52      	ldr	r2, [pc, #328]	; (8001930 <HAL_GPIO_Init+0x2e0>)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	3302      	adds	r3, #2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	589b      	ldr	r3, [r3, r2]
 80017f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2203      	movs	r2, #3
 80017f6:	4013      	ands	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	220f      	movs	r2, #15
 80017fc:	409a      	lsls	r2, r3
 80017fe:	0013      	movs	r3, r2
 8001800:	43da      	mvns	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	2390      	movs	r3, #144	; 0x90
 800180c:	05db      	lsls	r3, r3, #23
 800180e:	429a      	cmp	r2, r3
 8001810:	d019      	beq.n	8001846 <HAL_GPIO_Init+0x1f6>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a47      	ldr	r2, [pc, #284]	; (8001934 <HAL_GPIO_Init+0x2e4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d013      	beq.n	8001842 <HAL_GPIO_Init+0x1f2>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a46      	ldr	r2, [pc, #280]	; (8001938 <HAL_GPIO_Init+0x2e8>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00d      	beq.n	800183e <HAL_GPIO_Init+0x1ee>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a45      	ldr	r2, [pc, #276]	; (800193c <HAL_GPIO_Init+0x2ec>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d007      	beq.n	800183a <HAL_GPIO_Init+0x1ea>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a44      	ldr	r2, [pc, #272]	; (8001940 <HAL_GPIO_Init+0x2f0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d101      	bne.n	8001836 <HAL_GPIO_Init+0x1e6>
 8001832:	2304      	movs	r3, #4
 8001834:	e008      	b.n	8001848 <HAL_GPIO_Init+0x1f8>
 8001836:	2305      	movs	r3, #5
 8001838:	e006      	b.n	8001848 <HAL_GPIO_Init+0x1f8>
 800183a:	2303      	movs	r3, #3
 800183c:	e004      	b.n	8001848 <HAL_GPIO_Init+0x1f8>
 800183e:	2302      	movs	r3, #2
 8001840:	e002      	b.n	8001848 <HAL_GPIO_Init+0x1f8>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_GPIO_Init+0x1f8>
 8001846:	2300      	movs	r3, #0
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	2103      	movs	r1, #3
 800184c:	400a      	ands	r2, r1
 800184e:	0092      	lsls	r2, r2, #2
 8001850:	4093      	lsls	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001858:	4935      	ldr	r1, [pc, #212]	; (8001930 <HAL_GPIO_Init+0x2e0>)
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3302      	adds	r3, #2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001866:	4b37      	ldr	r3, [pc, #220]	; (8001944 <HAL_GPIO_Init+0x2f4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43da      	mvns	r2, r3
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	025b      	lsls	r3, r3, #9
 800187e:	4013      	ands	r3, r2
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800188a:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <HAL_GPIO_Init+0x2f4>)
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001890:	4b2c      	ldr	r3, [pc, #176]	; (8001944 <HAL_GPIO_Init+0x2f4>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	43da      	mvns	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4013      	ands	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	029b      	lsls	r3, r3, #10
 80018a8:	4013      	ands	r3, r2
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018b4:	4b23      	ldr	r3, [pc, #140]	; (8001944 <HAL_GPIO_Init+0x2f4>)
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018ba:	4b22      	ldr	r3, [pc, #136]	; (8001944 <HAL_GPIO_Init+0x2f4>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	43da      	mvns	r2, r3
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	035b      	lsls	r3, r3, #13
 80018d2:	4013      	ands	r3, r2
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018de:	4b19      	ldr	r3, [pc, #100]	; (8001944 <HAL_GPIO_Init+0x2f4>)
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80018e4:	4b17      	ldr	r3, [pc, #92]	; (8001944 <HAL_GPIO_Init+0x2f4>)
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	43da      	mvns	r2, r3
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685a      	ldr	r2, [r3, #4]
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	039b      	lsls	r3, r3, #14
 80018fc:	4013      	ands	r3, r2
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001908:	4b0e      	ldr	r3, [pc, #56]	; (8001944 <HAL_GPIO_Init+0x2f4>)
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	3301      	adds	r3, #1
 8001912:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	40da      	lsrs	r2, r3
 800191c:	1e13      	subs	r3, r2, #0
 800191e:	d000      	beq.n	8001922 <HAL_GPIO_Init+0x2d2>
 8001920:	e6a2      	b.n	8001668 <HAL_GPIO_Init+0x18>
  } 
}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	46bd      	mov	sp, r7
 8001926:	b006      	add	sp, #24
 8001928:	bd80      	pop	{r7, pc}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	40021000 	.word	0x40021000
 8001930:	40010000 	.word	0x40010000
 8001934:	48000400 	.word	0x48000400
 8001938:	48000800 	.word	0x48000800
 800193c:	48000c00 	.word	0x48000c00
 8001940:	48001000 	.word	0x48001000
 8001944:	40010400 	.word	0x40010400

08001948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	0008      	movs	r0, r1
 8001952:	0011      	movs	r1, r2
 8001954:	1cbb      	adds	r3, r7, #2
 8001956:	1c02      	adds	r2, r0, #0
 8001958:	801a      	strh	r2, [r3, #0]
 800195a:	1c7b      	adds	r3, r7, #1
 800195c:	1c0a      	adds	r2, r1, #0
 800195e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001960:	1c7b      	adds	r3, r7, #1
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d004      	beq.n	8001972 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001968:	1cbb      	adds	r3, r7, #2
 800196a:	881a      	ldrh	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001970:	e003      	b.n	800197a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001972:	1cbb      	adds	r3, r7, #2
 8001974:	881a      	ldrh	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	629a      	str	r2, [r3, #40]	; 0x28
}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b002      	add	sp, #8
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
 800198a:	000a      	movs	r2, r1
 800198c:	1cbb      	adds	r3, r7, #2
 800198e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	695a      	ldr	r2, [r3, #20]
 8001994:	1cbb      	adds	r3, r7, #2
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	405a      	eors	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	615a      	str	r2, [r3, #20]
}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b002      	add	sp, #8
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2201      	movs	r2, #1
 80019ba:	4013      	ands	r3, r2
 80019bc:	d100      	bne.n	80019c0 <HAL_RCC_OscConfig+0x18>
 80019be:	e08d      	b.n	8001adc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019c0:	4bc5      	ldr	r3, [pc, #788]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	220c      	movs	r2, #12
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d00e      	beq.n	80019ea <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019cc:	4bc2      	ldr	r3, [pc, #776]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	220c      	movs	r2, #12
 80019d2:	4013      	ands	r3, r2
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d116      	bne.n	8001a06 <HAL_RCC_OscConfig+0x5e>
 80019d8:	4bbf      	ldr	r3, [pc, #764]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 80019da:	685a      	ldr	r2, [r3, #4]
 80019dc:	23c0      	movs	r3, #192	; 0xc0
 80019de:	025b      	lsls	r3, r3, #9
 80019e0:	401a      	ands	r2, r3
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	025b      	lsls	r3, r3, #9
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d10d      	bne.n	8001a06 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ea:	4bbb      	ldr	r3, [pc, #748]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	029b      	lsls	r3, r3, #10
 80019f2:	4013      	ands	r3, r2
 80019f4:	d100      	bne.n	80019f8 <HAL_RCC_OscConfig+0x50>
 80019f6:	e070      	b.n	8001ada <HAL_RCC_OscConfig+0x132>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d000      	beq.n	8001a02 <HAL_RCC_OscConfig+0x5a>
 8001a00:	e06b      	b.n	8001ada <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e327      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d107      	bne.n	8001a1e <HAL_RCC_OscConfig+0x76>
 8001a0e:	4bb2      	ldr	r3, [pc, #712]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001a10:	4ab1      	ldr	r2, [pc, #708]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001a12:	6812      	ldr	r2, [r2, #0]
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	0249      	lsls	r1, r1, #9
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	e02f      	b.n	8001a7e <HAL_RCC_OscConfig+0xd6>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x98>
 8001a26:	4bac      	ldr	r3, [pc, #688]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001a28:	4aab      	ldr	r2, [pc, #684]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	49ab      	ldr	r1, [pc, #684]	; (8001cdc <HAL_RCC_OscConfig+0x334>)
 8001a2e:	400a      	ands	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	4ba9      	ldr	r3, [pc, #676]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001a34:	4aa8      	ldr	r2, [pc, #672]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	49a9      	ldr	r1, [pc, #676]	; (8001ce0 <HAL_RCC_OscConfig+0x338>)
 8001a3a:	400a      	ands	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e01e      	b.n	8001a7e <HAL_RCC_OscConfig+0xd6>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b05      	cmp	r3, #5
 8001a46:	d10e      	bne.n	8001a66 <HAL_RCC_OscConfig+0xbe>
 8001a48:	4ba3      	ldr	r3, [pc, #652]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001a4a:	4aa3      	ldr	r2, [pc, #652]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001a4c:	6812      	ldr	r2, [r2, #0]
 8001a4e:	2180      	movs	r1, #128	; 0x80
 8001a50:	02c9      	lsls	r1, r1, #11
 8001a52:	430a      	orrs	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	4ba0      	ldr	r3, [pc, #640]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001a58:	4a9f      	ldr	r2, [pc, #636]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	2180      	movs	r1, #128	; 0x80
 8001a5e:	0249      	lsls	r1, r1, #9
 8001a60:	430a      	orrs	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	e00b      	b.n	8001a7e <HAL_RCC_OscConfig+0xd6>
 8001a66:	4b9c      	ldr	r3, [pc, #624]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001a68:	4a9b      	ldr	r2, [pc, #620]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	499b      	ldr	r1, [pc, #620]	; (8001cdc <HAL_RCC_OscConfig+0x334>)
 8001a6e:	400a      	ands	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	4b99      	ldr	r3, [pc, #612]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001a74:	4a98      	ldr	r2, [pc, #608]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	4999      	ldr	r1, [pc, #612]	; (8001ce0 <HAL_RCC_OscConfig+0x338>)
 8001a7a:	400a      	ands	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d014      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7fe fd93 	bl	80005b0 <HAL_GetTick>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a90:	f7fe fd8e 	bl	80005b0 <HAL_GetTick>
 8001a94:	0002      	movs	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	; 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e2d9      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	4b8d      	ldr	r3, [pc, #564]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	029b      	lsls	r3, r3, #10
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0xe8>
 8001aae:	e015      	b.n	8001adc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7fe fd7e 	bl	80005b0 <HAL_GetTick>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aba:	f7fe fd79 	bl	80005b0 <HAL_GetTick>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b64      	cmp	r3, #100	; 0x64
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e2c4      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001acc:	4b82      	ldr	r3, [pc, #520]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	029b      	lsls	r3, r3, #10
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d1f0      	bne.n	8001aba <HAL_RCC_OscConfig+0x112>
 8001ad8:	e000      	b.n	8001adc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ada:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d100      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x140>
 8001ae6:	e06c      	b.n	8001bc2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ae8:	4b7b      	ldr	r3, [pc, #492]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	220c      	movs	r2, #12
 8001aee:	4013      	ands	r3, r2
 8001af0:	d00e      	beq.n	8001b10 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001af2:	4b79      	ldr	r3, [pc, #484]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	220c      	movs	r2, #12
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d11f      	bne.n	8001b3e <HAL_RCC_OscConfig+0x196>
 8001afe:	4b76      	ldr	r3, [pc, #472]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	23c0      	movs	r3, #192	; 0xc0
 8001b04:	025b      	lsls	r3, r3, #9
 8001b06:	401a      	ands	r2, r3
 8001b08:	2380      	movs	r3, #128	; 0x80
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d116      	bne.n	8001b3e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b10:	4b71      	ldr	r3, [pc, #452]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2202      	movs	r2, #2
 8001b16:	4013      	ands	r3, r2
 8001b18:	d005      	beq.n	8001b26 <HAL_RCC_OscConfig+0x17e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d001      	beq.n	8001b26 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e297      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b26:	4a6c      	ldr	r2, [pc, #432]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001b28:	4b6b      	ldr	r3, [pc, #428]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	21f8      	movs	r1, #248	; 0xf8
 8001b2e:	438b      	bics	r3, r1
 8001b30:	0019      	movs	r1, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3c:	e041      	b.n	8001bc2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d024      	beq.n	8001b90 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b46:	4b64      	ldr	r3, [pc, #400]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001b48:	4a63      	ldr	r2, [pc, #396]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b52:	f7fe fd2d 	bl	80005b0 <HAL_GetTick>
 8001b56:	0003      	movs	r3, r0
 8001b58:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b5c:	f7fe fd28 	bl	80005b0 <HAL_GetTick>
 8001b60:	0002      	movs	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e273      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6e:	4b5a      	ldr	r3, [pc, #360]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2202      	movs	r2, #2
 8001b74:	4013      	ands	r3, r2
 8001b76:	d0f1      	beq.n	8001b5c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b78:	4a57      	ldr	r2, [pc, #348]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001b7a:	4b57      	ldr	r3, [pc, #348]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	21f8      	movs	r1, #248	; 0xf8
 8001b80:	438b      	bics	r3, r1
 8001b82:	0019      	movs	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	430b      	orrs	r3, r1
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e018      	b.n	8001bc2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b90:	4b51      	ldr	r3, [pc, #324]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001b92:	4a51      	ldr	r2, [pc, #324]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	2101      	movs	r1, #1
 8001b98:	438a      	bics	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7fe fd08 	bl	80005b0 <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ba6:	f7fe fd03 	bl	80005b0 <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e24e      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb8:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d1f1      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2208      	movs	r2, #8
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d036      	beq.n	8001c3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d019      	beq.n	8001c08 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd4:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001bd6:	4a40      	ldr	r2, [pc, #256]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001bd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bda:	2101      	movs	r1, #1
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be0:	f7fe fce6 	bl	80005b0 <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bea:	f7fe fce1 	bl	80005b0 <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e22c      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfc:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	2202      	movs	r2, #2
 8001c02:	4013      	ands	r3, r2
 8001c04:	d0f1      	beq.n	8001bea <HAL_RCC_OscConfig+0x242>
 8001c06:	e018      	b.n	8001c3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c08:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001c0a:	4a33      	ldr	r2, [pc, #204]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001c0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c0e:	2101      	movs	r1, #1
 8001c10:	438a      	bics	r2, r1
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c14:	f7fe fccc 	bl	80005b0 <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c1e:	f7fe fcc7 	bl	80005b0 <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e212      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c30:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	2202      	movs	r2, #2
 8001c36:	4013      	ands	r3, r2
 8001c38:	d1f1      	bne.n	8001c1e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2204      	movs	r2, #4
 8001c40:	4013      	ands	r3, r2
 8001c42:	d100      	bne.n	8001c46 <HAL_RCC_OscConfig+0x29e>
 8001c44:	e0b6      	b.n	8001db4 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c46:	2317      	movs	r3, #23
 8001c48:	18fb      	adds	r3, r7, r3
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c4e:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001c50:	69da      	ldr	r2, [r3, #28]
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	055b      	lsls	r3, r3, #21
 8001c56:	4013      	ands	r3, r2
 8001c58:	d111      	bne.n	8001c7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001c5c:	4a1e      	ldr	r2, [pc, #120]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001c5e:	69d2      	ldr	r2, [r2, #28]
 8001c60:	2180      	movs	r1, #128	; 0x80
 8001c62:	0549      	lsls	r1, r1, #21
 8001c64:	430a      	orrs	r2, r1
 8001c66:	61da      	str	r2, [r3, #28]
 8001c68:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001c6a:	69da      	ldr	r2, [r3, #28]
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	055b      	lsls	r3, r3, #21
 8001c70:	4013      	ands	r3, r2
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c76:	2317      	movs	r3, #23
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7e:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_RCC_OscConfig+0x33c>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	2380      	movs	r3, #128	; 0x80
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	4013      	ands	r3, r2
 8001c88:	d11a      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_RCC_OscConfig+0x33c>)
 8001c8c:	4a15      	ldr	r2, [pc, #84]	; (8001ce4 <HAL_RCC_OscConfig+0x33c>)
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	2180      	movs	r1, #128	; 0x80
 8001c92:	0049      	lsls	r1, r1, #1
 8001c94:	430a      	orrs	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c98:	f7fe fc8a 	bl	80005b0 <HAL_GetTick>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca2:	f7fe fc85 	bl	80005b0 <HAL_GetTick>
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b64      	cmp	r3, #100	; 0x64
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e1d0      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <HAL_RCC_OscConfig+0x33c>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d10f      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x340>
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001cca:	4a03      	ldr	r2, [pc, #12]	; (8001cd8 <HAL_RCC_OscConfig+0x330>)
 8001ccc:	6a12      	ldr	r2, [r2, #32]
 8001cce:	2101      	movs	r1, #1
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	621a      	str	r2, [r3, #32]
 8001cd4:	e036      	b.n	8001d44 <HAL_RCC_OscConfig+0x39c>
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	fffeffff 	.word	0xfffeffff
 8001ce0:	fffbffff 	.word	0xfffbffff
 8001ce4:	40007000 	.word	0x40007000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10c      	bne.n	8001d0a <HAL_RCC_OscConfig+0x362>
 8001cf0:	4bc9      	ldr	r3, [pc, #804]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001cf2:	4ac9      	ldr	r2, [pc, #804]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001cf4:	6a12      	ldr	r2, [r2, #32]
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	438a      	bics	r2, r1
 8001cfa:	621a      	str	r2, [r3, #32]
 8001cfc:	4bc6      	ldr	r3, [pc, #792]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001cfe:	4ac6      	ldr	r2, [pc, #792]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001d00:	6a12      	ldr	r2, [r2, #32]
 8001d02:	2104      	movs	r1, #4
 8001d04:	438a      	bics	r2, r1
 8001d06:	621a      	str	r2, [r3, #32]
 8001d08:	e01c      	b.n	8001d44 <HAL_RCC_OscConfig+0x39c>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x384>
 8001d12:	4bc1      	ldr	r3, [pc, #772]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001d14:	4ac0      	ldr	r2, [pc, #768]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001d16:	6a12      	ldr	r2, [r2, #32]
 8001d18:	2104      	movs	r1, #4
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	621a      	str	r2, [r3, #32]
 8001d1e:	4bbe      	ldr	r3, [pc, #760]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001d20:	4abd      	ldr	r2, [pc, #756]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001d22:	6a12      	ldr	r2, [r2, #32]
 8001d24:	2101      	movs	r1, #1
 8001d26:	430a      	orrs	r2, r1
 8001d28:	621a      	str	r2, [r3, #32]
 8001d2a:	e00b      	b.n	8001d44 <HAL_RCC_OscConfig+0x39c>
 8001d2c:	4bba      	ldr	r3, [pc, #744]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001d2e:	4aba      	ldr	r2, [pc, #744]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001d30:	6a12      	ldr	r2, [r2, #32]
 8001d32:	2101      	movs	r1, #1
 8001d34:	438a      	bics	r2, r1
 8001d36:	621a      	str	r2, [r3, #32]
 8001d38:	4bb7      	ldr	r3, [pc, #732]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001d3a:	4ab7      	ldr	r2, [pc, #732]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001d3c:	6a12      	ldr	r2, [r2, #32]
 8001d3e:	2104      	movs	r1, #4
 8001d40:	438a      	bics	r2, r1
 8001d42:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d014      	beq.n	8001d76 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4c:	f7fe fc30 	bl	80005b0 <HAL_GetTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d54:	e009      	b.n	8001d6a <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d56:	f7fe fc2b 	bl	80005b0 <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	4aae      	ldr	r2, [pc, #696]	; (800201c <HAL_RCC_OscConfig+0x674>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e175      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6a:	4bab      	ldr	r3, [pc, #684]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	4013      	ands	r3, r2
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x3ae>
 8001d74:	e013      	b.n	8001d9e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d76:	f7fe fc1b 	bl	80005b0 <HAL_GetTick>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7e:	e009      	b.n	8001d94 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d80:	f7fe fc16 	bl	80005b0 <HAL_GetTick>
 8001d84:	0002      	movs	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	4aa4      	ldr	r2, [pc, #656]	; (800201c <HAL_RCC_OscConfig+0x674>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e160      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d94:	4ba0      	ldr	r3, [pc, #640]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	2202      	movs	r2, #2
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d9e:	2317      	movs	r3, #23
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d105      	bne.n	8001db4 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da8:	4b9b      	ldr	r3, [pc, #620]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001daa:	4a9b      	ldr	r2, [pc, #620]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001dac:	69d2      	ldr	r2, [r2, #28]
 8001dae:	499c      	ldr	r1, [pc, #624]	; (8002020 <HAL_RCC_OscConfig+0x678>)
 8001db0:	400a      	ands	r2, r1
 8001db2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2210      	movs	r2, #16
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d063      	beq.n	8001e86 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	695b      	ldr	r3, [r3, #20]
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d12a      	bne.n	8001e1c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001dc6:	4b94      	ldr	r3, [pc, #592]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001dc8:	4a93      	ldr	r2, [pc, #588]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001dca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dcc:	2104      	movs	r1, #4
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001dd2:	4b91      	ldr	r3, [pc, #580]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001dd4:	4a90      	ldr	r2, [pc, #576]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001dd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dd8:	2101      	movs	r1, #1
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dde:	f7fe fbe7 	bl	80005b0 <HAL_GetTick>
 8001de2:	0003      	movs	r3, r0
 8001de4:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001de8:	f7fe fbe2 	bl	80005b0 <HAL_GetTick>
 8001dec:	0002      	movs	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e12d      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dfa:	4b87      	ldr	r3, [pc, #540]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfe:	2202      	movs	r2, #2
 8001e00:	4013      	ands	r3, r2
 8001e02:	d0f1      	beq.n	8001de8 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e04:	4a84      	ldr	r2, [pc, #528]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001e06:	4b84      	ldr	r3, [pc, #528]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0a:	21f8      	movs	r1, #248	; 0xf8
 8001e0c:	438b      	bics	r3, r1
 8001e0e:	0019      	movs	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	430b      	orrs	r3, r1
 8001e18:	6353      	str	r3, [r2, #52]	; 0x34
 8001e1a:	e034      	b.n	8001e86 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	3305      	adds	r3, #5
 8001e22:	d111      	bne.n	8001e48 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e24:	4b7c      	ldr	r3, [pc, #496]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001e26:	4a7c      	ldr	r2, [pc, #496]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001e28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	438a      	bics	r2, r1
 8001e2e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e30:	4a79      	ldr	r2, [pc, #484]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001e32:	4b79      	ldr	r3, [pc, #484]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e36:	21f8      	movs	r1, #248	; 0xf8
 8001e38:	438b      	bics	r3, r1
 8001e3a:	0019      	movs	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	430b      	orrs	r3, r1
 8001e44:	6353      	str	r3, [r2, #52]	; 0x34
 8001e46:	e01e      	b.n	8001e86 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e48:	4b73      	ldr	r3, [pc, #460]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001e4a:	4a73      	ldr	r2, [pc, #460]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001e4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e4e:	2104      	movs	r1, #4
 8001e50:	430a      	orrs	r2, r1
 8001e52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e54:	4b70      	ldr	r3, [pc, #448]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001e56:	4a70      	ldr	r2, [pc, #448]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001e58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	438a      	bics	r2, r1
 8001e5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e60:	f7fe fba6 	bl	80005b0 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e6a:	f7fe fba1 	bl	80005b0 <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e0ec      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e7c:	4b66      	ldr	r3, [pc, #408]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e80:	2202      	movs	r2, #2
 8001e82:	4013      	ands	r3, r2
 8001e84:	d1f1      	bne.n	8001e6a <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d05c      	beq.n	8001f4a <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001e90:	4b61      	ldr	r3, [pc, #388]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	220c      	movs	r2, #12
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b0c      	cmp	r3, #12
 8001e9a:	d00e      	beq.n	8001eba <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001e9c:	4b5e      	ldr	r3, [pc, #376]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	220c      	movs	r2, #12
 8001ea2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d114      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001ea8:	4b5b      	ldr	r3, [pc, #364]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	23c0      	movs	r3, #192	; 0xc0
 8001eae:	025b      	lsls	r3, r3, #9
 8001eb0:	401a      	ands	r2, r3
 8001eb2:	23c0      	movs	r3, #192	; 0xc0
 8001eb4:	025b      	lsls	r3, r3, #9
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d10b      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001eba:	4b57      	ldr	r3, [pc, #348]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ebe:	2380      	movs	r3, #128	; 0x80
 8001ec0:	025b      	lsls	r3, r3, #9
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d040      	beq.n	8001f48 <HAL_RCC_OscConfig+0x5a0>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d03c      	beq.n	8001f48 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0c1      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d01b      	beq.n	8001f12 <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001eda:	4b4f      	ldr	r3, [pc, #316]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001edc:	4a4e      	ldr	r2, [pc, #312]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001ede:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	0249      	lsls	r1, r1, #9
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7fe fb62 	bl	80005b0 <HAL_GetTick>
 8001eec:	0003      	movs	r3, r0
 8001eee:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ef2:	f7fe fb5d 	bl	80005b0 <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e0a8      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f04:	4b44      	ldr	r3, [pc, #272]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	025b      	lsls	r3, r3, #9
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d0f0      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x54a>
 8001f10:	e01b      	b.n	8001f4a <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001f12:	4b41      	ldr	r3, [pc, #260]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001f14:	4a40      	ldr	r2, [pc, #256]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001f16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f18:	4942      	ldr	r1, [pc, #264]	; (8002024 <HAL_RCC_OscConfig+0x67c>)
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1e:	f7fe fb47 	bl	80005b0 <HAL_GetTick>
 8001f22:	0003      	movs	r3, r0
 8001f24:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f28:	f7fe fb42 	bl	80005b0 <HAL_GetTick>
 8001f2c:	0002      	movs	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e08d      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f3a:	4b37      	ldr	r3, [pc, #220]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	025b      	lsls	r3, r3, #9
 8001f42:	4013      	ands	r3, r2
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x580>
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001f48:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d100      	bne.n	8001f54 <HAL_RCC_OscConfig+0x5ac>
 8001f52:	e07f      	b.n	8002054 <HAL_RCC_OscConfig+0x6ac>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f54:	4b30      	ldr	r3, [pc, #192]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	220c      	movs	r2, #12
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d100      	bne.n	8001f62 <HAL_RCC_OscConfig+0x5ba>
 8001f60:	e076      	b.n	8002050 <HAL_RCC_OscConfig+0x6a8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d14b      	bne.n	8002002 <HAL_RCC_OscConfig+0x65a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6a:	4b2b      	ldr	r3, [pc, #172]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001f6c:	4a2a      	ldr	r2, [pc, #168]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001f6e:	6812      	ldr	r2, [r2, #0]
 8001f70:	492d      	ldr	r1, [pc, #180]	; (8002028 <HAL_RCC_OscConfig+0x680>)
 8001f72:	400a      	ands	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f76:	f7fe fb1b 	bl	80005b0 <HAL_GetTick>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f80:	f7fe fb16 	bl	80005b0 <HAL_GetTick>
 8001f84:	0002      	movs	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e061      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f92:	4b21      	ldr	r3, [pc, #132]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	049b      	lsls	r3, r3, #18
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9e:	4a1e      	ldr	r2, [pc, #120]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	210f      	movs	r1, #15
 8001fa6:	438b      	bics	r3, r1
 8001fa8:	0019      	movs	r1, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	430b      	orrs	r3, r1
 8001fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001fb2:	4a19      	ldr	r2, [pc, #100]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001fb4:	4b18      	ldr	r3, [pc, #96]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	491c      	ldr	r1, [pc, #112]	; (800202c <HAL_RCC_OscConfig+0x684>)
 8001fba:	4019      	ands	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc4:	4303      	orrs	r3, r0
 8001fc6:	430b      	orrs	r3, r1
 8001fc8:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001fcc:	4a12      	ldr	r2, [pc, #72]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	2180      	movs	r1, #128	; 0x80
 8001fd2:	0449      	lsls	r1, r1, #17
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7fe faea 	bl	80005b0 <HAL_GetTick>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7fe fae5 	bl	80005b0 <HAL_GetTick>
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e030      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	049b      	lsls	r3, r3, #18
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x63a>
 8002000:	e028      	b.n	8002054 <HAL_RCC_OscConfig+0x6ac>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_RCC_OscConfig+0x670>)
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	4907      	ldr	r1, [pc, #28]	; (8002028 <HAL_RCC_OscConfig+0x680>)
 800200a:	400a      	ands	r2, r1
 800200c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200e:	f7fe facf 	bl	80005b0 <HAL_GetTick>
 8002012:	0003      	movs	r3, r0
 8002014:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002016:	e014      	b.n	8002042 <HAL_RCC_OscConfig+0x69a>
 8002018:	40021000 	.word	0x40021000
 800201c:	00001388 	.word	0x00001388
 8002020:	efffffff 	.word	0xefffffff
 8002024:	fffeffff 	.word	0xfffeffff
 8002028:	feffffff 	.word	0xfeffffff
 800202c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002030:	f7fe fabe 	bl	80005b0 <HAL_GetTick>
 8002034:	0002      	movs	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e009      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002042:	4b07      	ldr	r3, [pc, #28]	; (8002060 <HAL_RCC_OscConfig+0x6b8>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	049b      	lsls	r3, r3, #18
 800204a:	4013      	ands	r3, r2
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x688>
 800204e:	e001      	b.n	8002054 <HAL_RCC_OscConfig+0x6ac>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x6ae>
    }
  }
  
  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b006      	add	sp, #24
 800205c:	bd80      	pop	{r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	40021000 	.word	0x40021000

08002064 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002072:	4b7a      	ldr	r3, [pc, #488]	; (800225c <HAL_RCC_ClockConfig+0x1f8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2201      	movs	r2, #1
 8002078:	401a      	ands	r2, r3
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d211      	bcs.n	80020a4 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002080:	4b76      	ldr	r3, [pc, #472]	; (800225c <HAL_RCC_ClockConfig+0x1f8>)
 8002082:	4a76      	ldr	r2, [pc, #472]	; (800225c <HAL_RCC_ClockConfig+0x1f8>)
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	2101      	movs	r1, #1
 8002088:	438a      	bics	r2, r1
 800208a:	0011      	movs	r1, r2
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002092:	4b72      	ldr	r3, [pc, #456]	; (800225c <HAL_RCC_ClockConfig+0x1f8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2201      	movs	r2, #1
 8002098:	401a      	ands	r2, r3
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0d7      	b.n	8002254 <HAL_RCC_ClockConfig+0x1f0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2202      	movs	r2, #2
 80020aa:	4013      	ands	r3, r2
 80020ac:	d009      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ae:	4a6c      	ldr	r2, [pc, #432]	; (8002260 <HAL_RCC_ClockConfig+0x1fc>)
 80020b0:	4b6b      	ldr	r3, [pc, #428]	; (8002260 <HAL_RCC_ClockConfig+0x1fc>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	21f0      	movs	r1, #240	; 0xf0
 80020b6:	438b      	bics	r3, r1
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	430b      	orrs	r3, r1
 80020c0:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2201      	movs	r2, #1
 80020c8:	4013      	ands	r3, r2
 80020ca:	d100      	bne.n	80020ce <HAL_RCC_ClockConfig+0x6a>
 80020cc:	e089      	b.n	80021e2 <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d107      	bne.n	80020e6 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d6:	4b62      	ldr	r3, [pc, #392]	; (8002260 <HAL_RCC_ClockConfig+0x1fc>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	2380      	movs	r3, #128	; 0x80
 80020dc:	029b      	lsls	r3, r3, #10
 80020de:	4013      	ands	r3, r2
 80020e0:	d120      	bne.n	8002124 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0b6      	b.n	8002254 <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d107      	bne.n	80020fe <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ee:	4b5c      	ldr	r3, [pc, #368]	; (8002260 <HAL_RCC_ClockConfig+0x1fc>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	049b      	lsls	r3, r3, #18
 80020f6:	4013      	ands	r3, r2
 80020f8:	d114      	bne.n	8002124 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e0aa      	b.n	8002254 <HAL_RCC_ClockConfig+0x1f0>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002106:	4b56      	ldr	r3, [pc, #344]	; (8002260 <HAL_RCC_ClockConfig+0x1fc>)
 8002108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	025b      	lsls	r3, r3, #9
 800210e:	4013      	ands	r3, r2
 8002110:	d108      	bne.n	8002124 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e09e      	b.n	8002254 <HAL_RCC_ClockConfig+0x1f0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002116:	4b52      	ldr	r3, [pc, #328]	; (8002260 <HAL_RCC_ClockConfig+0x1fc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2202      	movs	r2, #2
 800211c:	4013      	ands	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e097      	b.n	8002254 <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002124:	4a4e      	ldr	r2, [pc, #312]	; (8002260 <HAL_RCC_ClockConfig+0x1fc>)
 8002126:	4b4e      	ldr	r3, [pc, #312]	; (8002260 <HAL_RCC_ClockConfig+0x1fc>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2103      	movs	r1, #3
 800212c:	438b      	bics	r3, r1
 800212e:	0019      	movs	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	430b      	orrs	r3, r1
 8002136:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002138:	f7fe fa3a 	bl	80005b0 <HAL_GetTick>
 800213c:	0003      	movs	r3, r0
 800213e:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d111      	bne.n	800216c <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002148:	e009      	b.n	800215e <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214a:	f7fe fa31 	bl	80005b0 <HAL_GetTick>
 800214e:	0002      	movs	r2, r0
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	4a43      	ldr	r2, [pc, #268]	; (8002264 <HAL_RCC_ClockConfig+0x200>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e07a      	b.n	8002254 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800215e:	4b40      	ldr	r3, [pc, #256]	; (8002260 <HAL_RCC_ClockConfig+0x1fc>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	220c      	movs	r2, #12
 8002164:	4013      	ands	r3, r2
 8002166:	2b04      	cmp	r3, #4
 8002168:	d1ef      	bne.n	800214a <HAL_RCC_ClockConfig+0xe6>
 800216a:	e03a      	b.n	80021e2 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d111      	bne.n	8002198 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002174:	e009      	b.n	800218a <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002176:	f7fe fa1b 	bl	80005b0 <HAL_GetTick>
 800217a:	0002      	movs	r2, r0
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	4a38      	ldr	r2, [pc, #224]	; (8002264 <HAL_RCC_ClockConfig+0x200>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e064      	b.n	8002254 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800218a:	4b35      	ldr	r3, [pc, #212]	; (8002260 <HAL_RCC_ClockConfig+0x1fc>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	220c      	movs	r2, #12
 8002190:	4013      	ands	r3, r2
 8002192:	2b08      	cmp	r3, #8
 8002194:	d1ef      	bne.n	8002176 <HAL_RCC_ClockConfig+0x112>
 8002196:	e024      	b.n	80021e2 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b03      	cmp	r3, #3
 800219e:	d11b      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80021a0:	e009      	b.n	80021b6 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a2:	f7fe fa05 	bl	80005b0 <HAL_GetTick>
 80021a6:	0002      	movs	r2, r0
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	4a2d      	ldr	r2, [pc, #180]	; (8002264 <HAL_RCC_ClockConfig+0x200>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e04e      	b.n	8002254 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80021b6:	4b2a      	ldr	r3, [pc, #168]	; (8002260 <HAL_RCC_ClockConfig+0x1fc>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	220c      	movs	r2, #12
 80021bc:	4013      	ands	r3, r2
 80021be:	2b0c      	cmp	r3, #12
 80021c0:	d1ef      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x13e>
 80021c2:	e00e      	b.n	80021e2 <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c4:	f7fe f9f4 	bl	80005b0 <HAL_GetTick>
 80021c8:	0002      	movs	r2, r0
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	4a25      	ldr	r2, [pc, #148]	; (8002264 <HAL_RCC_ClockConfig+0x200>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e03d      	b.n	8002254 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021d8:	4b21      	ldr	r3, [pc, #132]	; (8002260 <HAL_RCC_ClockConfig+0x1fc>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	220c      	movs	r2, #12
 80021de:	4013      	ands	r3, r2
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <HAL_RCC_ClockConfig+0x1f8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2201      	movs	r2, #1
 80021e8:	401a      	ands	r2, r3
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d911      	bls.n	8002214 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021f0:	4b1a      	ldr	r3, [pc, #104]	; (800225c <HAL_RCC_ClockConfig+0x1f8>)
 80021f2:	4a1a      	ldr	r2, [pc, #104]	; (800225c <HAL_RCC_ClockConfig+0x1f8>)
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	2101      	movs	r1, #1
 80021f8:	438a      	bics	r2, r1
 80021fa:	0011      	movs	r1, r2
 80021fc:	683a      	ldr	r2, [r7, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002202:	4b16      	ldr	r3, [pc, #88]	; (800225c <HAL_RCC_ClockConfig+0x1f8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2201      	movs	r2, #1
 8002208:	401a      	ands	r2, r3
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	429a      	cmp	r2, r3
 800220e:	d001      	beq.n	8002214 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e01f      	b.n	8002254 <HAL_RCC_ClockConfig+0x1f0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2204      	movs	r2, #4
 800221a:	4013      	ands	r3, r2
 800221c:	d008      	beq.n	8002230 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800221e:	4a10      	ldr	r2, [pc, #64]	; (8002260 <HAL_RCC_ClockConfig+0x1fc>)
 8002220:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_RCC_ClockConfig+0x1fc>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4910      	ldr	r1, [pc, #64]	; (8002268 <HAL_RCC_ClockConfig+0x204>)
 8002226:	4019      	ands	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	430b      	orrs	r3, r1
 800222e:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002230:	f000 f820 	bl	8002274 <HAL_RCC_GetSysClockFreq>
 8002234:	0001      	movs	r1, r0
 8002236:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_RCC_ClockConfig+0x1fc>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	220f      	movs	r2, #15
 800223e:	4013      	ands	r3, r2
 8002240:	4a0a      	ldr	r2, [pc, #40]	; (800226c <HAL_RCC_ClockConfig+0x208>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	000a      	movs	r2, r1
 8002246:	40da      	lsrs	r2, r3
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <HAL_RCC_ClockConfig+0x20c>)
 800224a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800224c:	2000      	movs	r0, #0
 800224e:	f7fe f987 	bl	8000560 <HAL_InitTick>
  
  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	0018      	movs	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	b004      	add	sp, #16
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40022000 	.word	0x40022000
 8002260:	40021000 	.word	0x40021000
 8002264:	00001388 	.word	0x00001388
 8002268:	fffff8ff 	.word	0xfffff8ff
 800226c:	08003ccc 	.word	0x08003ccc
 8002270:	20000018 	.word	0x20000018

08002274 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002274:	b590      	push	{r4, r7, lr}
 8002276:	b08f      	sub	sp, #60	; 0x3c
 8002278:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800227a:	2314      	movs	r3, #20
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	4a37      	ldr	r2, [pc, #220]	; (800235c <HAL_RCC_GetSysClockFreq+0xe8>)
 8002280:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002282:	c313      	stmia	r3!, {r0, r1, r4}
 8002284:	6812      	ldr	r2, [r2, #0]
 8002286:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	4a35      	ldr	r2, [pc, #212]	; (8002360 <HAL_RCC_GetSysClockFreq+0xec>)
 800228c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800228e:	c313      	stmia	r3!, {r0, r1, r4}
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002298:	2300      	movs	r3, #0
 800229a:	62bb      	str	r3, [r7, #40]	; 0x28
 800229c:	2300      	movs	r3, #0
 800229e:	637b      	str	r3, [r7, #52]	; 0x34
 80022a0:	2300      	movs	r3, #0
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80022a8:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <HAL_RCC_GetSysClockFreq+0xf0>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b0:	220c      	movs	r2, #12
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d006      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0x52>
 80022b8:	2b0c      	cmp	r3, #12
 80022ba:	d043      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0xd0>
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d144      	bne.n	800234a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf4>)
 80022c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022c4:	e044      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80022c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c8:	0c9b      	lsrs	r3, r3, #18
 80022ca:	220f      	movs	r2, #15
 80022cc:	4013      	ands	r3, r2
 80022ce:	2214      	movs	r2, #20
 80022d0:	18ba      	adds	r2, r7, r2
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80022d6:	4b23      	ldr	r3, [pc, #140]	; (8002364 <HAL_RCC_GetSysClockFreq+0xf0>)
 80022d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022da:	220f      	movs	r2, #15
 80022dc:	4013      	ands	r3, r2
 80022de:	1d3a      	adds	r2, r7, #4
 80022e0:	5cd3      	ldrb	r3, [r2, r3]
 80022e2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80022e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e6:	23c0      	movs	r3, #192	; 0xc0
 80022e8:	025b      	lsls	r3, r3, #9
 80022ea:	401a      	ands	r2, r3
 80022ec:	2380      	movs	r3, #128	; 0x80
 80022ee:	025b      	lsls	r3, r3, #9
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d109      	bne.n	8002308 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80022f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022f6:	481c      	ldr	r0, [pc, #112]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf4>)
 80022f8:	f7fd ff04 	bl	8000104 <__udivsi3>
 80022fc:	0003      	movs	r3, r0
 80022fe:	001a      	movs	r2, r3
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	4353      	muls	r3, r2
 8002304:	637b      	str	r3, [r7, #52]	; 0x34
 8002306:	e01a      	b.n	800233e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002308:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800230a:	23c0      	movs	r3, #192	; 0xc0
 800230c:	025b      	lsls	r3, r3, #9
 800230e:	401a      	ands	r2, r3
 8002310:	23c0      	movs	r3, #192	; 0xc0
 8002312:	025b      	lsls	r3, r3, #9
 8002314:	429a      	cmp	r2, r3
 8002316:	d109      	bne.n	800232c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8002318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800231a:	4814      	ldr	r0, [pc, #80]	; (800236c <HAL_RCC_GetSysClockFreq+0xf8>)
 800231c:	f7fd fef2 	bl	8000104 <__udivsi3>
 8002320:	0003      	movs	r3, r0
 8002322:	001a      	movs	r2, r3
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	4353      	muls	r3, r2
 8002328:	637b      	str	r3, [r7, #52]	; 0x34
 800232a:	e008      	b.n	800233e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800232c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800232e:	480e      	ldr	r0, [pc, #56]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002330:	f7fd fee8 	bl	8000104 <__udivsi3>
 8002334:	0003      	movs	r3, r0
 8002336:	001a      	movs	r2, r3
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	4353      	muls	r3, r2
 800233c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 800233e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002340:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002342:	e005      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002346:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002348:	e002      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf4>)
 800234c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800234e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002352:	0018      	movs	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	b00f      	add	sp, #60	; 0x3c
 8002358:	bd90      	pop	{r4, r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	08003c40 	.word	0x08003c40
 8002360:	08003c50 	.word	0x08003c50
 8002364:	40021000 	.word	0x40021000
 8002368:	007a1200 	.word	0x007a1200
 800236c:	02dc6c00 	.word	0x02dc6c00

08002370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002374:	4b02      	ldr	r3, [pc, #8]	; (8002380 <HAL_RCC_GetHCLKFreq+0x10>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	20000018 	.word	0x20000018

08002384 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e088      	b.n	80024a8 <HAL_SPI_Init+0x124>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	225d      	movs	r2, #93	; 0x5d
 80023a0:	5c9b      	ldrb	r3, [r3, r2]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d107      	bne.n	80023b8 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	225c      	movs	r2, #92	; 0x5c
 80023ac:	2100      	movs	r1, #0
 80023ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	0018      	movs	r0, r3
 80023b4:	f001 faee 	bl	8003994 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	225d      	movs	r2, #93	; 0x5d
 80023bc:	2102      	movs	r1, #2
 80023be:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	2140      	movs	r1, #64	; 0x40
 80023cc:	438a      	bics	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	23e0      	movs	r3, #224	; 0xe0
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	429a      	cmp	r2, r3
 80023da:	d902      	bls.n	80023e2 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	e002      	b.n	80023e8 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	015b      	lsls	r3, r3, #5
 80023e6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	23f0      	movs	r3, #240	; 0xf0
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d008      	beq.n	8002406 <HAL_SPI_Init+0x82>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	23e0      	movs	r3, #224	; 0xe0
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d002      	beq.n	8002406 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10c      	bne.n	8002428 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	23e0      	movs	r3, #224	; 0xe0
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	429a      	cmp	r2, r3
 8002418:	d903      	bls.n	8002422 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2202      	movs	r2, #2
 800241e:	631a      	str	r2, [r3, #48]	; 0x30
 8002420:	e002      	b.n	8002428 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6851      	ldr	r1, [r2, #4]
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6892      	ldr	r2, [r2, #8]
 8002434:	4311      	orrs	r1, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6912      	ldr	r2, [r2, #16]
 800243a:	4311      	orrs	r1, r2
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6952      	ldr	r2, [r2, #20]
 8002440:	4311      	orrs	r1, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6990      	ldr	r0, [r2, #24]
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	0092      	lsls	r2, r2, #2
 800244a:	4002      	ands	r2, r0
 800244c:	4311      	orrs	r1, r2
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	69d2      	ldr	r2, [r2, #28]
 8002452:	4311      	orrs	r1, r2
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6a12      	ldr	r2, [r2, #32]
 8002458:	4311      	orrs	r1, r2
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800245e:	430a      	orrs	r2, r1
 8002460:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6992      	ldr	r2, [r2, #24]
 800246a:	0c12      	lsrs	r2, r2, #16
 800246c:	2104      	movs	r1, #4
 800246e:	4011      	ands	r1, r2
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002474:	4311      	orrs	r1, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800247a:	4311      	orrs	r1, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	68d2      	ldr	r2, [r2, #12]
 8002480:	4311      	orrs	r1, r2
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	430a      	orrs	r2, r1
 8002486:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	69d2      	ldr	r2, [r2, #28]
 8002492:	4907      	ldr	r1, [pc, #28]	; (80024b0 <HAL_SPI_Init+0x12c>)
 8002494:	400a      	ands	r2, r1
 8002496:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	225d      	movs	r2, #93	; 0x5d
 80024a2:	2101      	movs	r1, #1
 80024a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b004      	add	sp, #16
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	fffff7ff 	.word	0xfffff7ff

080024b4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b088      	sub	sp, #32
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	1dbb      	adds	r3, r7, #6
 80024c2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024c8:	231f      	movs	r3, #31
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	225c      	movs	r2, #92	; 0x5c
 80024d4:	5c9b      	ldrb	r3, [r3, r2]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_SPI_Transmit+0x2a>
 80024da:	2302      	movs	r3, #2
 80024dc:	e14f      	b.n	800277e <HAL_SPI_Transmit+0x2ca>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	225c      	movs	r2, #92	; 0x5c
 80024e2:	2101      	movs	r1, #1
 80024e4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024e6:	f7fe f863 	bl	80005b0 <HAL_GetTick>
 80024ea:	0003      	movs	r3, r0
 80024ec:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	225d      	movs	r2, #93	; 0x5d
 80024f2:	5c9b      	ldrb	r3, [r3, r2]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d004      	beq.n	8002504 <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 80024fa:	231f      	movs	r3, #31
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	2202      	movs	r2, #2
 8002500:	701a      	strb	r2, [r3, #0]
    goto error;
 8002502:	e131      	b.n	8002768 <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_SPI_Transmit+0x5e>
 800250a:	1dbb      	adds	r3, r7, #6
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d104      	bne.n	800251c <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 8002512:	231f      	movs	r3, #31
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
    goto error;
 800251a:	e125      	b.n	8002768 <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	225d      	movs	r2, #93	; 0x5d
 8002520:	2103      	movs	r1, #3
 8002522:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1dba      	adds	r2, r7, #6
 8002534:	8812      	ldrh	r2, [r2, #0]
 8002536:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	1dba      	adds	r2, r7, #6
 800253c:	8812      	ldrh	r2, [r2, #0]
 800253e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2244      	movs	r2, #68	; 0x44
 800254a:	2100      	movs	r1, #0
 800254c:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2246      	movs	r2, #70	; 0x46
 8002552:	2100      	movs	r1, #0
 8002554:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	2380      	movs	r3, #128	; 0x80
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	429a      	cmp	r2, r3
 800256c:	d108      	bne.n	8002580 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	2180      	movs	r1, #128	; 0x80
 800257a:	01c9      	lsls	r1, r1, #7
 800257c:	430a      	orrs	r2, r1
 800257e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2240      	movs	r2, #64	; 0x40
 8002588:	4013      	ands	r3, r2
 800258a:	2b40      	cmp	r3, #64	; 0x40
 800258c:	d007      	beq.n	800259e <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	2140      	movs	r1, #64	; 0x40
 800259a:	430a      	orrs	r2, r1
 800259c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	23e0      	movs	r3, #224	; 0xe0
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d948      	bls.n	800263c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d004      	beq.n	80025bc <HAL_SPI_Transmit+0x108>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d139      	bne.n	8002630 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	8812      	ldrh	r2, [r2, #0]
 80025c4:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	3302      	adds	r3, #2
 80025ca:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025da:	e029      	b.n	8002630 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2202      	movs	r2, #2
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d10f      	bne.n	800260a <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	8812      	ldrh	r2, [r2, #0]
 80025f2:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	3302      	adds	r3, #2
 80025f8:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002608:	e012      	b.n	8002630 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_SPI_Transmit+0x172>
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	3301      	adds	r3, #1
 8002614:	d00c      	beq.n	8002630 <HAL_SPI_Transmit+0x17c>
 8002616:	f7fd ffcb 	bl	80005b0 <HAL_GetTick>
 800261a:	0002      	movs	r2, r0
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	1ad2      	subs	r2, r2, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d304      	bcc.n	8002630 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002626:	231f      	movs	r3, #31
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2203      	movs	r2, #3
 800262c:	701a      	strb	r2, [r3, #0]
          goto error;
 800262e:	e09b      	b.n	8002768 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1d0      	bne.n	80025dc <HAL_SPI_Transmit+0x128>
 800263a:	e073      	b.n	8002724 <HAL_SPI_Transmit+0x270>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d004      	beq.n	800264e <HAL_SPI_Transmit+0x19a>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002648:	b29b      	uxth	r3, r3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d165      	bne.n	800271a <HAL_SPI_Transmit+0x266>
    {
      if (hspi->TxXferCount > 1U)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002652:	b29b      	uxth	r3, r3
 8002654:	2b01      	cmp	r3, #1
 8002656:	d90f      	bls.n	8002678 <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	8812      	ldrh	r2, [r2, #0]
 8002660:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	3302      	adds	r3, #2
 8002666:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b02      	subs	r3, #2
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002676:	e050      	b.n	800271a <HAL_SPI_Transmit+0x266>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	330c      	adds	r3, #12
 800267e:	001a      	movs	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	1c59      	adds	r1, r3, #1
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29a      	uxth	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002698:	e03f      	b.n	800271a <HAL_SPI_Transmit+0x266>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2202      	movs	r2, #2
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d125      	bne.n	80026f4 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d90f      	bls.n	80026d2 <HAL_SPI_Transmit+0x21e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	8812      	ldrh	r2, [r2, #0]
 80026ba:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	3302      	adds	r3, #2
 80026c0:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	3b02      	subs	r3, #2
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026d0:	e023      	b.n	800271a <HAL_SPI_Transmit+0x266>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	330c      	adds	r3, #12
 80026d8:	001a      	movs	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1c59      	adds	r1, r3, #1
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80026f2:	e012      	b.n	800271a <HAL_SPI_Transmit+0x266>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <HAL_SPI_Transmit+0x25c>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	d00c      	beq.n	800271a <HAL_SPI_Transmit+0x266>
 8002700:	f7fd ff56 	bl	80005b0 <HAL_GetTick>
 8002704:	0002      	movs	r2, r0
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	1ad2      	subs	r2, r2, r3
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d304      	bcc.n	800271a <HAL_SPI_Transmit+0x266>
        {
          errorcode = HAL_TIMEOUT;
 8002710:	231f      	movs	r3, #31
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	2203      	movs	r2, #3
 8002716:	701a      	strb	r2, [r3, #0]
          goto error;
 8002718:	e026      	b.n	8002768 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1ba      	bne.n	800269a <HAL_SPI_Transmit+0x1e6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	6839      	ldr	r1, [r7, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	0018      	movs	r0, r3
 800272c:	f000 fcce 	bl	80030cc <SPI_EndRxTxTransaction>
 8002730:	1e03      	subs	r3, r0, #0
 8002732:	d002      	beq.n	800273a <HAL_SPI_Transmit+0x286>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10a      	bne.n	8002758 <HAL_SPI_Transmit+0x2a4>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	617b      	str	r3, [r7, #20]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_SPI_Transmit+0x2b4>
  {
    errorcode = HAL_ERROR;
 8002760:	231f      	movs	r3, #31
 8002762:	18fb      	adds	r3, r7, r3
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	225d      	movs	r2, #93	; 0x5d
 800276c:	2101      	movs	r1, #1
 800276e:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	225c      	movs	r2, #92	; 0x5c
 8002774:	2100      	movs	r1, #0
 8002776:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002778:	231f      	movs	r3, #31
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	781b      	ldrb	r3, [r3, #0]
}
 800277e:	0018      	movs	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	b008      	add	sp, #32
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b089      	sub	sp, #36	; 0x24
 800278c:	af02      	add	r7, sp, #8
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	1dbb      	adds	r3, r7, #6
 8002796:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800279c:	2317      	movs	r3, #23
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	2382      	movs	r3, #130	; 0x82
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d113      	bne.n	80027d8 <HAL_SPI_Receive+0x50>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10f      	bne.n	80027d8 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	225d      	movs	r2, #93	; 0x5d
 80027bc:	2104      	movs	r1, #4
 80027be:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80027c0:	1dbb      	adds	r3, r7, #6
 80027c2:	881c      	ldrh	r4, [r3, #0]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	68b9      	ldr	r1, [r7, #8]
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	0023      	movs	r3, r4
 80027d0:	f000 f916 	bl	8002a00 <HAL_SPI_TransmitReceive>
 80027d4:	0003      	movs	r3, r0
 80027d6:	e10a      	b.n	80029ee <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	225c      	movs	r2, #92	; 0x5c
 80027dc:	5c9b      	ldrb	r3, [r3, r2]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_SPI_Receive+0x5e>
 80027e2:	2302      	movs	r3, #2
 80027e4:	e103      	b.n	80029ee <HAL_SPI_Receive+0x266>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	225c      	movs	r2, #92	; 0x5c
 80027ea:	2101      	movs	r1, #1
 80027ec:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027ee:	f7fd fedf 	bl	80005b0 <HAL_GetTick>
 80027f2:	0003      	movs	r3, r0
 80027f4:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	225d      	movs	r2, #93	; 0x5d
 80027fa:	5c9b      	ldrb	r3, [r3, r2]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d004      	beq.n	800280c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8002802:	2317      	movs	r3, #23
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	2202      	movs	r2, #2
 8002808:	701a      	strb	r2, [r3, #0]
    goto error;
 800280a:	e0e5      	b.n	80029d8 <HAL_SPI_Receive+0x250>
  }

  if ((pData == NULL) || (Size == 0U))
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_SPI_Receive+0x92>
 8002812:	1dbb      	adds	r3, r7, #6
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d104      	bne.n	8002824 <HAL_SPI_Receive+0x9c>
  {
    errorcode = HAL_ERROR;
 800281a:	2317      	movs	r3, #23
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	2201      	movs	r2, #1
 8002820:	701a      	strb	r2, [r3, #0]
    goto error;
 8002822:	e0d9      	b.n	80029d8 <HAL_SPI_Receive+0x250>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	225d      	movs	r2, #93	; 0x5d
 8002828:	2104      	movs	r1, #4
 800282a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1dba      	adds	r2, r7, #6
 800283c:	2144      	movs	r1, #68	; 0x44
 800283e:	8812      	ldrh	r2, [r2, #0]
 8002840:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1dba      	adds	r2, r7, #6
 8002846:	2146      	movs	r1, #70	; 0x46
 8002848:	8812      	ldrh	r2, [r2, #0]
 800284a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx FiFo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	23e0      	movs	r3, #224	; 0xe0
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	429a      	cmp	r2, r3
 8002874:	d908      	bls.n	8002888 <HAL_SPI_Receive+0x100>
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	6812      	ldr	r2, [r2, #0]
 800287e:	6852      	ldr	r2, [r2, #4]
 8002880:	495d      	ldr	r1, [pc, #372]	; (80029f8 <HAL_SPI_Receive+0x270>)
 8002882:	400a      	ands	r2, r1
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	e008      	b.n	800289a <HAL_SPI_Receive+0x112>
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	6852      	ldr	r2, [r2, #4]
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	0149      	lsls	r1, r1, #5
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	689a      	ldr	r2, [r3, #8]
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	021b      	lsls	r3, r3, #8
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d107      	bne.n	80028b6 <HAL_SPI_Receive+0x12e>
  {
    SPI_1LINE_RX(hspi);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	4952      	ldr	r1, [pc, #328]	; (80029fc <HAL_SPI_Receive+0x274>)
 80028b2:	400a      	ands	r2, r1
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2240      	movs	r2, #64	; 0x40
 80028be:	4013      	ands	r3, r2
 80028c0:	2b40      	cmp	r3, #64	; 0x40
 80028c2:	d007      	beq.n	80028d4 <HAL_SPI_Receive+0x14c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	6812      	ldr	r2, [r2, #0]
 80028ce:	2140      	movs	r1, #64	; 0x40
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	23e0      	movs	r3, #224	; 0xe0
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	429a      	cmp	r2, r3
 80028de:	d862      	bhi.n	80029a6 <HAL_SPI_Receive+0x21e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80028e0:	e02d      	b.n	800293e <HAL_SPI_Receive+0x1b6>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	2201      	movs	r2, #1
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d113      	bne.n	8002918 <HAL_SPI_Receive+0x190>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	330c      	adds	r3, #12
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3301      	adds	r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2246      	movs	r2, #70	; 0x46
 8002908:	5a9b      	ldrh	r3, [r3, r2]
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b299      	uxth	r1, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2246      	movs	r2, #70	; 0x46
 8002914:	5299      	strh	r1, [r3, r2]
 8002916:	e012      	b.n	800293e <HAL_SPI_Receive+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <HAL_SPI_Receive+0x1ac>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	3301      	adds	r3, #1
 8002922:	d00c      	beq.n	800293e <HAL_SPI_Receive+0x1b6>
 8002924:	f7fd fe44 	bl	80005b0 <HAL_GetTick>
 8002928:	0002      	movs	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad2      	subs	r2, r2, r3
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d304      	bcc.n	800293e <HAL_SPI_Receive+0x1b6>
        {
          errorcode = HAL_TIMEOUT;
 8002934:	2317      	movs	r3, #23
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	2203      	movs	r2, #3
 800293a:	701a      	strb	r2, [r3, #0]
          goto error;
 800293c:	e04c      	b.n	80029d8 <HAL_SPI_Receive+0x250>
    while (hspi->RxXferCount > 0U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2246      	movs	r2, #70	; 0x46
 8002942:	5a9b      	ldrh	r3, [r3, r2]
 8002944:	b29b      	uxth	r3, r3
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1cb      	bne.n	80028e2 <HAL_SPI_Receive+0x15a>
 800294a:	e032      	b.n	80029b2 <HAL_SPI_Receive+0x22a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2201      	movs	r2, #1
 8002954:	4013      	ands	r3, r2
 8002956:	2b01      	cmp	r3, #1
 8002958:	d112      	bne.n	8002980 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	b29a      	uxth	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	3302      	adds	r3, #2
 800296a:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2246      	movs	r2, #70	; 0x46
 8002970:	5a9b      	ldrh	r3, [r3, r2]
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b299      	uxth	r1, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2246      	movs	r2, #70	; 0x46
 800297c:	5299      	strh	r1, [r3, r2]
 800297e:	e012      	b.n	80029a6 <HAL_SPI_Receive+0x21e>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00a      	beq.n	800299c <HAL_SPI_Receive+0x214>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	3301      	adds	r3, #1
 800298a:	d00c      	beq.n	80029a6 <HAL_SPI_Receive+0x21e>
 800298c:	f7fd fe10 	bl	80005b0 <HAL_GetTick>
 8002990:	0002      	movs	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad2      	subs	r2, r2, r3
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d304      	bcc.n	80029a6 <HAL_SPI_Receive+0x21e>
        {
          errorcode = HAL_TIMEOUT;
 800299c:	2317      	movs	r3, #23
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	2203      	movs	r2, #3
 80029a2:	701a      	strb	r2, [r3, #0]
          goto error;
 80029a4:	e018      	b.n	80029d8 <HAL_SPI_Receive+0x250>
    while (hspi->RxXferCount > 0U)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2246      	movs	r2, #70	; 0x46
 80029aa:	5a9b      	ldrh	r3, [r3, r2]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1cc      	bne.n	800294c <HAL_SPI_Receive+0x1c4>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	6839      	ldr	r1, [r7, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 fb29 	bl	8003010 <SPI_EndRxTransaction>
 80029be:	1e03      	subs	r3, r0, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_SPI_Receive+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2220      	movs	r2, #32
 80029c6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_SPI_Receive+0x250>
  {
    errorcode = HAL_ERROR;
 80029d0:	2317      	movs	r3, #23
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	225d      	movs	r2, #93	; 0x5d
 80029dc:	2101      	movs	r1, #1
 80029de:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	225c      	movs	r2, #92	; 0x5c
 80029e4:	2100      	movs	r1, #0
 80029e6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80029e8:	2317      	movs	r3, #23
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	781b      	ldrb	r3, [r3, #0]
}
 80029ee:	0018      	movs	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b007      	add	sp, #28
 80029f4:	bd90      	pop	{r4, r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	ffffefff 	.word	0xffffefff
 80029fc:	ffffbfff 	.word	0xffffbfff

08002a00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	001a      	movs	r2, r3
 8002a0e:	1cbb      	adds	r3, r7, #2
 8002a10:	801a      	strh	r2, [r3, #0]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	2300      	movs	r3, #0
 8002a18:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a22:	2323      	movs	r3, #35	; 0x23
 8002a24:	18fb      	adds	r3, r7, r3
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	225c      	movs	r2, #92	; 0x5c
 8002a2e:	5c9b      	ldrb	r3, [r3, r2]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_SPI_TransmitReceive+0x38>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e1f1      	b.n	8002e1c <HAL_SPI_TransmitReceive+0x41c>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	225c      	movs	r2, #92	; 0x5c
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a40:	f7fd fdb6 	bl	80005b0 <HAL_GetTick>
 8002a44:	0003      	movs	r3, r0
 8002a46:	617b      	str	r3, [r7, #20]

  tmp  = hspi->State;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	225d      	movs	r2, #93	; 0x5d
 8002a4c:	5c9b      	ldrb	r3, [r3, r2]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d010      	beq.n	8002a80 <HAL_SPI_TransmitReceive+0x80>
 8002a5e:	69ba      	ldr	r2, [r7, #24]
 8002a60:	2382      	movs	r3, #130	; 0x82
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d106      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x76>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d102      	bne.n	8002a76 <HAL_SPI_TransmitReceive+0x76>
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d004      	beq.n	8002a80 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8002a76:	2323      	movs	r3, #35	; 0x23
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a7e:	e1c2      	b.n	8002e06 <HAL_SPI_TransmitReceive+0x406>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d006      	beq.n	8002a94 <HAL_SPI_TransmitReceive+0x94>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d003      	beq.n	8002a94 <HAL_SPI_TransmitReceive+0x94>
 8002a8c:	1cbb      	adds	r3, r7, #2
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d104      	bne.n	8002a9e <HAL_SPI_TransmitReceive+0x9e>
  {
    errorcode = HAL_ERROR;
 8002a94:	2323      	movs	r3, #35	; 0x23
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a9c:	e1b3      	b.n	8002e06 <HAL_SPI_TransmitReceive+0x406>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	225d      	movs	r2, #93	; 0x5d
 8002aa2:	5c9b      	ldrb	r3, [r3, r2]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d003      	beq.n	8002ab2 <HAL_SPI_TransmitReceive+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	225d      	movs	r2, #93	; 0x5d
 8002aae:	2105      	movs	r1, #5
 8002ab0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1cba      	adds	r2, r7, #2
 8002ac2:	2146      	movs	r1, #70	; 0x46
 8002ac4:	8812      	ldrh	r2, [r2, #0]
 8002ac6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1cba      	adds	r2, r7, #2
 8002acc:	2144      	movs	r1, #68	; 0x44
 8002ace:	8812      	ldrh	r2, [r2, #0]
 8002ad0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	1cba      	adds	r2, r7, #2
 8002adc:	8812      	ldrh	r2, [r2, #0]
 8002ade:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1cba      	adds	r2, r7, #2
 8002ae4:	8812      	ldrh	r2, [r2, #0]
 8002ae6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	23e0      	movs	r3, #224	; 0xe0
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d805      	bhi.n	8002b0c <HAL_SPI_TransmitReceive+0x10c>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2246      	movs	r2, #70	; 0x46
 8002b04:	5a9b      	ldrh	r3, [r3, r2]
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d908      	bls.n	8002b1e <HAL_SPI_TransmitReceive+0x11e>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	6852      	ldr	r2, [r2, #4]
 8002b16:	49c3      	ldr	r1, [pc, #780]	; (8002e24 <HAL_SPI_TransmitReceive+0x424>)
 8002b18:	400a      	ands	r2, r1
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	e008      	b.n	8002b30 <HAL_SPI_TransmitReceive+0x130>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	6852      	ldr	r2, [r2, #4]
 8002b28:	2180      	movs	r1, #128	; 0x80
 8002b2a:	0149      	lsls	r1, r1, #5
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2240      	movs	r2, #64	; 0x40
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b40      	cmp	r3, #64	; 0x40
 8002b3c:	d007      	beq.n	8002b4e <HAL_SPI_TransmitReceive+0x14e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	6812      	ldr	r2, [r2, #0]
 8002b46:	6812      	ldr	r2, [r2, #0]
 8002b48:	2140      	movs	r1, #64	; 0x40
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	23e0      	movs	r3, #224	; 0xe0
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d800      	bhi.n	8002b5c <HAL_SPI_TransmitReceive+0x15c>
 8002b5a:	e075      	b.n	8002c48 <HAL_SPI_TransmitReceive+0x248>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <HAL_SPI_TransmitReceive+0x16e>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d160      	bne.n	8002c30 <HAL_SPI_TransmitReceive+0x230>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	8812      	ldrh	r2, [r2, #0]
 8002b76:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b8c:	e050      	b.n	8002c30 <HAL_SPI_TransmitReceive+0x230>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01c      	beq.n	8002bce <HAL_SPI_TransmitReceive+0x1ce>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d017      	beq.n	8002bce <HAL_SPI_TransmitReceive+0x1ce>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d110      	bne.n	8002bce <HAL_SPI_TransmitReceive+0x1ce>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68ba      	ldr	r2, [r7, #8]
 8002bb2:	8812      	ldrh	r2, [r2, #0]
 8002bb4:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	3302      	adds	r3, #2
 8002bba:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2246      	movs	r2, #70	; 0x46
 8002bd2:	5a9b      	ldrh	r3, [r3, r2]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01a      	beq.n	8002c10 <HAL_SPI_TransmitReceive+0x210>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	2201      	movs	r2, #1
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d113      	bne.n	8002c10 <HAL_SPI_TransmitReceive+0x210>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2246      	movs	r2, #70	; 0x46
 8002bfe:	5a9b      	ldrh	r3, [r3, r2]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b299      	uxth	r1, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2246      	movs	r2, #70	; 0x46
 8002c0a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	3301      	adds	r3, #1
 8002c14:	d00c      	beq.n	8002c30 <HAL_SPI_TransmitReceive+0x230>
 8002c16:	f7fd fccb 	bl	80005b0 <HAL_GetTick>
 8002c1a:	0002      	movs	r2, r0
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	1ad2      	subs	r2, r2, r3
 8002c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d304      	bcc.n	8002c30 <HAL_SPI_TransmitReceive+0x230>
      {
        errorcode = HAL_TIMEOUT;
 8002c26:	2323      	movs	r3, #35	; 0x23
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	701a      	strb	r2, [r3, #0]
        goto error;
 8002c2e:	e0ea      	b.n	8002e06 <HAL_SPI_TransmitReceive+0x406>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1a9      	bne.n	8002b8e <HAL_SPI_TransmitReceive+0x18e>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2246      	movs	r2, #70	; 0x46
 8002c3e:	5a9b      	ldrh	r3, [r3, r2]
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1a3      	bne.n	8002b8e <HAL_SPI_TransmitReceive+0x18e>
 8002c46:	e0cb      	b.n	8002de0 <HAL_SPI_TransmitReceive+0x3e0>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_SPI_TransmitReceive+0x25c>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d000      	beq.n	8002c5c <HAL_SPI_TransmitReceive+0x25c>
 8002c5a:	e0b4      	b.n	8002dc6 <HAL_SPI_TransmitReceive+0x3c6>
    {
      if (hspi->TxXferCount > 1U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d90f      	bls.n	8002c86 <HAL_SPI_TransmitReceive+0x286>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	8812      	ldrh	r2, [r2, #0]
 8002c6e:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	3302      	adds	r3, #2
 8002c74:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b02      	subs	r3, #2
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c84:	e09f      	b.n	8002dc6 <HAL_SPI_TransmitReceive+0x3c6>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	330c      	adds	r3, #12
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	1c59      	adds	r1, r3, #1
 8002c92:	60b9      	str	r1, [r7, #8]
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	b29a      	uxth	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ca6:	e08e      	b.n	8002dc6 <HAL_SPI_TransmitReceive+0x3c6>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d032      	beq.n	8002d14 <HAL_SPI_TransmitReceive+0x314>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d02d      	beq.n	8002d14 <HAL_SPI_TransmitReceive+0x314>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d126      	bne.n	8002d14 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d90f      	bls.n	8002cf0 <HAL_SPI_TransmitReceive+0x2f0>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	8812      	ldrh	r2, [r2, #0]
 8002cd8:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	3302      	adds	r3, #2
 8002cde:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	3b02      	subs	r3, #2
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cee:	e00f      	b.n	8002d10 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	330c      	adds	r3, #12
 8002cf6:	001a      	movs	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	1c59      	adds	r1, r3, #1
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2246      	movs	r2, #70	; 0x46
 8002d18:	5a9b      	ldrh	r3, [r3, r2]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d042      	beq.n	8002da6 <HAL_SPI_TransmitReceive+0x3a6>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2201      	movs	r2, #1
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d13b      	bne.n	8002da6 <HAL_SPI_TransmitReceive+0x3a6>
      {
        if (hspi->RxXferCount > 1U)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2246      	movs	r2, #70	; 0x46
 8002d32:	5a9b      	ldrh	r3, [r3, r2]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d921      	bls.n	8002d7e <HAL_SPI_TransmitReceive+0x37e>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3302      	adds	r3, #2
 8002d4a:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2246      	movs	r2, #70	; 0x46
 8002d50:	5a9b      	ldrh	r3, [r3, r2]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b02      	subs	r3, #2
 8002d56:	b299      	uxth	r1, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2246      	movs	r2, #70	; 0x46
 8002d5c:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2246      	movs	r2, #70	; 0x46
 8002d62:	5a9b      	ldrh	r3, [r3, r2]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d81b      	bhi.n	8002da2 <HAL_SPI_TransmitReceive+0x3a2>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	6852      	ldr	r2, [r2, #4]
 8002d74:	2180      	movs	r1, #128	; 0x80
 8002d76:	0149      	lsls	r1, r1, #5
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	e011      	b.n	8002da2 <HAL_SPI_TransmitReceive+0x3a2>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	607a      	str	r2, [r7, #4]
 8002d84:	68fa      	ldr	r2, [r7, #12]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	320c      	adds	r2, #12
 8002d8a:	7812      	ldrb	r2, [r2, #0]
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2246      	movs	r2, #70	; 0x46
 8002d94:	5a9b      	ldrh	r3, [r3, r2]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b299      	uxth	r1, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2246      	movs	r2, #70	; 0x46
 8002da0:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002da2:	2301      	movs	r3, #1
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	3301      	adds	r3, #1
 8002daa:	d00c      	beq.n	8002dc6 <HAL_SPI_TransmitReceive+0x3c6>
 8002dac:	f7fd fc00 	bl	80005b0 <HAL_GetTick>
 8002db0:	0002      	movs	r2, r0
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	1ad2      	subs	r2, r2, r3
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d304      	bcc.n	8002dc6 <HAL_SPI_TransmitReceive+0x3c6>
      {
        errorcode = HAL_TIMEOUT;
 8002dbc:	2323      	movs	r3, #35	; 0x23
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	701a      	strb	r2, [r3, #0]
        goto error;
 8002dc4:	e01f      	b.n	8002e06 <HAL_SPI_TransmitReceive+0x406>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d000      	beq.n	8002dd2 <HAL_SPI_TransmitReceive+0x3d2>
 8002dd0:	e76a      	b.n	8002ca8 <HAL_SPI_TransmitReceive+0x2a8>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2246      	movs	r2, #70	; 0x46
 8002dd6:	5a9b      	ldrh	r3, [r3, r2]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d000      	beq.n	8002de0 <HAL_SPI_TransmitReceive+0x3e0>
 8002dde:	e763      	b.n	8002ca8 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	0018      	movs	r0, r3
 8002de8:	f000 f970 	bl	80030cc <SPI_EndRxTxTransaction>
 8002dec:	1e03      	subs	r3, r0, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_SPI_TransmitReceive+0x3f6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2220      	movs	r2, #32
 8002df4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_SPI_TransmitReceive+0x406>
  {
    errorcode = HAL_ERROR;
 8002dfe:	2323      	movs	r3, #35	; 0x23
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	2201      	movs	r2, #1
 8002e04:	701a      	strb	r2, [r3, #0]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	225d      	movs	r2, #93	; 0x5d
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	225c      	movs	r2, #92	; 0x5c
 8002e12:	2100      	movs	r1, #0
 8002e14:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002e16:	2323      	movs	r3, #35	; 0x23
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	781b      	ldrb	r3, [r3, #0]
}
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b00a      	add	sp, #40	; 0x28
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	ffffefff 	.word	0xffffefff

08002e28 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 8002e34:	0018      	movs	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b002      	add	sp, #8
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e4a:	e050      	b.n	8002eee <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	d04d      	beq.n	8002eee <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <SPI_WaitFlagStateUntilTimeout+0x2c>
 8002e58:	f7fd fbaa 	bl	80005b0 <HAL_GetTick>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	1ad2      	subs	r2, r2, r3
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d342      	bcc.n	8002eee <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	6852      	ldr	r2, [r2, #4]
 8002e72:	21e0      	movs	r1, #224	; 0xe0
 8002e74:	438a      	bics	r2, r1
 8002e76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	2382      	movs	r3, #130	; 0x82
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d113      	bne.n	8002eac <SPI_WaitFlagStateUntilTimeout+0x70>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	2380      	movs	r3, #128	; 0x80
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d005      	beq.n	8002e9c <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d107      	bne.n	8002eac <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	2140      	movs	r1, #64	; 0x40
 8002ea8:	438a      	bics	r2, r1
 8002eaa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	019b      	lsls	r3, r3, #6
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d110      	bne.n	8002eda <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	4914      	ldr	r1, [pc, #80]	; (8002f14 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	6812      	ldr	r2, [r2, #0]
 8002ed2:	2180      	movs	r1, #128	; 0x80
 8002ed4:	0189      	lsls	r1, r1, #6
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	225d      	movs	r2, #93	; 0x5d
 8002ede:	2101      	movs	r1, #1
 8002ee0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	225c      	movs	r2, #92	; 0x5c
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e00e      	b.n	8002f0c <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d101      	bne.n	8002f02 <SPI_WaitFlagStateUntilTimeout+0xc6>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <SPI_WaitFlagStateUntilTimeout+0xc8>
 8002f02:	2300      	movs	r3, #0
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d1a0      	bne.n	8002e4c <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b004      	add	sp, #16
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	ffffdfff 	.word	0xffffdfff

08002f18 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8002f26:	e063      	b.n	8002ff0 <SPI_WaitFifoStateUntilTimeout+0xd8>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f28:	68ba      	ldr	r2, [r7, #8]
 8002f2a:	23c0      	movs	r3, #192	; 0xc0
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d10d      	bne.n	8002f4e <SPI_WaitFifoStateUntilTimeout+0x36>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10a      	bne.n	8002f4e <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	2317      	movs	r3, #23
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002f48:	2317      	movs	r3, #23
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	3301      	adds	r3, #1
 8002f52:	d04d      	beq.n	8002ff0 <SPI_WaitFifoStateUntilTimeout+0xd8>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <SPI_WaitFifoStateUntilTimeout+0x52>
 8002f5a:	f7fd fb29 	bl	80005b0 <HAL_GetTick>
 8002f5e:	0002      	movs	r2, r0
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	1ad2      	subs	r2, r2, r3
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d342      	bcc.n	8002ff0 <SPI_WaitFifoStateUntilTimeout+0xd8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	6812      	ldr	r2, [r2, #0]
 8002f72:	6852      	ldr	r2, [r2, #4]
 8002f74:	21e0      	movs	r1, #224	; 0xe0
 8002f76:	438a      	bics	r2, r1
 8002f78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	2382      	movs	r3, #130	; 0x82
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d113      	bne.n	8002fae <SPI_WaitFifoStateUntilTimeout+0x96>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d005      	beq.n	8002f9e <SPI_WaitFifoStateUntilTimeout+0x86>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689a      	ldr	r2, [r3, #8]
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d107      	bne.n	8002fae <SPI_WaitFifoStateUntilTimeout+0x96>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	6812      	ldr	r2, [r2, #0]
 8002fa8:	2140      	movs	r1, #64	; 0x40
 8002faa:	438a      	bics	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	019b      	lsls	r3, r3, #6
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d110      	bne.n	8002fdc <SPI_WaitFifoStateUntilTimeout+0xc4>
        {
          SPI_RESET_CRC(hspi);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	6812      	ldr	r2, [r2, #0]
 8002fc4:	4911      	ldr	r1, [pc, #68]	; (800300c <SPI_WaitFifoStateUntilTimeout+0xf4>)
 8002fc6:	400a      	ands	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	2180      	movs	r1, #128	; 0x80
 8002fd6:	0189      	lsls	r1, r1, #6
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	225d      	movs	r2, #93	; 0x5d
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	225c      	movs	r2, #92	; 0x5c
 8002fe8:	2100      	movs	r1, #0
 8002fea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e008      	b.n	8003002 <SPI_WaitFifoStateUntilTimeout+0xea>
  while ((hspi->Instance->SR & Fifo) != State)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d193      	bne.n	8002f28 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	0018      	movs	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	b006      	add	sp, #24
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	ffffdfff 	.word	0xffffdfff

08003010 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af02      	add	r7, sp, #8
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	2382      	movs	r3, #130	; 0x82
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	429a      	cmp	r2, r3
 8003026:	d113      	bne.n	8003050 <SPI_EndRxTransaction+0x40>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	2380      	movs	r3, #128	; 0x80
 800302e:	021b      	lsls	r3, r3, #8
 8003030:	429a      	cmp	r2, r3
 8003032:	d005      	beq.n	8003040 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	429a      	cmp	r2, r3
 800303e:	d107      	bne.n	8003050 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	2140      	movs	r1, #64	; 0x40
 800304c:	438a      	bics	r2, r1
 800304e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	0013      	movs	r3, r2
 800305a:	2200      	movs	r2, #0
 800305c:	2180      	movs	r1, #128	; 0x80
 800305e:	f7ff feed 	bl	8002e3c <SPI_WaitFlagStateUntilTimeout>
 8003062:	1e03      	subs	r3, r0, #0
 8003064:	d007      	beq.n	8003076 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306a:	2220      	movs	r2, #32
 800306c:	431a      	orrs	r2, r3
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e026      	b.n	80030c4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	2382      	movs	r3, #130	; 0x82
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	429a      	cmp	r2, r3
 8003080:	d11f      	bne.n	80030c2 <SPI_EndRxTransaction+0xb2>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689a      	ldr	r2, [r3, #8]
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	021b      	lsls	r3, r3, #8
 800308a:	429a      	cmp	r2, r3
 800308c:	d005      	beq.n	800309a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	429a      	cmp	r2, r3
 8003098:	d113      	bne.n	80030c2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	23c0      	movs	r3, #192	; 0xc0
 800309e:	00d9      	lsls	r1, r3, #3
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	0013      	movs	r3, r2
 80030a8:	2200      	movs	r2, #0
 80030aa:	f7ff ff35 	bl	8002f18 <SPI_WaitFifoStateUntilTimeout>
 80030ae:	1e03      	subs	r3, r0, #0
 80030b0:	d007      	beq.n	80030c2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030b6:	2220      	movs	r2, #32
 80030b8:	431a      	orrs	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e000      	b.n	80030c4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b004      	add	sp, #16
 80030ca:	bd80      	pop	{r7, pc}

080030cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030d8:	68ba      	ldr	r2, [r7, #8]
 80030da:	23c0      	movs	r3, #192	; 0xc0
 80030dc:	0159      	lsls	r1, r3, #5
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	0013      	movs	r3, r2
 80030e6:	2200      	movs	r2, #0
 80030e8:	f7ff ff16 	bl	8002f18 <SPI_WaitFifoStateUntilTimeout>
 80030ec:	1e03      	subs	r3, r0, #0
 80030ee:	d007      	beq.n	8003100 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f4:	2220      	movs	r2, #32
 80030f6:	431a      	orrs	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e027      	b.n	8003150 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	0013      	movs	r3, r2
 800310a:	2200      	movs	r2, #0
 800310c:	2180      	movs	r1, #128	; 0x80
 800310e:	f7ff fe95 	bl	8002e3c <SPI_WaitFlagStateUntilTimeout>
 8003112:	1e03      	subs	r3, r0, #0
 8003114:	d007      	beq.n	8003126 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800311a:	2220      	movs	r2, #32
 800311c:	431a      	orrs	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e014      	b.n	8003150 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	23c0      	movs	r3, #192	; 0xc0
 800312a:	00d9      	lsls	r1, r3, #3
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	0013      	movs	r3, r2
 8003134:	2200      	movs	r2, #0
 8003136:	f7ff feef 	bl	8002f18 <SPI_WaitFifoStateUntilTimeout>
 800313a:	1e03      	subs	r3, r0, #0
 800313c:	d007      	beq.n	800314e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003142:	2220      	movs	r2, #32
 8003144:	431a      	orrs	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e000      	b.n	8003150 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	0018      	movs	r0, r3
 8003152:	46bd      	mov	sp, r7
 8003154:	b004      	add	sp, #16
 8003156:	bd80      	pop	{r7, pc}

08003158 <ResolveTwosCompliment2_8>:
	int x = (int)data;
	if (x >= 0x80) x -= 0xFF;
	return x;
}
// Resolving Two's Compliment at two bytes
int ResolveTwosCompliment2_8 (uint8_t hiByte, uint8_t loByte) {
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	0002      	movs	r2, r0
 8003160:	1dfb      	adds	r3, r7, #7
 8003162:	701a      	strb	r2, [r3, #0]
 8003164:	1dbb      	adds	r3, r7, #6
 8003166:	1c0a      	adds	r2, r1, #0
 8003168:	701a      	strb	r2, [r3, #0]
	int x = (int)hiByte*0x100;
 800316a:	1dfb      	adds	r3, r7, #7
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	60fb      	str	r3, [r7, #12]
	if (x >= 0x8000) x -= 0xFFFF;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4a08      	ldr	r2, [pc, #32]	; (8003198 <ResolveTwosCompliment2_8+0x40>)
 8003176:	4293      	cmp	r3, r2
 8003178:	dd04      	ble.n	8003184 <ResolveTwosCompliment2_8+0x2c>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4a07      	ldr	r2, [pc, #28]	; (800319c <ResolveTwosCompliment2_8+0x44>)
 800317e:	4694      	mov	ip, r2
 8003180:	4463      	add	r3, ip
 8003182:	60fb      	str	r3, [r7, #12]
	x += loByte;
 8003184:	1dbb      	adds	r3, r7, #6
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	18d3      	adds	r3, r2, r3
 800318c:	60fb      	str	r3, [r7, #12]
	return x;
 800318e:	68fb      	ldr	r3, [r7, #12]
}
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	b004      	add	sp, #16
 8003196:	bd80      	pop	{r7, pc}
 8003198:	00007fff 	.word	0x00007fff
 800319c:	ffff0001 	.word	0xffff0001

080031a0 <SPI_TxSensor>:
// Send Data to SensorX
void SPI_TxSensor (SPI_HandleTypeDef *hspi1,uint8_t data[], int len){
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80031ac:	2390      	movs	r3, #144	; 0x90
 80031ae:	05db      	lsls	r3, r3, #23
 80031b0:	2200      	movs	r2, #0
 80031b2:	2110      	movs	r1, #16
 80031b4:	0018      	movs	r0, r3
 80031b6:	f7fe fbc7 	bl	8001948 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi1,data,(uint16_t)len,SPI_TimeOut);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	b29a      	uxth	r2, r3
 80031be:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <SPI_TxSensor+0x50>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f7ff f975 	bl	80024b4 <HAL_SPI_Transmit>
	while( hspi1->State == HAL_SPI_STATE_BUSY );
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	225d      	movs	r2, #93	; 0x5d
 80031d0:	5c9b      	ldrb	r3, [r3, r2]
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d0f9      	beq.n	80031cc <SPI_TxSensor+0x2c>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80031d8:	2390      	movs	r3, #144	; 0x90
 80031da:	05db      	lsls	r3, r3, #23
 80031dc:	2201      	movs	r2, #1
 80031de:	2110      	movs	r1, #16
 80031e0:	0018      	movs	r0, r3
 80031e2:	f7fe fbb1 	bl	8001948 <HAL_GPIO_WritePin>
}
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b004      	add	sp, #16
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	20000014 	.word	0x20000014

080031f4 <SPI_RxSensor>:
// Read Data from SensorX
uint8_t SPI_RxSensor (SPI_HandleTypeDef *hspi1,uint8_t adress) {
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	000a      	movs	r2, r1
 80031fe:	1cfb      	adds	r3, r7, #3
 8003200:	701a      	strb	r2, [r3, #0]
	uint8_t rxData;
	adress += 0x80;
 8003202:	1cfb      	adds	r3, r7, #3
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	3b80      	subs	r3, #128	; 0x80
 8003208:	b2da      	uxtb	r2, r3
 800320a:	1cfb      	adds	r3, r7, #3
 800320c:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 800320e:	2390      	movs	r3, #144	; 0x90
 8003210:	05db      	lsls	r3, r3, #23
 8003212:	2200      	movs	r2, #0
 8003214:	2110      	movs	r1, #16
 8003216:	0018      	movs	r0, r3
 8003218:	f7fe fb96 	bl	8001948 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi1,&adress,1,SPI_TimeOut);
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <SPI_RxSensor+0x70>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	1cf9      	adds	r1, r7, #3
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f7ff f945 	bl	80024b4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi1,&rxData,1,SPI_TimeOut);
 800322a:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <SPI_RxSensor+0x70>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	220f      	movs	r2, #15
 8003230:	18b9      	adds	r1, r7, r2
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f7ff faa7 	bl	8002788 <HAL_SPI_Receive>
	while( hspi1->State == HAL_SPI_STATE_BUSY );
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	225d      	movs	r2, #93	; 0x5d
 8003240:	5c9b      	ldrb	r3, [r3, r2]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d0f9      	beq.n	800323c <SPI_RxSensor+0x48>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8003248:	2390      	movs	r3, #144	; 0x90
 800324a:	05db      	lsls	r3, r3, #23
 800324c:	2201      	movs	r2, #1
 800324e:	2110      	movs	r1, #16
 8003250:	0018      	movs	r0, r3
 8003252:	f7fe fb79 	bl	8001948 <HAL_GPIO_WritePin>

	return rxData;
 8003256:	230f      	movs	r3, #15
 8003258:	18fb      	adds	r3, r7, r3
 800325a:	781b      	ldrb	r3, [r3, #0]
}
 800325c:	0018      	movs	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	b004      	add	sp, #16
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20000014 	.word	0x20000014

08003268 <ResolveAcceleration>:
		HAL_SPI_Receive(hspi1,&rxData[i],sizeof(uint8_t),SPI_TimeOut);
	}
	return rxData;
}*/
// Resolve Acceleration from Two's Compliment to float in mg
float ResolveAcceleration (uint8_t hiByte, uint8_t loByte) {
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	0002      	movs	r2, r0
 8003270:	1dfb      	adds	r3, r7, #7
 8003272:	701a      	strb	r2, [r3, #0]
 8003274:	1dbb      	adds	r3, r7, #6
 8003276:	1c0a      	adds	r2, r1, #0
 8003278:	701a      	strb	r2, [r3, #0]
	extern float sensorLsbValue;
	return ResolveTwosCompliment2_8(hiByte, loByte)*sensorLsbValue;
 800327a:	1dbb      	adds	r3, r7, #6
 800327c:	781a      	ldrb	r2, [r3, #0]
 800327e:	1dfb      	adds	r3, r7, #7
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	0011      	movs	r1, r2
 8003284:	0018      	movs	r0, r3
 8003286:	f7ff ff67 	bl	8003158 <ResolveTwosCompliment2_8>
 800328a:	0003      	movs	r3, r0
 800328c:	0018      	movs	r0, r3
 800328e:	f7fd f8e5 	bl	800045c <__aeabi_i2f>
 8003292:	1c02      	adds	r2, r0, #0
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <ResolveAcceleration+0x44>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	1c19      	adds	r1, r3, #0
 800329a:	1c10      	adds	r0, r2, #0
 800329c:	f7fc ffbe 	bl	800021c <__aeabi_fmul>
 80032a0:	1c03      	adds	r3, r0, #0
}
 80032a2:	1c18      	adds	r0, r3, #0
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b002      	add	sp, #8
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	46c0      	nop			; (mov r8, r8)
 80032ac:	20000010 	.word	0x20000010

080032b0 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80032b0:	b590      	push	{r4, r7, lr}
 80032b2:	b0a3      	sub	sp, #140	; 0x8c
 80032b4:	af00      	add	r7, sp, #0
	static uint8_t abc[6]={0};
	static uint8_t abd[6]={0};

//	uint8_t sensorData[4]= {SENSOR_OUT_X_H, SENSOR_OUT_X_L,0,0};
//  uint8_t sensorData[4]= {SENSOR_WHO_AM_I, SENSOR_WHO_AM_I,0,0};
	uint8_t sensorData[6]={0};
 80032b6:	2374      	movs	r3, #116	; 0x74
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	0018      	movs	r0, r3
 80032bc:	2306      	movs	r3, #6
 80032be:	001a      	movs	r2, r3
 80032c0:	2100      	movs	r1, #0
 80032c2:	f000 fca9 	bl	8003c18 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032c6:	f7fd f937 	bl	8000538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032ca:	f000 f985 	bl	80035d8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(1000);
 80032ce:	23fa      	movs	r3, #250	; 0xfa
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	0018      	movs	r0, r3
 80032d4:	f7fd f976 	bl	80005c4 <HAL_Delay>
  CanTxMsgTypeDef CanTxMsg;
  CanTxMsg.StdId = 0x00;
 80032d8:	2350      	movs	r3, #80	; 0x50
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
  CanTxMsg.ExtId = 0x00;
 80032e0:	2350      	movs	r3, #80	; 0x50
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	2200      	movs	r2, #0
 80032e6:	605a      	str	r2, [r3, #4]
  CanTxMsg.IDE = CAN_ID_STD;
 80032e8:	2350      	movs	r3, #80	; 0x50
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
  CanTxMsg.RTR = CAN_RTR_DATA;
 80032f0:	2350      	movs	r3, #80	; 0x50
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	2200      	movs	r2, #0
 80032f6:	60da      	str	r2, [r3, #12]
  CanTxMsg.DLC = 6;
 80032f8:	2350      	movs	r3, #80	; 0x50
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	2206      	movs	r2, #6
 80032fe:	611a      	str	r2, [r3, #16]
  CanRxMsg.DLC = 6;
  CanRxMsg.FMI = 0;
  CanRxMsg.FIFONumber = CAN_FIFO0;*/

  CAN_FilterConfTypeDef CanFilterConf;
  CanFilterConf.FilterIdHigh = 0x000;
 8003300:	1d3b      	adds	r3, r7, #4
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
  CanFilterConf.FilterIdLow = 0x000;
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	2200      	movs	r2, #0
 800330a:	605a      	str	r2, [r3, #4]
  CanFilterConf.FilterMaskIdHigh = 0x000;
 800330c:	1d3b      	adds	r3, r7, #4
 800330e:	2200      	movs	r2, #0
 8003310:	609a      	str	r2, [r3, #8]
  CanFilterConf.FilterMaskIdLow = 0x000;
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	2200      	movs	r2, #0
 8003316:	60da      	str	r2, [r3, #12]
  CanFilterConf.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003318:	1d3b      	adds	r3, r7, #4
 800331a:	2200      	movs	r2, #0
 800331c:	611a      	str	r2, [r3, #16]
  CanFilterConf.BankNumber = 0;
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	2200      	movs	r2, #0
 8003322:	625a      	str	r2, [r3, #36]	; 0x24
  CanFilterConf.FilterNumber = 0;
 8003324:	1d3b      	adds	r3, r7, #4
 8003326:	2200      	movs	r2, #0
 8003328:	615a      	str	r2, [r3, #20]
  CanFilterConf.FilterMode = CAN_FILTERMODE_IDLIST;
 800332a:	1d3b      	adds	r3, r7, #4
 800332c:	2201      	movs	r2, #1
 800332e:	619a      	str	r2, [r3, #24]
  CanFilterConf.FilterScale = CAN_FILTERSCALE_16BIT;
 8003330:	1d3b      	adds	r3, r7, #4
 8003332:	2200      	movs	r2, #0
 8003334:	61da      	str	r2, [r3, #28]
  CanFilterConf.FilterActivation = ENABLE;
 8003336:	1d3b      	adds	r3, r7, #4
 8003338:	2201      	movs	r2, #1
 800333a:	621a      	str	r2, [r3, #32]
  CanFilterConf.BankNumber = 0;
 800333c:	1d3b      	adds	r3, r7, #4
 800333e:	2200      	movs	r2, #0
 8003340:	625a      	str	r2, [r3, #36]	; 0x24
  hcan.pTxMsg = &CanTxMsg;
 8003342:	4b9c      	ldr	r3, [pc, #624]	; (80035b4 <main+0x304>)
 8003344:	2250      	movs	r2, #80	; 0x50
 8003346:	18ba      	adds	r2, r7, r2
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
  hcan.pRxMsg = &CanRxMsg;
 800334a:	4b9a      	ldr	r3, [pc, #616]	; (80035b4 <main+0x304>)
 800334c:	222c      	movs	r2, #44	; 0x2c
 800334e:	18ba      	adds	r2, r7, r2
 8003350:	635a      	str	r2, [r3, #52]	; 0x34

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003352:	f000 fa3d 	bl	80037d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003356:	f000 fa1d 	bl	8003794 <MX_DMA_Init>
  MX_SPI1_Init();
 800335a:	f000 f9d5 	bl	8003708 <MX_SPI1_Init>
  MX_CAN_Init();
 800335e:	f000 f98f 	bl	8003680 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  // CUBEMX-RESISTENT RECONFIG BEGIN
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8003362:	2390      	movs	r3, #144	; 0x90
 8003364:	05db      	lsls	r3, r3, #23
 8003366:	2201      	movs	r2, #1
 8003368:	2110      	movs	r1, #16
 800336a:	0018      	movs	r0, r3
 800336c:	f7fe faec 	bl	8001948 <HAL_GPIO_WritePin>
  if(HAL_CAN_ConfigFilter(&hcan,&CanFilterConf) != HAL_OK)
 8003370:	1d3a      	adds	r2, r7, #4
 8003372:	4b90      	ldr	r3, [pc, #576]	; (80035b4 <main+0x304>)
 8003374:	0011      	movs	r1, r2
 8003376:	0018      	movs	r0, r3
 8003378:	f7fd fa64 	bl	8000844 <HAL_CAN_ConfigFilter>
 800337c:	1e03      	subs	r3, r0, #0
 800337e:	d004      	beq.n	800338a <main+0xda>
    {
      /* Initialization Error */
      Error_Handler();
 8003380:	4b8d      	ldr	r3, [pc, #564]	; (80035b8 <main+0x308>)
 8003382:	219d      	movs	r1, #157	; 0x9d
 8003384:	0018      	movs	r0, r3
 8003386:	f000 fa8b 	bl	80038a0 <_Error_Handler>
  /* Sensor Config */
//  SPI_TxSensor(&hspi1, sensorConf, (uint16_t)LEN(sensorConf));
//  configurationCorrect=VerifySensorConfig(&hspi1, sensorConf, LEN(sensorConf));

//  for (int i=0; i<6;i++) abc[i] = WriteVerifySensorRegister(&hspi1,sensorConf[i*2],sensorConf[i*2+1]);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 800338a:	2390      	movs	r3, #144	; 0x90
 800338c:	05db      	lsls	r3, r3, #23
 800338e:	2200      	movs	r2, #0
 8003390:	2110      	movs	r1, #16
 8003392:	0018      	movs	r0, r3
 8003394:	f7fe fad8 	bl	8001948 <HAL_GPIO_WritePin>
  	  HAL_SPI_Transmit(&hspi1,&sensorConf[0],2,50);
 8003398:	4988      	ldr	r1, [pc, #544]	; (80035bc <main+0x30c>)
 800339a:	4889      	ldr	r0, [pc, #548]	; (80035c0 <main+0x310>)
 800339c:	2332      	movs	r3, #50	; 0x32
 800339e:	2202      	movs	r2, #2
 80033a0:	f7ff f888 	bl	80024b4 <HAL_SPI_Transmit>
  	while( hspi1.State == HAL_SPI_STATE_BUSY );
 80033a4:	46c0      	nop			; (mov r8, r8)
 80033a6:	4b86      	ldr	r3, [pc, #536]	; (80035c0 <main+0x310>)
 80033a8:	225d      	movs	r2, #93	; 0x5d
 80033aa:	5c9b      	ldrb	r3, [r3, r2]
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d0f9      	beq.n	80033a6 <main+0xf6>
  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80033b2:	2390      	movs	r3, #144	; 0x90
 80033b4:	05db      	lsls	r3, r3, #23
 80033b6:	2201      	movs	r2, #1
 80033b8:	2110      	movs	r1, #16
 80033ba:	0018      	movs	r0, r3
 80033bc:	f7fe fac4 	bl	8001948 <HAL_GPIO_WritePin>
  	  //SPI_TxSensor(&hspi1, &sensorConf[2*i], 2);
//  	  HAL_Delay(1000);

  for (int i=1; i<7;i++){
 80033c0:	2301      	movs	r3, #1
 80033c2:	2284      	movs	r2, #132	; 0x84
 80033c4:	18ba      	adds	r2, r7, r2
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	e024      	b.n	8003414 <main+0x164>
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
//	  HAL_SPI_Transmit(&hspi1,&sensorConf[(2*i)],2,50);
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
	  SPI_TxSensor(&hspi1, &sensorConf[2*i], 2);
 80033ca:	2384      	movs	r3, #132	; 0x84
 80033cc:	18fb      	adds	r3, r7, r3
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	005a      	lsls	r2, r3, #1
 80033d2:	4b7a      	ldr	r3, [pc, #488]	; (80035bc <main+0x30c>)
 80033d4:	18d1      	adds	r1, r2, r3
 80033d6:	4b7a      	ldr	r3, [pc, #488]	; (80035c0 <main+0x310>)
 80033d8:	2202      	movs	r2, #2
 80033da:	0018      	movs	r0, r3
 80033dc:	f7ff fee0 	bl	80031a0 <SPI_TxSensor>
//	  abd[i-1]=sensorConf[(2*i)] + 0x80;
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
//	  HAL_SPI_Transmit(&hspi1,&abd[i-1],1,50);
//	  HAL_SPI_Receive(&hspi1,&abd[i-1],1,50);
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
	  abd[i-1] = SPI_RxSensor(&hspi1,sensorConf[2*i]);
 80033e0:	2384      	movs	r3, #132	; 0x84
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	1e5c      	subs	r4, r3, #1
 80033e8:	2384      	movs	r3, #132	; 0x84
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	4a72      	ldr	r2, [pc, #456]	; (80035bc <main+0x30c>)
 80033f2:	5cd2      	ldrb	r2, [r2, r3]
 80033f4:	4b72      	ldr	r3, [pc, #456]	; (80035c0 <main+0x310>)
 80033f6:	0011      	movs	r1, r2
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7ff fefb 	bl	80031f4 <SPI_RxSensor>
 80033fe:	0003      	movs	r3, r0
 8003400:	001a      	movs	r2, r3
 8003402:	4b70      	ldr	r3, [pc, #448]	; (80035c4 <main+0x314>)
 8003404:	551a      	strb	r2, [r3, r4]
  for (int i=1; i<7;i++){
 8003406:	2384      	movs	r3, #132	; 0x84
 8003408:	18fb      	adds	r3, r7, r3
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3301      	adds	r3, #1
 800340e:	2284      	movs	r2, #132	; 0x84
 8003410:	18ba      	adds	r2, r7, r2
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	2384      	movs	r3, #132	; 0x84
 8003416:	18fb      	adds	r3, r7, r3
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2b06      	cmp	r3, #6
 800341c:	ddd5      	ble.n	80033ca <main+0x11a>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	015b      	lsls	r3, r3, #5
 8003422:	4a69      	ldr	r2, [pc, #420]	; (80035c8 <main+0x318>)
 8003424:	0019      	movs	r1, r3
 8003426:	0010      	movs	r0, r2
 8003428:	f7fe faab 	bl	8001982 <HAL_GPIO_TogglePin>

//	sensorData[2]=SPI_RxSensor(&hspi1,sensorData[0]);
//	sensorData[3]=SPI_RxSensor(&hspi1,sensorData[1]);

	sensorData[0]=0xA8;
 800342c:	2374      	movs	r3, #116	; 0x74
 800342e:	18fb      	adds	r3, r7, r3
 8003430:	22a8      	movs	r2, #168	; 0xa8
 8003432:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8003434:	2390      	movs	r3, #144	; 0x90
 8003436:	05db      	lsls	r3, r3, #23
 8003438:	2200      	movs	r2, #0
 800343a:	2110      	movs	r1, #16
 800343c:	0018      	movs	r0, r3
 800343e:	f7fe fa83 	bl	8001948 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&sensorData[0],1,5);
 8003442:	2374      	movs	r3, #116	; 0x74
 8003444:	18f9      	adds	r1, r7, r3
 8003446:	485e      	ldr	r0, [pc, #376]	; (80035c0 <main+0x310>)
 8003448:	2305      	movs	r3, #5
 800344a:	2201      	movs	r2, #1
 800344c:	f7ff f832 	bl	80024b4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,&sensorData[0],6,5);
 8003450:	2374      	movs	r3, #116	; 0x74
 8003452:	18f9      	adds	r1, r7, r3
 8003454:	485a      	ldr	r0, [pc, #360]	; (80035c0 <main+0x310>)
 8003456:	2305      	movs	r3, #5
 8003458:	2206      	movs	r2, #6
 800345a:	f7ff f995 	bl	8002788 <HAL_SPI_Receive>
	while( hspi1.State == HAL_SPI_STATE_BUSY );
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	4b57      	ldr	r3, [pc, #348]	; (80035c0 <main+0x310>)
 8003462:	225d      	movs	r2, #93	; 0x5d
 8003464:	5c9b      	ldrb	r3, [r3, r2]
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d0f9      	beq.n	8003460 <main+0x1b0>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 800346c:	2390      	movs	r3, #144	; 0x90
 800346e:	05db      	lsls	r3, r3, #23
 8003470:	2201      	movs	r2, #1
 8003472:	2110      	movs	r1, #16
 8003474:	0018      	movs	r0, r3
 8003476:	f7fe fa67 	bl	8001948 <HAL_GPIO_WritePin>

	for (int i=0; i<6; i++) {
 800347a:	2300      	movs	r3, #0
 800347c:	2280      	movs	r2, #128	; 0x80
 800347e:	18ba      	adds	r2, r7, r2
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	e01e      	b.n	80034c2 <main+0x212>
		CanTxMsg.Data[i] = sensorData[i] ;
 8003484:	2374      	movs	r3, #116	; 0x74
 8003486:	18fa      	adds	r2, r7, r3
 8003488:	2380      	movs	r3, #128	; 0x80
 800348a:	18fb      	adds	r3, r7, r3
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	18d3      	adds	r3, r2, r3
 8003490:	7819      	ldrb	r1, [r3, #0]
 8003492:	2350      	movs	r3, #80	; 0x50
 8003494:	18fa      	adds	r2, r7, r3
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	18d3      	adds	r3, r2, r3
 800349e:	3314      	adds	r3, #20
 80034a0:	1c0a      	adds	r2, r1, #0
 80034a2:	701a      	strb	r2, [r3, #0]
		sensorData[i]=0;
 80034a4:	2374      	movs	r3, #116	; 0x74
 80034a6:	18fa      	adds	r2, r7, r3
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	18d3      	adds	r3, r2, r3
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++) {
 80034b4:	2380      	movs	r3, #128	; 0x80
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3301      	adds	r3, #1
 80034bc:	2280      	movs	r2, #128	; 0x80
 80034be:	18ba      	adds	r2, r7, r2
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	18fb      	adds	r3, r7, r3
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b05      	cmp	r3, #5
 80034ca:	dddb      	ble.n	8003484 <main+0x1d4>
	}

	if(HAL_CAN_Transmit(&hcan,10) != HAL_OK)
 80034cc:	4b39      	ldr	r3, [pc, #228]	; (80035b4 <main+0x304>)
 80034ce:	210a      	movs	r1, #10
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7fd faa9 	bl	8000a28 <HAL_CAN_Transmit>
 80034d6:	1e03      	subs	r3, r0, #0
 80034d8:	d004      	beq.n	80034e4 <main+0x234>
	    {
	      /* CAN_Transmit_Error */
	      Error_Handler();
 80034da:	4b37      	ldr	r3, [pc, #220]	; (80035b8 <main+0x308>)
 80034dc:	21d6      	movs	r1, #214	; 0xd6
 80034de:	0018      	movs	r0, r3
 80034e0:	f000 f9de 	bl	80038a0 <_Error_Handler>
	    }

	if(HAL_CAN_GetState(&hcan) != HAL_CAN_STATE_READY)
 80034e4:	4b33      	ldr	r3, [pc, #204]	; (80035b4 <main+0x304>)
 80034e6:	0018      	movs	r0, r3
 80034e8:	f7fd fe74 	bl	80011d4 <HAL_CAN_GetState>
 80034ec:	0003      	movs	r3, r0
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d001      	beq.n	80034f6 <main+0x246>
	  {
	    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e059      	b.n	80035aa <main+0x2fa>
	  }

	if(HAL_CAN_Receive(&hcan,CAN_FIFO0,10) != HAL_OK)
 80034f6:	4b2f      	ldr	r3, [pc, #188]	; (80035b4 <main+0x304>)
 80034f8:	220a      	movs	r2, #10
 80034fa:	2100      	movs	r1, #0
 80034fc:	0018      	movs	r0, r3
 80034fe:	f7fd fc53 	bl	8000da8 <HAL_CAN_Receive>
 8003502:	1e03      	subs	r3, r0, #0
 8003504:	d004      	beq.n	8003510 <main+0x260>
	    {
	      /* CAN_Receive_Error */
	      Error_Handler();
 8003506:	4b2c      	ldr	r3, [pc, #176]	; (80035b8 <main+0x308>)
 8003508:	21e1      	movs	r1, #225	; 0xe1
 800350a:	0018      	movs	r0, r3
 800350c:	f000 f9c8 	bl	80038a0 <_Error_Handler>
	    }

	if(HAL_CAN_GetState(&hcan) != HAL_CAN_STATE_READY)
 8003510:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <main+0x304>)
 8003512:	0018      	movs	r0, r3
 8003514:	f7fd fe5e 	bl	80011d4 <HAL_CAN_GetState>
 8003518:	0003      	movs	r3, r0
 800351a:	2b01      	cmp	r3, #1
 800351c:	d001      	beq.n	8003522 <main+0x272>
	  {
	    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e043      	b.n	80035aa <main+0x2fa>
	  }
	for (int i=0; i<6; i++) {
 8003522:	2300      	movs	r3, #0
 8003524:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003526:	e00e      	b.n	8003546 <main+0x296>
			sensorData[i] = CanRxMsg.Data[i] ;
 8003528:	232c      	movs	r3, #44	; 0x2c
 800352a:	18fa      	adds	r2, r7, r3
 800352c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800352e:	18d3      	adds	r3, r2, r3
 8003530:	3314      	adds	r3, #20
 8003532:	7819      	ldrb	r1, [r3, #0]
 8003534:	2374      	movs	r3, #116	; 0x74
 8003536:	18fa      	adds	r2, r7, r3
 8003538:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800353a:	18d3      	adds	r3, r2, r3
 800353c:	1c0a      	adds	r2, r1, #0
 800353e:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<6; i++) {
 8003540:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003542:	3301      	adds	r3, #1
 8003544:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003546:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003548:	2b05      	cmp	r3, #5
 800354a:	dded      	ble.n	8003528 <main+0x278>
	}
	sensorOutputX = ResolveAcceleration(sensorData[1],sensorData[0]);
 800354c:	2374      	movs	r3, #116	; 0x74
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	785a      	ldrb	r2, [r3, #1]
 8003552:	2374      	movs	r3, #116	; 0x74
 8003554:	18fb      	adds	r3, r7, r3
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	0019      	movs	r1, r3
 800355a:	0010      	movs	r0, r2
 800355c:	f7ff fe84 	bl	8003268 <ResolveAcceleration>
 8003560:	1c02      	adds	r2, r0, #0
 8003562:	4b1a      	ldr	r3, [pc, #104]	; (80035cc <main+0x31c>)
 8003564:	601a      	str	r2, [r3, #0]
	sensorOutputY = ResolveAcceleration(sensorData[3],sensorData[2]);
 8003566:	2374      	movs	r3, #116	; 0x74
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	78da      	ldrb	r2, [r3, #3]
 800356c:	2374      	movs	r3, #116	; 0x74
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	789b      	ldrb	r3, [r3, #2]
 8003572:	0019      	movs	r1, r3
 8003574:	0010      	movs	r0, r2
 8003576:	f7ff fe77 	bl	8003268 <ResolveAcceleration>
 800357a:	1c02      	adds	r2, r0, #0
 800357c:	4b14      	ldr	r3, [pc, #80]	; (80035d0 <main+0x320>)
 800357e:	601a      	str	r2, [r3, #0]
	sensorOutputZ = ResolveAcceleration(sensorData[5],sensorData[4]);
 8003580:	2374      	movs	r3, #116	; 0x74
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	795a      	ldrb	r2, [r3, #5]
 8003586:	2374      	movs	r3, #116	; 0x74
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	791b      	ldrb	r3, [r3, #4]
 800358c:	0019      	movs	r1, r3
 800358e:	0010      	movs	r0, r2
 8003590:	f7ff fe6a 	bl	8003268 <ResolveAcceleration>
 8003594:	1c02      	adds	r2, r0, #0
 8003596:	4b0f      	ldr	r3, [pc, #60]	; (80035d4 <main+0x324>)
 8003598:	601a      	str	r2, [r3, #0]


	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 800359a:	2380      	movs	r3, #128	; 0x80
 800359c:	015b      	lsls	r3, r3, #5
 800359e:	4a0a      	ldr	r2, [pc, #40]	; (80035c8 <main+0x318>)
 80035a0:	0019      	movs	r1, r3
 80035a2:	0010      	movs	r0, r2
 80035a4:	f7fe f9ed 	bl	8001982 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 80035a8:	e739      	b.n	800341e <main+0x16e>
  /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */

}
 80035aa:	0018      	movs	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b023      	add	sp, #140	; 0x8c
 80035b0:	bd90      	pop	{r4, r7, pc}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	20000054 	.word	0x20000054
 80035b8:	08003c60 	.word	0x08003c60
 80035bc:	20000000 	.word	0x20000000
 80035c0:	20000098 	.word	0x20000098
 80035c4:	20000038 	.word	0x20000038
 80035c8:	48000400 	.word	0x48000400
 80035cc:	20000040 	.word	0x20000040
 80035d0:	20000044 	.word	0x20000044
 80035d4:	20000048 	.word	0x20000048

080035d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b092      	sub	sp, #72	; 0x48
 80035dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80035de:	2314      	movs	r3, #20
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	2220      	movs	r2, #32
 80035e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80035e6:	2314      	movs	r3, #20
 80035e8:	18fb      	adds	r3, r7, r3
 80035ea:	2201      	movs	r2, #1
 80035ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80035ee:	2314      	movs	r3, #20
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	2200      	movs	r2, #0
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035f6:	2314      	movs	r3, #20
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	0018      	movs	r0, r3
 80035fc:	f7fe f9d4 	bl	80019a8 <HAL_RCC_OscConfig>
 8003600:	1e03      	subs	r3, r0, #0
 8003602:	d007      	beq.n	8003614 <SystemClock_Config+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003604:	230c      	movs	r3, #12
 8003606:	33ff      	adds	r3, #255	; 0xff
 8003608:	001a      	movs	r2, r3
 800360a:	4b1c      	ldr	r3, [pc, #112]	; (800367c <SystemClock_Config+0xa4>)
 800360c:	0011      	movs	r1, r2
 800360e:	0018      	movs	r0, r3
 8003610:	f000 f946 	bl	80038a0 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003614:	1d3b      	adds	r3, r7, #4
 8003616:	2207      	movs	r2, #7
 8003618:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800361a:	1d3b      	adds	r3, r7, #4
 800361c:	2203      	movs	r2, #3
 800361e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003620:	1d3b      	adds	r3, r7, #4
 8003622:	2200      	movs	r2, #0
 8003624:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	2200      	movs	r2, #0
 800362a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800362c:	1d3b      	adds	r3, r7, #4
 800362e:	2101      	movs	r1, #1
 8003630:	0018      	movs	r0, r3
 8003632:	f7fe fd17 	bl	8002064 <HAL_RCC_ClockConfig>
 8003636:	1e03      	subs	r3, r0, #0
 8003638:	d006      	beq.n	8003648 <SystemClock_Config+0x70>
  {
    _Error_Handler(__FILE__, __LINE__);
 800363a:	238c      	movs	r3, #140	; 0x8c
 800363c:	005a      	lsls	r2, r3, #1
 800363e:	4b0f      	ldr	r3, [pc, #60]	; (800367c <SystemClock_Config+0xa4>)
 8003640:	0011      	movs	r1, r2
 8003642:	0018      	movs	r0, r3
 8003644:	f000 f92c 	bl	80038a0 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003648:	f7fe fe92 	bl	8002370 <HAL_RCC_GetHCLKFreq>
 800364c:	0002      	movs	r2, r0
 800364e:	23fa      	movs	r3, #250	; 0xfa
 8003650:	0099      	lsls	r1, r3, #2
 8003652:	0010      	movs	r0, r2
 8003654:	f7fc fd56 	bl	8000104 <__udivsi3>
 8003658:	0003      	movs	r3, r0
 800365a:	0018      	movs	r0, r3
 800365c:	f7fd fe94 	bl	8001388 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003660:	2004      	movs	r0, #4
 8003662:	f7fd fe9f 	bl	80013a4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003666:	2301      	movs	r3, #1
 8003668:	425b      	negs	r3, r3
 800366a:	2200      	movs	r2, #0
 800366c:	2100      	movs	r1, #0
 800366e:	0018      	movs	r0, r3
 8003670:	f7fd fe64 	bl	800133c <HAL_NVIC_SetPriority>
}
 8003674:	46c0      	nop			; (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	b012      	add	sp, #72	; 0x48
 800367a:	bd80      	pop	{r7, pc}
 800367c:	08003c60 	.word	0x08003c60

08003680 <MX_CAN_Init>:

/* CAN init function */
static void MX_CAN_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0

  hcan.Instance = CAN;
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <MX_CAN_Init+0x7c>)
 8003686:	4a1e      	ldr	r2, [pc, #120]	; (8003700 <MX_CAN_Init+0x80>)
 8003688:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 800368a:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <MX_CAN_Init+0x7c>)
 800368c:	2206      	movs	r2, #6
 800368e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_SILENT_LOOPBACK;
 8003690:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <MX_CAN_Init+0x7c>)
 8003692:	22c0      	movs	r2, #192	; 0xc0
 8003694:	0612      	lsls	r2, r2, #24
 8003696:	609a      	str	r2, [r3, #8]
  hcan.Init.SJW = CAN_SJW_2TQ;
 8003698:	4b18      	ldr	r3, [pc, #96]	; (80036fc <MX_CAN_Init+0x7c>)
 800369a:	2280      	movs	r2, #128	; 0x80
 800369c:	0452      	lsls	r2, r2, #17
 800369e:	60da      	str	r2, [r3, #12]
  hcan.Init.BS1 = CAN_BS1_4TQ;
 80036a0:	4b16      	ldr	r3, [pc, #88]	; (80036fc <MX_CAN_Init+0x7c>)
 80036a2:	22c0      	movs	r2, #192	; 0xc0
 80036a4:	0292      	lsls	r2, r2, #10
 80036a6:	611a      	str	r2, [r3, #16]
  hcan.Init.BS2 = CAN_BS2_2TQ;
 80036a8:	4b14      	ldr	r3, [pc, #80]	; (80036fc <MX_CAN_Init+0x7c>)
 80036aa:	2280      	movs	r2, #128	; 0x80
 80036ac:	0352      	lsls	r2, r2, #13
 80036ae:	615a      	str	r2, [r3, #20]
  hcan.Init.TTCM = DISABLE;
 80036b0:	4b12      	ldr	r3, [pc, #72]	; (80036fc <MX_CAN_Init+0x7c>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	619a      	str	r2, [r3, #24]
  hcan.Init.ABOM = DISABLE;
 80036b6:	4b11      	ldr	r3, [pc, #68]	; (80036fc <MX_CAN_Init+0x7c>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	61da      	str	r2, [r3, #28]
  hcan.Init.AWUM = DISABLE;
 80036bc:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <MX_CAN_Init+0x7c>)
 80036be:	2200      	movs	r2, #0
 80036c0:	621a      	str	r2, [r3, #32]
  hcan.Init.NART = DISABLE;
 80036c2:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <MX_CAN_Init+0x7c>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24
  hcan.Init.RFLM = DISABLE;
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <MX_CAN_Init+0x7c>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	629a      	str	r2, [r3, #40]	; 0x28
  hcan.Init.TXFP = DISABLE;
 80036ce:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <MX_CAN_Init+0x7c>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_Delay(100);
 80036d4:	2064      	movs	r0, #100	; 0x64
 80036d6:	f7fc ff75 	bl	80005c4 <HAL_Delay>
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80036da:	4b08      	ldr	r3, [pc, #32]	; (80036fc <MX_CAN_Init+0x7c>)
 80036dc:	0018      	movs	r0, r3
 80036de:	f7fc ff8e 	bl	80005fe <HAL_CAN_Init>
 80036e2:	1e03      	subs	r3, r0, #0
 80036e4:	d006      	beq.n	80036f4 <MX_CAN_Init+0x74>
  {
    _Error_Handler(__FILE__, __LINE__);
 80036e6:	239d      	movs	r3, #157	; 0x9d
 80036e8:	005a      	lsls	r2, r3, #1
 80036ea:	4b06      	ldr	r3, [pc, #24]	; (8003704 <MX_CAN_Init+0x84>)
 80036ec:	0011      	movs	r1, r2
 80036ee:	0018      	movs	r0, r3
 80036f0:	f000 f8d6 	bl	80038a0 <_Error_Handler>
  }

}
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	20000054 	.word	0x20000054
 8003700:	40006400 	.word	0x40006400
 8003704:	08003c60 	.word	0x08003c60

08003708 <MX_SPI1_Init>:

/* SPI1 init function */
static void MX_SPI1_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800370c:	4b1e      	ldr	r3, [pc, #120]	; (8003788 <MX_SPI1_Init+0x80>)
 800370e:	4a1f      	ldr	r2, [pc, #124]	; (800378c <MX_SPI1_Init+0x84>)
 8003710:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003712:	4b1d      	ldr	r3, [pc, #116]	; (8003788 <MX_SPI1_Init+0x80>)
 8003714:	2282      	movs	r2, #130	; 0x82
 8003716:	0052      	lsls	r2, r2, #1
 8003718:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800371a:	4b1b      	ldr	r3, [pc, #108]	; (8003788 <MX_SPI1_Init+0x80>)
 800371c:	2200      	movs	r2, #0
 800371e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003720:	4b19      	ldr	r3, [pc, #100]	; (8003788 <MX_SPI1_Init+0x80>)
 8003722:	22e0      	movs	r2, #224	; 0xe0
 8003724:	00d2      	lsls	r2, r2, #3
 8003726:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003728:	4b17      	ldr	r3, [pc, #92]	; (8003788 <MX_SPI1_Init+0x80>)
 800372a:	2202      	movs	r2, #2
 800372c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800372e:	4b16      	ldr	r3, [pc, #88]	; (8003788 <MX_SPI1_Init+0x80>)
 8003730:	2201      	movs	r2, #1
 8003732:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003734:	4b14      	ldr	r3, [pc, #80]	; (8003788 <MX_SPI1_Init+0x80>)
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800373c:	4b12      	ldr	r3, [pc, #72]	; (8003788 <MX_SPI1_Init+0x80>)
 800373e:	2210      	movs	r2, #16
 8003740:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003742:	4b11      	ldr	r3, [pc, #68]	; (8003788 <MX_SPI1_Init+0x80>)
 8003744:	2200      	movs	r2, #0
 8003746:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003748:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <MX_SPI1_Init+0x80>)
 800374a:	2200      	movs	r2, #0
 800374c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800374e:	4b0e      	ldr	r3, [pc, #56]	; (8003788 <MX_SPI1_Init+0x80>)
 8003750:	2200      	movs	r2, #0
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003754:	4b0c      	ldr	r3, [pc, #48]	; (8003788 <MX_SPI1_Init+0x80>)
 8003756:	2207      	movs	r2, #7
 8003758:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800375a:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <MX_SPI1_Init+0x80>)
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003760:	4b09      	ldr	r3, [pc, #36]	; (8003788 <MX_SPI1_Init+0x80>)
 8003762:	2200      	movs	r2, #0
 8003764:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003766:	4b08      	ldr	r3, [pc, #32]	; (8003788 <MX_SPI1_Init+0x80>)
 8003768:	0018      	movs	r0, r3
 800376a:	f7fe fe0b 	bl	8002384 <HAL_SPI_Init>
 800376e:	1e03      	subs	r3, r0, #0
 8003770:	d006      	beq.n	8003780 <MX_SPI1_Init+0x78>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003772:	23aa      	movs	r3, #170	; 0xaa
 8003774:	005a      	lsls	r2, r3, #1
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <MX_SPI1_Init+0x88>)
 8003778:	0011      	movs	r1, r2
 800377a:	0018      	movs	r0, r3
 800377c:	f000 f890 	bl	80038a0 <_Error_Handler>
  }

}
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	20000098 	.word	0x20000098
 800378c:	40013000 	.word	0x40013000
 8003790:	08003c60 	.word	0x08003c60

08003794 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800379a:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <MX_DMA_Init+0x38>)
 800379c:	4a0b      	ldr	r2, [pc, #44]	; (80037cc <MX_DMA_Init+0x38>)
 800379e:	6952      	ldr	r2, [r2, #20]
 80037a0:	2101      	movs	r1, #1
 80037a2:	430a      	orrs	r2, r1
 80037a4:	615a      	str	r2, [r3, #20]
 80037a6:	4b09      	ldr	r3, [pc, #36]	; (80037cc <MX_DMA_Init+0x38>)
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	2201      	movs	r2, #1
 80037ac:	4013      	ands	r3, r2
 80037ae:	607b      	str	r3, [r7, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 80037b2:	2200      	movs	r2, #0
 80037b4:	2100      	movs	r1, #0
 80037b6:	200a      	movs	r0, #10
 80037b8:	f7fd fdc0 	bl	800133c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 80037bc:	200a      	movs	r0, #10
 80037be:	f7fd fdd3 	bl	8001368 <HAL_NVIC_EnableIRQ>

}
 80037c2:	46c0      	nop			; (mov r8, r8)
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b002      	add	sp, #8
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	46c0      	nop			; (mov r8, r8)
 80037cc:	40021000 	.word	0x40021000

080037d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d6:	4b30      	ldr	r3, [pc, #192]	; (8003898 <MX_GPIO_Init+0xc8>)
 80037d8:	4a2f      	ldr	r2, [pc, #188]	; (8003898 <MX_GPIO_Init+0xc8>)
 80037da:	6952      	ldr	r2, [r2, #20]
 80037dc:	2180      	movs	r1, #128	; 0x80
 80037de:	0289      	lsls	r1, r1, #10
 80037e0:	430a      	orrs	r2, r1
 80037e2:	615a      	str	r2, [r3, #20]
 80037e4:	4b2c      	ldr	r3, [pc, #176]	; (8003898 <MX_GPIO_Init+0xc8>)
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	2380      	movs	r3, #128	; 0x80
 80037ea:	029b      	lsls	r3, r3, #10
 80037ec:	4013      	ands	r3, r2
 80037ee:	60bb      	str	r3, [r7, #8]
 80037f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037f2:	4b29      	ldr	r3, [pc, #164]	; (8003898 <MX_GPIO_Init+0xc8>)
 80037f4:	4a28      	ldr	r2, [pc, #160]	; (8003898 <MX_GPIO_Init+0xc8>)
 80037f6:	6952      	ldr	r2, [r2, #20]
 80037f8:	2180      	movs	r1, #128	; 0x80
 80037fa:	02c9      	lsls	r1, r1, #11
 80037fc:	430a      	orrs	r2, r1
 80037fe:	615a      	str	r2, [r3, #20]
 8003800:	4b25      	ldr	r3, [pc, #148]	; (8003898 <MX_GPIO_Init+0xc8>)
 8003802:	695a      	ldr	r2, [r3, #20]
 8003804:	2380      	movs	r3, #128	; 0x80
 8003806:	02db      	lsls	r3, r3, #11
 8003808:	4013      	ands	r3, r2
 800380a:	607b      	str	r3, [r7, #4]
 800380c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_10, GPIO_PIN_RESET);
 800380e:	2382      	movs	r3, #130	; 0x82
 8003810:	00d9      	lsls	r1, r3, #3
 8003812:	2390      	movs	r3, #144	; 0x90
 8003814:	05db      	lsls	r3, r3, #23
 8003816:	2200      	movs	r2, #0
 8003818:	0018      	movs	r0, r3
 800381a:	f7fe f895 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800381e:	2380      	movs	r3, #128	; 0x80
 8003820:	015b      	lsls	r3, r3, #5
 8003822:	481e      	ldr	r0, [pc, #120]	; (800389c <MX_GPIO_Init+0xcc>)
 8003824:	2200      	movs	r2, #0
 8003826:	0019      	movs	r1, r3
 8003828:	f7fe f88e 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10;
 800382c:	230c      	movs	r3, #12
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	2282      	movs	r2, #130	; 0x82
 8003832:	00d2      	lsls	r2, r2, #3
 8003834:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003836:	230c      	movs	r3, #12
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	2201      	movs	r2, #1
 800383c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383e:	230c      	movs	r3, #12
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	2200      	movs	r2, #0
 8003844:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003846:	230c      	movs	r3, #12
 8003848:	18fb      	adds	r3, r7, r3
 800384a:	2200      	movs	r2, #0
 800384c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800384e:	230c      	movs	r3, #12
 8003850:	18fa      	adds	r2, r7, r3
 8003852:	2390      	movs	r3, #144	; 0x90
 8003854:	05db      	lsls	r3, r3, #23
 8003856:	0011      	movs	r1, r2
 8003858:	0018      	movs	r0, r3
 800385a:	f7fd fef9 	bl	8001650 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800385e:	230c      	movs	r3, #12
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	0152      	lsls	r2, r2, #5
 8003866:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003868:	230c      	movs	r3, #12
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2201      	movs	r2, #1
 800386e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003870:	230c      	movs	r3, #12
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	2200      	movs	r2, #0
 8003876:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003878:	230c      	movs	r3, #12
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	2200      	movs	r2, #0
 800387e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003880:	230c      	movs	r3, #12
 8003882:	18fb      	adds	r3, r7, r3
 8003884:	4a05      	ldr	r2, [pc, #20]	; (800389c <MX_GPIO_Init+0xcc>)
 8003886:	0019      	movs	r1, r3
 8003888:	0010      	movs	r0, r2
 800388a:	f7fd fee1 	bl	8001650 <HAL_GPIO_Init>

}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	46bd      	mov	sp, r7
 8003892:	b008      	add	sp, #32
 8003894:	bd80      	pop	{r7, pc}
 8003896:	46c0      	nop			; (mov r8, r8)
 8003898:	40021000 	.word	0x40021000
 800389c:	48000400 	.word	0x48000400

080038a0 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80038aa:	e7fe      	b.n	80038aa <_Error_Handler+0xa>

080038ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b2:	4b19      	ldr	r3, [pc, #100]	; (8003918 <HAL_MspInit+0x6c>)
 80038b4:	4a18      	ldr	r2, [pc, #96]	; (8003918 <HAL_MspInit+0x6c>)
 80038b6:	6992      	ldr	r2, [r2, #24]
 80038b8:	2101      	movs	r1, #1
 80038ba:	430a      	orrs	r2, r1
 80038bc:	619a      	str	r2, [r3, #24]
 80038be:	4b16      	ldr	r3, [pc, #88]	; (8003918 <HAL_MspInit+0x6c>)
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	2201      	movs	r2, #1
 80038c4:	4013      	ands	r3, r2
 80038c6:	607b      	str	r3, [r7, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038ca:	4b13      	ldr	r3, [pc, #76]	; (8003918 <HAL_MspInit+0x6c>)
 80038cc:	4a12      	ldr	r2, [pc, #72]	; (8003918 <HAL_MspInit+0x6c>)
 80038ce:	69d2      	ldr	r2, [r2, #28]
 80038d0:	2180      	movs	r1, #128	; 0x80
 80038d2:	0549      	lsls	r1, r1, #21
 80038d4:	430a      	orrs	r2, r1
 80038d6:	61da      	str	r2, [r3, #28]
 80038d8:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <HAL_MspInit+0x6c>)
 80038da:	69da      	ldr	r2, [r3, #28]
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	055b      	lsls	r3, r3, #21
 80038e0:	4013      	ands	r3, r2
 80038e2:	603b      	str	r3, [r7, #0]
 80038e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80038e6:	2305      	movs	r3, #5
 80038e8:	425b      	negs	r3, r3
 80038ea:	2200      	movs	r2, #0
 80038ec:	2100      	movs	r1, #0
 80038ee:	0018      	movs	r0, r3
 80038f0:	f7fd fd24 	bl	800133c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80038f4:	2302      	movs	r3, #2
 80038f6:	425b      	negs	r3, r3
 80038f8:	2200      	movs	r2, #0
 80038fa:	2100      	movs	r1, #0
 80038fc:	0018      	movs	r0, r3
 80038fe:	f7fd fd1d 	bl	800133c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003902:	2301      	movs	r3, #1
 8003904:	425b      	negs	r3, r3
 8003906:	2200      	movs	r2, #0
 8003908:	2100      	movs	r1, #0
 800390a:	0018      	movs	r0, r3
 800390c:	f7fd fd16 	bl	800133c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003910:	46c0      	nop			; (mov r8, r8)
 8003912:	46bd      	mov	sp, r7
 8003914:	b002      	add	sp, #8
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40021000 	.word	0x40021000

0800391c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a18      	ldr	r2, [pc, #96]	; (800398c <HAL_CAN_MspInit+0x70>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d12a      	bne.n	8003984 <HAL_CAN_MspInit+0x68>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800392e:	4b18      	ldr	r3, [pc, #96]	; (8003990 <HAL_CAN_MspInit+0x74>)
 8003930:	4a17      	ldr	r2, [pc, #92]	; (8003990 <HAL_CAN_MspInit+0x74>)
 8003932:	69d2      	ldr	r2, [r2, #28]
 8003934:	2180      	movs	r1, #128	; 0x80
 8003936:	0489      	lsls	r1, r1, #18
 8003938:	430a      	orrs	r2, r1
 800393a:	61da      	str	r2, [r3, #28]
 800393c:	4b14      	ldr	r3, [pc, #80]	; (8003990 <HAL_CAN_MspInit+0x74>)
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	049b      	lsls	r3, r3, #18
 8003944:	4013      	ands	r3, r2
 8003946:	60bb      	str	r3, [r7, #8]
 8003948:	68bb      	ldr	r3, [r7, #8]
  
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800394a:	230c      	movs	r3, #12
 800394c:	18fb      	adds	r3, r7, r3
 800394e:	22c0      	movs	r2, #192	; 0xc0
 8003950:	0152      	lsls	r2, r2, #5
 8003952:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003954:	230c      	movs	r3, #12
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	2202      	movs	r2, #2
 800395a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	230c      	movs	r3, #12
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	2200      	movs	r2, #0
 8003962:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003964:	230c      	movs	r3, #12
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	2203      	movs	r2, #3
 800396a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 800396c:	230c      	movs	r3, #12
 800396e:	18fb      	adds	r3, r7, r3
 8003970:	2204      	movs	r2, #4
 8003972:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003974:	230c      	movs	r3, #12
 8003976:	18fa      	adds	r2, r7, r3
 8003978:	2390      	movs	r3, #144	; 0x90
 800397a:	05db      	lsls	r3, r3, #23
 800397c:	0011      	movs	r1, r2
 800397e:	0018      	movs	r0, r3
 8003980:	f7fd fe66 	bl	8001650 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8003984:	46c0      	nop			; (mov r8, r8)
 8003986:	46bd      	mov	sp, r7
 8003988:	b008      	add	sp, #32
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40006400 	.word	0x40006400
 8003990:	40021000 	.word	0x40021000

08003994 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a34      	ldr	r2, [pc, #208]	; (8003a74 <HAL_SPI_MspInit+0xe0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d162      	bne.n	8003a6c <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039a6:	4b34      	ldr	r3, [pc, #208]	; (8003a78 <HAL_SPI_MspInit+0xe4>)
 80039a8:	4a33      	ldr	r2, [pc, #204]	; (8003a78 <HAL_SPI_MspInit+0xe4>)
 80039aa:	6992      	ldr	r2, [r2, #24]
 80039ac:	2180      	movs	r1, #128	; 0x80
 80039ae:	0149      	lsls	r1, r1, #5
 80039b0:	430a      	orrs	r2, r1
 80039b2:	619a      	str	r2, [r3, #24]
 80039b4:	4b30      	ldr	r3, [pc, #192]	; (8003a78 <HAL_SPI_MspInit+0xe4>)
 80039b6:	699a      	ldr	r2, [r3, #24]
 80039b8:	2380      	movs	r3, #128	; 0x80
 80039ba:	015b      	lsls	r3, r3, #5
 80039bc:	4013      	ands	r3, r2
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80039c2:	230c      	movs	r3, #12
 80039c4:	18fb      	adds	r3, r7, r3
 80039c6:	22e0      	movs	r2, #224	; 0xe0
 80039c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ca:	230c      	movs	r3, #12
 80039cc:	18fb      	adds	r3, r7, r3
 80039ce:	2202      	movs	r2, #2
 80039d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d2:	230c      	movs	r3, #12
 80039d4:	18fb      	adds	r3, r7, r3
 80039d6:	2200      	movs	r2, #0
 80039d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039da:	230c      	movs	r3, #12
 80039dc:	18fb      	adds	r3, r7, r3
 80039de:	2203      	movs	r2, #3
 80039e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80039e2:	230c      	movs	r3, #12
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	2200      	movs	r2, #0
 80039e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ea:	230c      	movs	r3, #12
 80039ec:	18fa      	adds	r2, r7, r3
 80039ee:	2390      	movs	r3, #144	; 0x90
 80039f0:	05db      	lsls	r3, r3, #23
 80039f2:	0011      	movs	r1, r2
 80039f4:	0018      	movs	r0, r3
 80039f6:	f7fd fe2b 	bl	8001650 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80039fa:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <HAL_SPI_MspInit+0xe8>)
 80039fc:	4a20      	ldr	r2, [pc, #128]	; (8003a80 <HAL_SPI_MspInit+0xec>)
 80039fe:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a00:	4b1e      	ldr	r3, [pc, #120]	; (8003a7c <HAL_SPI_MspInit+0xe8>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a06:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <HAL_SPI_MspInit+0xe8>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a0c:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <HAL_SPI_MspInit+0xe8>)
 8003a0e:	2280      	movs	r2, #128	; 0x80
 8003a10:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a12:	4b1a      	ldr	r3, [pc, #104]	; (8003a7c <HAL_SPI_MspInit+0xe8>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a18:	4b18      	ldr	r3, [pc, #96]	; (8003a7c <HAL_SPI_MspInit+0xe8>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8003a1e:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <HAL_SPI_MspInit+0xe8>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a24:	4b15      	ldr	r3, [pc, #84]	; (8003a7c <HAL_SPI_MspInit+0xe8>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8003a2a:	4b14      	ldr	r3, [pc, #80]	; (8003a7c <HAL_SPI_MspInit+0xe8>)
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	f7fd fcdf 	bl	80013f0 <HAL_DMA_Init>
 8003a32:	1e03      	subs	r3, r0, #0
 8003a34:	d004      	beq.n	8003a40 <HAL_SPI_MspInit+0xac>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003a36:	4b13      	ldr	r3, [pc, #76]	; (8003a84 <HAL_SPI_MspInit+0xf0>)
 8003a38:	21a3      	movs	r1, #163	; 0xa3
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f7ff ff30 	bl	80038a0 <_Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_SPI1_RX);
 8003a40:	4911      	ldr	r1, [pc, #68]	; (8003a88 <HAL_SPI_MspInit+0xf4>)
 8003a42:	4a11      	ldr	r2, [pc, #68]	; (8003a88 <HAL_SPI_MspInit+0xf4>)
 8003a44:	23a8      	movs	r3, #168	; 0xa8
 8003a46:	58d3      	ldr	r3, [r2, r3]
 8003a48:	22f0      	movs	r2, #240	; 0xf0
 8003a4a:	4393      	bics	r3, r2
 8003a4c:	22a8      	movs	r2, #168	; 0xa8
 8003a4e:	508b      	str	r3, [r1, r2]
 8003a50:	490d      	ldr	r1, [pc, #52]	; (8003a88 <HAL_SPI_MspInit+0xf4>)
 8003a52:	4a0d      	ldr	r2, [pc, #52]	; (8003a88 <HAL_SPI_MspInit+0xf4>)
 8003a54:	23a8      	movs	r3, #168	; 0xa8
 8003a56:	58d3      	ldr	r3, [r2, r3]
 8003a58:	2230      	movs	r2, #48	; 0x30
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	22a8      	movs	r2, #168	; 0xa8
 8003a5e:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a06      	ldr	r2, [pc, #24]	; (8003a7c <HAL_SPI_MspInit+0xe8>)
 8003a64:	659a      	str	r2, [r3, #88]	; 0x58
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_SPI_MspInit+0xe8>)
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b008      	add	sp, #32
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40013000 	.word	0x40013000
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	200000fc 	.word	0x200000fc
 8003a80:	4002001c 	.word	0x4002001c
 8003a84:	08003c70 	.word	0x08003c70
 8003a88:	40020000 	.word	0x40020000

08003a8c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	spiError = HAL_SPI_GetError(&hspi1);
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <HardFault_Handler+0x14>)
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	f7ff f9c2 	bl	8002e28 <HAL_SPI_GetError>
 8003aa4:	0002      	movs	r2, r0
 8003aa6:	4b02      	ldr	r3, [pc, #8]	; (8003ab0 <HardFault_Handler+0x18>)
 8003aa8:	601a      	str	r2, [r3, #0]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003aaa:	e7fe      	b.n	8003aaa <HardFault_Handler+0x12>
 8003aac:	20000098 	.word	0x20000098
 8003ab0:	2000004c 	.word	0x2000004c

08003ab4 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003ab8:	46c0      	nop			; (mov r8, r8)
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ac2:	46c0      	nop			; (mov r8, r8)
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003acc:	f7fc fd64 	bl	8000598 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003ad0:	f7fd fc82 	bl	80013d8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003ae0:	4b03      	ldr	r3, [pc, #12]	; (8003af0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f7fd fcd8 	bl	8001498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8003ae8:	46c0      	nop			; (mov r8, r8)
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	200000fc 	.word	0x200000fc

08003af4 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8003af8:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <SystemInit+0x70>)
 8003afa:	4a1a      	ldr	r2, [pc, #104]	; (8003b64 <SystemInit+0x70>)
 8003afc:	6812      	ldr	r2, [r2, #0]
 8003afe:	2101      	movs	r1, #1
 8003b00:	430a      	orrs	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003b04:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <SystemInit+0x70>)
 8003b06:	4a17      	ldr	r2, [pc, #92]	; (8003b64 <SystemInit+0x70>)
 8003b08:	6852      	ldr	r2, [r2, #4]
 8003b0a:	4917      	ldr	r1, [pc, #92]	; (8003b68 <SystemInit+0x74>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8003b10:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <SystemInit+0x70>)
 8003b12:	4a14      	ldr	r2, [pc, #80]	; (8003b64 <SystemInit+0x70>)
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	4915      	ldr	r1, [pc, #84]	; (8003b6c <SystemInit+0x78>)
 8003b18:	400a      	ands	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8003b1c:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <SystemInit+0x70>)
 8003b1e:	4a11      	ldr	r2, [pc, #68]	; (8003b64 <SystemInit+0x70>)
 8003b20:	6812      	ldr	r2, [r2, #0]
 8003b22:	4913      	ldr	r1, [pc, #76]	; (8003b70 <SystemInit+0x7c>)
 8003b24:	400a      	ands	r2, r1
 8003b26:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8003b28:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <SystemInit+0x70>)
 8003b2a:	4a0e      	ldr	r2, [pc, #56]	; (8003b64 <SystemInit+0x70>)
 8003b2c:	6852      	ldr	r2, [r2, #4]
 8003b2e:	4911      	ldr	r1, [pc, #68]	; (8003b74 <SystemInit+0x80>)
 8003b30:	400a      	ands	r2, r1
 8003b32:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003b34:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <SystemInit+0x70>)
 8003b36:	4a0b      	ldr	r2, [pc, #44]	; (8003b64 <SystemInit+0x70>)
 8003b38:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b3a:	210f      	movs	r1, #15
 8003b3c:	438a      	bics	r2, r1
 8003b3e:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <SystemInit+0x70>)
 8003b42:	4a08      	ldr	r2, [pc, #32]	; (8003b64 <SystemInit+0x70>)
 8003b44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b46:	490c      	ldr	r1, [pc, #48]	; (8003b78 <SystemInit+0x84>)
 8003b48:	400a      	ands	r2, r1
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <SystemInit+0x70>)
 8003b4e:	4a05      	ldr	r2, [pc, #20]	; (8003b64 <SystemInit+0x70>)
 8003b50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b52:	2101      	movs	r1, #1
 8003b54:	438a      	bics	r2, r1
 8003b56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003b58:	4b02      	ldr	r3, [pc, #8]	; (8003b64 <SystemInit+0x70>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	609a      	str	r2, [r3, #8]

}
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	40021000 	.word	0x40021000
 8003b68:	08ffb80c 	.word	0x08ffb80c
 8003b6c:	fef6ffff 	.word	0xfef6ffff
 8003b70:	fffbffff 	.word	0xfffbffff
 8003b74:	ffc0ffff 	.word	0xffc0ffff
 8003b78:	fff0feac 	.word	0xfff0feac

08003b7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b7c:	480d      	ldr	r0, [pc, #52]	; (8003bb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b80:	480d      	ldr	r0, [pc, #52]	; (8003bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003b82:	490e      	ldr	r1, [pc, #56]	; (8003bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b84:	4a0e      	ldr	r2, [pc, #56]	; (8003bc0 <LoopForever+0xe>)
  movs r3, #0
 8003b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b88:	e002      	b.n	8003b90 <LoopCopyDataInit>

08003b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b8e:	3304      	adds	r3, #4

08003b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b94:	d3f9      	bcc.n	8003b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b96:	4a0b      	ldr	r2, [pc, #44]	; (8003bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003b98:	4c0b      	ldr	r4, [pc, #44]	; (8003bc8 <LoopForever+0x16>)
  movs r3, #0
 8003b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b9c:	e001      	b.n	8003ba2 <LoopFillZerobss>

08003b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ba0:	3204      	adds	r2, #4

08003ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ba4:	d3fb      	bcc.n	8003b9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003ba6:	f7ff ffa5 	bl	8003af4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003baa:	f000 f811 	bl	8003bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003bae:	f7ff fb7f 	bl	80032b0 <main>

08003bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8003bb2:	e7fe      	b.n	8003bb2 <LoopForever>
  ldr   r0, =_estack
 8003bb4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bbc:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8003bc0:	08003ce4 	.word	0x08003ce4
  ldr r2, =_sbss
 8003bc4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8003bc8:	20000140 	.word	0x20000140

08003bcc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003bcc:	e7fe      	b.n	8003bcc <ADC1_COMP_IRQHandler>
	...

08003bd0 <__libc_init_array>:
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	2600      	movs	r6, #0
 8003bd4:	4d0c      	ldr	r5, [pc, #48]	; (8003c08 <__libc_init_array+0x38>)
 8003bd6:	4c0d      	ldr	r4, [pc, #52]	; (8003c0c <__libc_init_array+0x3c>)
 8003bd8:	1b64      	subs	r4, r4, r5
 8003bda:	10a4      	asrs	r4, r4, #2
 8003bdc:	42a6      	cmp	r6, r4
 8003bde:	d109      	bne.n	8003bf4 <__libc_init_array+0x24>
 8003be0:	2600      	movs	r6, #0
 8003be2:	f000 f821 	bl	8003c28 <_init>
 8003be6:	4d0a      	ldr	r5, [pc, #40]	; (8003c10 <__libc_init_array+0x40>)
 8003be8:	4c0a      	ldr	r4, [pc, #40]	; (8003c14 <__libc_init_array+0x44>)
 8003bea:	1b64      	subs	r4, r4, r5
 8003bec:	10a4      	asrs	r4, r4, #2
 8003bee:	42a6      	cmp	r6, r4
 8003bf0:	d105      	bne.n	8003bfe <__libc_init_array+0x2e>
 8003bf2:	bd70      	pop	{r4, r5, r6, pc}
 8003bf4:	00b3      	lsls	r3, r6, #2
 8003bf6:	58eb      	ldr	r3, [r5, r3]
 8003bf8:	4798      	blx	r3
 8003bfa:	3601      	adds	r6, #1
 8003bfc:	e7ee      	b.n	8003bdc <__libc_init_array+0xc>
 8003bfe:	00b3      	lsls	r3, r6, #2
 8003c00:	58eb      	ldr	r3, [r5, r3]
 8003c02:	4798      	blx	r3
 8003c04:	3601      	adds	r6, #1
 8003c06:	e7f2      	b.n	8003bee <__libc_init_array+0x1e>
 8003c08:	08003cdc 	.word	0x08003cdc
 8003c0c:	08003cdc 	.word	0x08003cdc
 8003c10:	08003cdc 	.word	0x08003cdc
 8003c14:	08003ce0 	.word	0x08003ce0

08003c18 <memset>:
 8003c18:	0003      	movs	r3, r0
 8003c1a:	1882      	adds	r2, r0, r2
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d100      	bne.n	8003c22 <memset+0xa>
 8003c20:	4770      	bx	lr
 8003c22:	7019      	strb	r1, [r3, #0]
 8003c24:	3301      	adds	r3, #1
 8003c26:	e7f9      	b.n	8003c1c <memset+0x4>

08003c28 <_init>:
 8003c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c2e:	bc08      	pop	{r3}
 8003c30:	469e      	mov	lr, r3
 8003c32:	4770      	bx	lr

08003c34 <_fini>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	469e      	mov	lr, r3
 8003c3e:	4770      	bx	lr
