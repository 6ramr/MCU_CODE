
STM32F098CC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cbc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002d78  08002d78  00012d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e14  08002e14  00012e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e18  08002e18  00012e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08002e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e0  2000001c  08002e38  0002001c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000fc  08002e38  000200fc  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000caa7  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001ca5  00000000  00000000  0002caeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000640  00000000  00000000  0002e790  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000558  00000000  00000000  0002edd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000367f  00000000  00000000  0002f328  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001ee9  00000000  00000000  000329a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00034890  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001474  00000000  00000000  0003490c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002d60 	.word	0x08002d60

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	08002d60 	.word	0x08002d60

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_fmul>:
 800021c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800021e:	4657      	mov	r7, sl
 8000220:	464e      	mov	r6, r9
 8000222:	4645      	mov	r5, r8
 8000224:	46de      	mov	lr, fp
 8000226:	b5e0      	push	{r5, r6, r7, lr}
 8000228:	0247      	lsls	r7, r0, #9
 800022a:	0046      	lsls	r6, r0, #1
 800022c:	4688      	mov	r8, r1
 800022e:	0a7f      	lsrs	r7, r7, #9
 8000230:	0e36      	lsrs	r6, r6, #24
 8000232:	0fc4      	lsrs	r4, r0, #31
 8000234:	2e00      	cmp	r6, #0
 8000236:	d047      	beq.n	80002c8 <__aeabi_fmul+0xac>
 8000238:	2eff      	cmp	r6, #255	; 0xff
 800023a:	d024      	beq.n	8000286 <__aeabi_fmul+0x6a>
 800023c:	00fb      	lsls	r3, r7, #3
 800023e:	2780      	movs	r7, #128	; 0x80
 8000240:	04ff      	lsls	r7, r7, #19
 8000242:	431f      	orrs	r7, r3
 8000244:	2300      	movs	r3, #0
 8000246:	4699      	mov	r9, r3
 8000248:	469a      	mov	sl, r3
 800024a:	3e7f      	subs	r6, #127	; 0x7f
 800024c:	4643      	mov	r3, r8
 800024e:	025d      	lsls	r5, r3, #9
 8000250:	0058      	lsls	r0, r3, #1
 8000252:	0fdb      	lsrs	r3, r3, #31
 8000254:	0a6d      	lsrs	r5, r5, #9
 8000256:	0e00      	lsrs	r0, r0, #24
 8000258:	4698      	mov	r8, r3
 800025a:	d043      	beq.n	80002e4 <__aeabi_fmul+0xc8>
 800025c:	28ff      	cmp	r0, #255	; 0xff
 800025e:	d03b      	beq.n	80002d8 <__aeabi_fmul+0xbc>
 8000260:	00eb      	lsls	r3, r5, #3
 8000262:	2580      	movs	r5, #128	; 0x80
 8000264:	2200      	movs	r2, #0
 8000266:	04ed      	lsls	r5, r5, #19
 8000268:	431d      	orrs	r5, r3
 800026a:	387f      	subs	r0, #127	; 0x7f
 800026c:	1836      	adds	r6, r6, r0
 800026e:	1c73      	adds	r3, r6, #1
 8000270:	4641      	mov	r1, r8
 8000272:	469b      	mov	fp, r3
 8000274:	464b      	mov	r3, r9
 8000276:	4061      	eors	r1, r4
 8000278:	4313      	orrs	r3, r2
 800027a:	2b0f      	cmp	r3, #15
 800027c:	d864      	bhi.n	8000348 <__aeabi_fmul+0x12c>
 800027e:	4875      	ldr	r0, [pc, #468]	; (8000454 <__aeabi_fmul+0x238>)
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	58c3      	ldr	r3, [r0, r3]
 8000284:	469f      	mov	pc, r3
 8000286:	2f00      	cmp	r7, #0
 8000288:	d142      	bne.n	8000310 <__aeabi_fmul+0xf4>
 800028a:	2308      	movs	r3, #8
 800028c:	4699      	mov	r9, r3
 800028e:	3b06      	subs	r3, #6
 8000290:	26ff      	movs	r6, #255	; 0xff
 8000292:	469a      	mov	sl, r3
 8000294:	e7da      	b.n	800024c <__aeabi_fmul+0x30>
 8000296:	4641      	mov	r1, r8
 8000298:	2a02      	cmp	r2, #2
 800029a:	d028      	beq.n	80002ee <__aeabi_fmul+0xd2>
 800029c:	2a03      	cmp	r2, #3
 800029e:	d100      	bne.n	80002a2 <__aeabi_fmul+0x86>
 80002a0:	e0ce      	b.n	8000440 <__aeabi_fmul+0x224>
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	d000      	beq.n	80002a8 <__aeabi_fmul+0x8c>
 80002a6:	e0ac      	b.n	8000402 <__aeabi_fmul+0x1e6>
 80002a8:	4011      	ands	r1, r2
 80002aa:	2000      	movs	r0, #0
 80002ac:	2200      	movs	r2, #0
 80002ae:	b2cc      	uxtb	r4, r1
 80002b0:	0240      	lsls	r0, r0, #9
 80002b2:	05d2      	lsls	r2, r2, #23
 80002b4:	0a40      	lsrs	r0, r0, #9
 80002b6:	07e4      	lsls	r4, r4, #31
 80002b8:	4310      	orrs	r0, r2
 80002ba:	4320      	orrs	r0, r4
 80002bc:	bc3c      	pop	{r2, r3, r4, r5}
 80002be:	4690      	mov	r8, r2
 80002c0:	4699      	mov	r9, r3
 80002c2:	46a2      	mov	sl, r4
 80002c4:	46ab      	mov	fp, r5
 80002c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80002c8:	2f00      	cmp	r7, #0
 80002ca:	d115      	bne.n	80002f8 <__aeabi_fmul+0xdc>
 80002cc:	2304      	movs	r3, #4
 80002ce:	4699      	mov	r9, r3
 80002d0:	3b03      	subs	r3, #3
 80002d2:	2600      	movs	r6, #0
 80002d4:	469a      	mov	sl, r3
 80002d6:	e7b9      	b.n	800024c <__aeabi_fmul+0x30>
 80002d8:	20ff      	movs	r0, #255	; 0xff
 80002da:	2202      	movs	r2, #2
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0c5      	beq.n	800026c <__aeabi_fmul+0x50>
 80002e0:	2203      	movs	r2, #3
 80002e2:	e7c3      	b.n	800026c <__aeabi_fmul+0x50>
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d119      	bne.n	800031c <__aeabi_fmul+0x100>
 80002e8:	2000      	movs	r0, #0
 80002ea:	2201      	movs	r2, #1
 80002ec:	e7be      	b.n	800026c <__aeabi_fmul+0x50>
 80002ee:	2401      	movs	r4, #1
 80002f0:	22ff      	movs	r2, #255	; 0xff
 80002f2:	400c      	ands	r4, r1
 80002f4:	2000      	movs	r0, #0
 80002f6:	e7db      	b.n	80002b0 <__aeabi_fmul+0x94>
 80002f8:	0038      	movs	r0, r7
 80002fa:	f000 f8ff 	bl	80004fc <__clzsi2>
 80002fe:	2676      	movs	r6, #118	; 0x76
 8000300:	1f43      	subs	r3, r0, #5
 8000302:	409f      	lsls	r7, r3
 8000304:	2300      	movs	r3, #0
 8000306:	4276      	negs	r6, r6
 8000308:	1a36      	subs	r6, r6, r0
 800030a:	4699      	mov	r9, r3
 800030c:	469a      	mov	sl, r3
 800030e:	e79d      	b.n	800024c <__aeabi_fmul+0x30>
 8000310:	230c      	movs	r3, #12
 8000312:	4699      	mov	r9, r3
 8000314:	3b09      	subs	r3, #9
 8000316:	26ff      	movs	r6, #255	; 0xff
 8000318:	469a      	mov	sl, r3
 800031a:	e797      	b.n	800024c <__aeabi_fmul+0x30>
 800031c:	0028      	movs	r0, r5
 800031e:	f000 f8ed 	bl	80004fc <__clzsi2>
 8000322:	1f43      	subs	r3, r0, #5
 8000324:	409d      	lsls	r5, r3
 8000326:	2376      	movs	r3, #118	; 0x76
 8000328:	425b      	negs	r3, r3
 800032a:	1a18      	subs	r0, r3, r0
 800032c:	2200      	movs	r2, #0
 800032e:	e79d      	b.n	800026c <__aeabi_fmul+0x50>
 8000330:	2080      	movs	r0, #128	; 0x80
 8000332:	2400      	movs	r4, #0
 8000334:	03c0      	lsls	r0, r0, #15
 8000336:	22ff      	movs	r2, #255	; 0xff
 8000338:	e7ba      	b.n	80002b0 <__aeabi_fmul+0x94>
 800033a:	003d      	movs	r5, r7
 800033c:	4652      	mov	r2, sl
 800033e:	e7ab      	b.n	8000298 <__aeabi_fmul+0x7c>
 8000340:	003d      	movs	r5, r7
 8000342:	0021      	movs	r1, r4
 8000344:	4652      	mov	r2, sl
 8000346:	e7a7      	b.n	8000298 <__aeabi_fmul+0x7c>
 8000348:	0c3b      	lsrs	r3, r7, #16
 800034a:	469c      	mov	ip, r3
 800034c:	042a      	lsls	r2, r5, #16
 800034e:	0c12      	lsrs	r2, r2, #16
 8000350:	0c2b      	lsrs	r3, r5, #16
 8000352:	0014      	movs	r4, r2
 8000354:	4660      	mov	r0, ip
 8000356:	4665      	mov	r5, ip
 8000358:	043f      	lsls	r7, r7, #16
 800035a:	0c3f      	lsrs	r7, r7, #16
 800035c:	437c      	muls	r4, r7
 800035e:	4342      	muls	r2, r0
 8000360:	435d      	muls	r5, r3
 8000362:	437b      	muls	r3, r7
 8000364:	0c27      	lsrs	r7, r4, #16
 8000366:	189b      	adds	r3, r3, r2
 8000368:	18ff      	adds	r7, r7, r3
 800036a:	42ba      	cmp	r2, r7
 800036c:	d903      	bls.n	8000376 <__aeabi_fmul+0x15a>
 800036e:	2380      	movs	r3, #128	; 0x80
 8000370:	025b      	lsls	r3, r3, #9
 8000372:	469c      	mov	ip, r3
 8000374:	4465      	add	r5, ip
 8000376:	0424      	lsls	r4, r4, #16
 8000378:	043a      	lsls	r2, r7, #16
 800037a:	0c24      	lsrs	r4, r4, #16
 800037c:	1912      	adds	r2, r2, r4
 800037e:	0193      	lsls	r3, r2, #6
 8000380:	1e5c      	subs	r4, r3, #1
 8000382:	41a3      	sbcs	r3, r4
 8000384:	0c3f      	lsrs	r7, r7, #16
 8000386:	0e92      	lsrs	r2, r2, #26
 8000388:	197d      	adds	r5, r7, r5
 800038a:	431a      	orrs	r2, r3
 800038c:	01ad      	lsls	r5, r5, #6
 800038e:	4315      	orrs	r5, r2
 8000390:	012b      	lsls	r3, r5, #4
 8000392:	d504      	bpl.n	800039e <__aeabi_fmul+0x182>
 8000394:	2301      	movs	r3, #1
 8000396:	465e      	mov	r6, fp
 8000398:	086a      	lsrs	r2, r5, #1
 800039a:	401d      	ands	r5, r3
 800039c:	4315      	orrs	r5, r2
 800039e:	0032      	movs	r2, r6
 80003a0:	327f      	adds	r2, #127	; 0x7f
 80003a2:	2a00      	cmp	r2, #0
 80003a4:	dd25      	ble.n	80003f2 <__aeabi_fmul+0x1d6>
 80003a6:	076b      	lsls	r3, r5, #29
 80003a8:	d004      	beq.n	80003b4 <__aeabi_fmul+0x198>
 80003aa:	230f      	movs	r3, #15
 80003ac:	402b      	ands	r3, r5
 80003ae:	2b04      	cmp	r3, #4
 80003b0:	d000      	beq.n	80003b4 <__aeabi_fmul+0x198>
 80003b2:	3504      	adds	r5, #4
 80003b4:	012b      	lsls	r3, r5, #4
 80003b6:	d503      	bpl.n	80003c0 <__aeabi_fmul+0x1a4>
 80003b8:	0032      	movs	r2, r6
 80003ba:	4b27      	ldr	r3, [pc, #156]	; (8000458 <__aeabi_fmul+0x23c>)
 80003bc:	3280      	adds	r2, #128	; 0x80
 80003be:	401d      	ands	r5, r3
 80003c0:	2afe      	cmp	r2, #254	; 0xfe
 80003c2:	dc94      	bgt.n	80002ee <__aeabi_fmul+0xd2>
 80003c4:	2401      	movs	r4, #1
 80003c6:	01a8      	lsls	r0, r5, #6
 80003c8:	0a40      	lsrs	r0, r0, #9
 80003ca:	b2d2      	uxtb	r2, r2
 80003cc:	400c      	ands	r4, r1
 80003ce:	e76f      	b.n	80002b0 <__aeabi_fmul+0x94>
 80003d0:	2080      	movs	r0, #128	; 0x80
 80003d2:	03c0      	lsls	r0, r0, #15
 80003d4:	4207      	tst	r7, r0
 80003d6:	d007      	beq.n	80003e8 <__aeabi_fmul+0x1cc>
 80003d8:	4205      	tst	r5, r0
 80003da:	d105      	bne.n	80003e8 <__aeabi_fmul+0x1cc>
 80003dc:	4328      	orrs	r0, r5
 80003de:	0240      	lsls	r0, r0, #9
 80003e0:	0a40      	lsrs	r0, r0, #9
 80003e2:	4644      	mov	r4, r8
 80003e4:	22ff      	movs	r2, #255	; 0xff
 80003e6:	e763      	b.n	80002b0 <__aeabi_fmul+0x94>
 80003e8:	4338      	orrs	r0, r7
 80003ea:	0240      	lsls	r0, r0, #9
 80003ec:	0a40      	lsrs	r0, r0, #9
 80003ee:	22ff      	movs	r2, #255	; 0xff
 80003f0:	e75e      	b.n	80002b0 <__aeabi_fmul+0x94>
 80003f2:	2401      	movs	r4, #1
 80003f4:	1aa3      	subs	r3, r4, r2
 80003f6:	2b1b      	cmp	r3, #27
 80003f8:	dd05      	ble.n	8000406 <__aeabi_fmul+0x1ea>
 80003fa:	400c      	ands	r4, r1
 80003fc:	2200      	movs	r2, #0
 80003fe:	2000      	movs	r0, #0
 8000400:	e756      	b.n	80002b0 <__aeabi_fmul+0x94>
 8000402:	465e      	mov	r6, fp
 8000404:	e7cb      	b.n	800039e <__aeabi_fmul+0x182>
 8000406:	002a      	movs	r2, r5
 8000408:	2020      	movs	r0, #32
 800040a:	40da      	lsrs	r2, r3
 800040c:	1ac3      	subs	r3, r0, r3
 800040e:	409d      	lsls	r5, r3
 8000410:	002b      	movs	r3, r5
 8000412:	1e5d      	subs	r5, r3, #1
 8000414:	41ab      	sbcs	r3, r5
 8000416:	4313      	orrs	r3, r2
 8000418:	075a      	lsls	r2, r3, #29
 800041a:	d004      	beq.n	8000426 <__aeabi_fmul+0x20a>
 800041c:	220f      	movs	r2, #15
 800041e:	401a      	ands	r2, r3
 8000420:	2a04      	cmp	r2, #4
 8000422:	d000      	beq.n	8000426 <__aeabi_fmul+0x20a>
 8000424:	3304      	adds	r3, #4
 8000426:	015a      	lsls	r2, r3, #5
 8000428:	d504      	bpl.n	8000434 <__aeabi_fmul+0x218>
 800042a:	2401      	movs	r4, #1
 800042c:	2201      	movs	r2, #1
 800042e:	400c      	ands	r4, r1
 8000430:	2000      	movs	r0, #0
 8000432:	e73d      	b.n	80002b0 <__aeabi_fmul+0x94>
 8000434:	2401      	movs	r4, #1
 8000436:	019b      	lsls	r3, r3, #6
 8000438:	0a58      	lsrs	r0, r3, #9
 800043a:	400c      	ands	r4, r1
 800043c:	2200      	movs	r2, #0
 800043e:	e737      	b.n	80002b0 <__aeabi_fmul+0x94>
 8000440:	2080      	movs	r0, #128	; 0x80
 8000442:	2401      	movs	r4, #1
 8000444:	03c0      	lsls	r0, r0, #15
 8000446:	4328      	orrs	r0, r5
 8000448:	0240      	lsls	r0, r0, #9
 800044a:	0a40      	lsrs	r0, r0, #9
 800044c:	400c      	ands	r4, r1
 800044e:	22ff      	movs	r2, #255	; 0xff
 8000450:	e72e      	b.n	80002b0 <__aeabi_fmul+0x94>
 8000452:	46c0      	nop			; (mov r8, r8)
 8000454:	08002dc4 	.word	0x08002dc4
 8000458:	f7ffffff 	.word	0xf7ffffff

0800045c <__aeabi_i2f>:
 800045c:	b570      	push	{r4, r5, r6, lr}
 800045e:	2800      	cmp	r0, #0
 8000460:	d030      	beq.n	80004c4 <__aeabi_i2f+0x68>
 8000462:	17c3      	asrs	r3, r0, #31
 8000464:	18c4      	adds	r4, r0, r3
 8000466:	405c      	eors	r4, r3
 8000468:	0fc5      	lsrs	r5, r0, #31
 800046a:	0020      	movs	r0, r4
 800046c:	f000 f846 	bl	80004fc <__clzsi2>
 8000470:	239e      	movs	r3, #158	; 0x9e
 8000472:	1a1b      	subs	r3, r3, r0
 8000474:	2b96      	cmp	r3, #150	; 0x96
 8000476:	dc0d      	bgt.n	8000494 <__aeabi_i2f+0x38>
 8000478:	2296      	movs	r2, #150	; 0x96
 800047a:	1ad2      	subs	r2, r2, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	002a      	movs	r2, r5
 8000480:	0264      	lsls	r4, r4, #9
 8000482:	0a64      	lsrs	r4, r4, #9
 8000484:	b2db      	uxtb	r3, r3
 8000486:	0264      	lsls	r4, r4, #9
 8000488:	05db      	lsls	r3, r3, #23
 800048a:	0a60      	lsrs	r0, r4, #9
 800048c:	07d2      	lsls	r2, r2, #31
 800048e:	4318      	orrs	r0, r3
 8000490:	4310      	orrs	r0, r2
 8000492:	bd70      	pop	{r4, r5, r6, pc}
 8000494:	2b99      	cmp	r3, #153	; 0x99
 8000496:	dc19      	bgt.n	80004cc <__aeabi_i2f+0x70>
 8000498:	2299      	movs	r2, #153	; 0x99
 800049a:	1ad2      	subs	r2, r2, r3
 800049c:	2a00      	cmp	r2, #0
 800049e:	dd29      	ble.n	80004f4 <__aeabi_i2f+0x98>
 80004a0:	4094      	lsls	r4, r2
 80004a2:	0022      	movs	r2, r4
 80004a4:	4c14      	ldr	r4, [pc, #80]	; (80004f8 <__aeabi_i2f+0x9c>)
 80004a6:	4014      	ands	r4, r2
 80004a8:	0751      	lsls	r1, r2, #29
 80004aa:	d004      	beq.n	80004b6 <__aeabi_i2f+0x5a>
 80004ac:	210f      	movs	r1, #15
 80004ae:	400a      	ands	r2, r1
 80004b0:	2a04      	cmp	r2, #4
 80004b2:	d000      	beq.n	80004b6 <__aeabi_i2f+0x5a>
 80004b4:	3404      	adds	r4, #4
 80004b6:	0162      	lsls	r2, r4, #5
 80004b8:	d413      	bmi.n	80004e2 <__aeabi_i2f+0x86>
 80004ba:	01a4      	lsls	r4, r4, #6
 80004bc:	0a64      	lsrs	r4, r4, #9
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	002a      	movs	r2, r5
 80004c2:	e7e0      	b.n	8000486 <__aeabi_i2f+0x2a>
 80004c4:	2200      	movs	r2, #0
 80004c6:	2300      	movs	r3, #0
 80004c8:	2400      	movs	r4, #0
 80004ca:	e7dc      	b.n	8000486 <__aeabi_i2f+0x2a>
 80004cc:	2205      	movs	r2, #5
 80004ce:	0021      	movs	r1, r4
 80004d0:	1a12      	subs	r2, r2, r0
 80004d2:	40d1      	lsrs	r1, r2
 80004d4:	22b9      	movs	r2, #185	; 0xb9
 80004d6:	1ad2      	subs	r2, r2, r3
 80004d8:	4094      	lsls	r4, r2
 80004da:	1e62      	subs	r2, r4, #1
 80004dc:	4194      	sbcs	r4, r2
 80004de:	430c      	orrs	r4, r1
 80004e0:	e7da      	b.n	8000498 <__aeabi_i2f+0x3c>
 80004e2:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <__aeabi_i2f+0x9c>)
 80004e4:	002a      	movs	r2, r5
 80004e6:	401c      	ands	r4, r3
 80004e8:	239f      	movs	r3, #159	; 0x9f
 80004ea:	01a4      	lsls	r4, r4, #6
 80004ec:	1a1b      	subs	r3, r3, r0
 80004ee:	0a64      	lsrs	r4, r4, #9
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	e7c8      	b.n	8000486 <__aeabi_i2f+0x2a>
 80004f4:	0022      	movs	r2, r4
 80004f6:	e7d5      	b.n	80004a4 <__aeabi_i2f+0x48>
 80004f8:	fbffffff 	.word	0xfbffffff

080004fc <__clzsi2>:
 80004fc:	211c      	movs	r1, #28
 80004fe:	2301      	movs	r3, #1
 8000500:	041b      	lsls	r3, r3, #16
 8000502:	4298      	cmp	r0, r3
 8000504:	d301      	bcc.n	800050a <__clzsi2+0xe>
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	3910      	subs	r1, #16
 800050a:	0a1b      	lsrs	r3, r3, #8
 800050c:	4298      	cmp	r0, r3
 800050e:	d301      	bcc.n	8000514 <__clzsi2+0x18>
 8000510:	0a00      	lsrs	r0, r0, #8
 8000512:	3908      	subs	r1, #8
 8000514:	091b      	lsrs	r3, r3, #4
 8000516:	4298      	cmp	r0, r3
 8000518:	d301      	bcc.n	800051e <__clzsi2+0x22>
 800051a:	0900      	lsrs	r0, r0, #4
 800051c:	3904      	subs	r1, #4
 800051e:	a202      	add	r2, pc, #8	; (adr r2, 8000528 <__clzsi2+0x2c>)
 8000520:	5c10      	ldrb	r0, [r2, r0]
 8000522:	1840      	adds	r0, r0, r1
 8000524:	4770      	bx	lr
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	02020304 	.word	0x02020304
 800052c:	01010101 	.word	0x01010101
	...

08000538 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <HAL_Init+0x24>)
 800053e:	4a07      	ldr	r2, [pc, #28]	; (800055c <HAL_Init+0x24>)
 8000540:	6812      	ldr	r2, [r2, #0]
 8000542:	2110      	movs	r1, #16
 8000544:	430a      	orrs	r2, r1
 8000546:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000548:	2000      	movs	r0, #0
 800054a:	f000 f809 	bl	8000560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800054e:	f002 fa85 	bl	8002a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
}
 8000554:	0018      	movs	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	40022000 	.word	0x40022000

08000560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000568:	f001 f8ee 	bl	8001748 <HAL_RCC_GetHCLKFreq>
 800056c:	0002      	movs	r2, r0
 800056e:	23fa      	movs	r3, #250	; 0xfa
 8000570:	0099      	lsls	r1, r3, #2
 8000572:	0010      	movs	r0, r2
 8000574:	f7ff fdc6 	bl	8000104 <__udivsi3>
 8000578:	0003      	movs	r3, r0
 800057a:	0018      	movs	r0, r3
 800057c:	f000 f8f0 	bl	8000760 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000580:	6879      	ldr	r1, [r7, #4]
 8000582:	2301      	movs	r3, #1
 8000584:	425b      	negs	r3, r3
 8000586:	2200      	movs	r2, #0
 8000588:	0018      	movs	r0, r3
 800058a:	f000 f8c3 	bl	8000714 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
}
 8000590:	0018      	movs	r0, r3
 8000592:	46bd      	mov	sp, r7
 8000594:	b002      	add	sp, #8
 8000596:	bd80      	pop	{r7, pc}

08000598 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  uwTick++;
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <HAL_IncTick+0x14>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	1c5a      	adds	r2, r3, #1
 80005a2:	4b02      	ldr	r3, [pc, #8]	; (80005ac <HAL_IncTick+0x14>)
 80005a4:	601a      	str	r2, [r3, #0]
}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000050 	.word	0x20000050

080005b0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  return uwTick;
 80005b4:	4b02      	ldr	r3, [pc, #8]	; (80005c0 <HAL_GetTick+0x10>)
 80005b6:	681b      	ldr	r3, [r3, #0]
}
 80005b8:	0018      	movs	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	20000050 	.word	0x20000050

080005c4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	0002      	movs	r2, r0
 80005cc:	1dfb      	adds	r3, r7, #7
 80005ce:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <NVIC_EnableIRQ+0x28>)
 80005d2:	1dfa      	adds	r2, r7, #7
 80005d4:	7812      	ldrb	r2, [r2, #0]
 80005d6:	0011      	movs	r1, r2
 80005d8:	221f      	movs	r2, #31
 80005da:	400a      	ands	r2, r1
 80005dc:	2101      	movs	r1, #1
 80005de:	4091      	lsls	r1, r2
 80005e0:	000a      	movs	r2, r1
 80005e2:	601a      	str	r2, [r3, #0]
}
 80005e4:	46c0      	nop			; (mov r8, r8)
 80005e6:	46bd      	mov	sp, r7
 80005e8:	b002      	add	sp, #8
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	e000e100 	.word	0xe000e100

080005f0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	0002      	movs	r2, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b7f      	cmp	r3, #127	; 0x7f
 8000604:	d932      	bls.n	800066c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000606:	4c2f      	ldr	r4, [pc, #188]	; (80006c4 <NVIC_SetPriority+0xd4>)
 8000608:	1dfb      	adds	r3, r7, #7
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	001a      	movs	r2, r3
 800060e:	230f      	movs	r3, #15
 8000610:	4013      	ands	r3, r2
 8000612:	3b08      	subs	r3, #8
 8000614:	0899      	lsrs	r1, r3, #2
 8000616:	4a2b      	ldr	r2, [pc, #172]	; (80006c4 <NVIC_SetPriority+0xd4>)
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	0018      	movs	r0, r3
 800061e:	230f      	movs	r3, #15
 8000620:	4003      	ands	r3, r0
 8000622:	3b08      	subs	r3, #8
 8000624:	089b      	lsrs	r3, r3, #2
 8000626:	3306      	adds	r3, #6
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	18d3      	adds	r3, r2, r3
 800062c:	3304      	adds	r3, #4
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	1dfa      	adds	r2, r7, #7
 8000632:	7812      	ldrb	r2, [r2, #0]
 8000634:	0010      	movs	r0, r2
 8000636:	2203      	movs	r2, #3
 8000638:	4002      	ands	r2, r0
 800063a:	00d2      	lsls	r2, r2, #3
 800063c:	20ff      	movs	r0, #255	; 0xff
 800063e:	4090      	lsls	r0, r2
 8000640:	0002      	movs	r2, r0
 8000642:	43d2      	mvns	r2, r2
 8000644:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	019b      	lsls	r3, r3, #6
 800064a:	20ff      	movs	r0, #255	; 0xff
 800064c:	4018      	ands	r0, r3
 800064e:	1dfb      	adds	r3, r7, #7
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	001d      	movs	r5, r3
 8000654:	2303      	movs	r3, #3
 8000656:	402b      	ands	r3, r5
 8000658:	00db      	lsls	r3, r3, #3
 800065a:	4098      	lsls	r0, r3
 800065c:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800065e:	431a      	orrs	r2, r3
 8000660:	1d8b      	adds	r3, r1, #6
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	18e3      	adds	r3, r4, r3
 8000666:	3304      	adds	r3, #4
 8000668:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800066a:	e027      	b.n	80006bc <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800066c:	4c16      	ldr	r4, [pc, #88]	; (80006c8 <NVIC_SetPriority+0xd8>)
 800066e:	1dfb      	adds	r3, r7, #7
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	b25b      	sxtb	r3, r3
 8000674:	089b      	lsrs	r3, r3, #2
 8000676:	4914      	ldr	r1, [pc, #80]	; (80006c8 <NVIC_SetPriority+0xd8>)
 8000678:	1dfa      	adds	r2, r7, #7
 800067a:	7812      	ldrb	r2, [r2, #0]
 800067c:	b252      	sxtb	r2, r2
 800067e:	0892      	lsrs	r2, r2, #2
 8000680:	32c0      	adds	r2, #192	; 0xc0
 8000682:	0092      	lsls	r2, r2, #2
 8000684:	5852      	ldr	r2, [r2, r1]
 8000686:	1df9      	adds	r1, r7, #7
 8000688:	7809      	ldrb	r1, [r1, #0]
 800068a:	0008      	movs	r0, r1
 800068c:	2103      	movs	r1, #3
 800068e:	4001      	ands	r1, r0
 8000690:	00c9      	lsls	r1, r1, #3
 8000692:	20ff      	movs	r0, #255	; 0xff
 8000694:	4088      	lsls	r0, r1
 8000696:	0001      	movs	r1, r0
 8000698:	43c9      	mvns	r1, r1
 800069a:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	0192      	lsls	r2, r2, #6
 80006a0:	20ff      	movs	r0, #255	; 0xff
 80006a2:	4010      	ands	r0, r2
 80006a4:	1dfa      	adds	r2, r7, #7
 80006a6:	7812      	ldrb	r2, [r2, #0]
 80006a8:	0015      	movs	r5, r2
 80006aa:	2203      	movs	r2, #3
 80006ac:	402a      	ands	r2, r5
 80006ae:	00d2      	lsls	r2, r2, #3
 80006b0:	4090      	lsls	r0, r2
 80006b2:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006b4:	430a      	orrs	r2, r1
 80006b6:	33c0      	adds	r3, #192	; 0xc0
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	511a      	str	r2, [r3, r4]
}
 80006bc:	46c0      	nop			; (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	b002      	add	sp, #8
 80006c2:	bdb0      	pop	{r4, r5, r7, pc}
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	e000e100 	.word	0xe000e100

080006cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	4a0c      	ldr	r2, [pc, #48]	; (800070c <SysTick_Config+0x40>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d901      	bls.n	80006e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006de:	2301      	movs	r3, #1
 80006e0:	e010      	b.n	8000704 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <SysTick_Config+0x44>)
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	3a01      	subs	r2, #1
 80006e8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ea:	2301      	movs	r3, #1
 80006ec:	425b      	negs	r3, r3
 80006ee:	2103      	movs	r1, #3
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff ff7d 	bl	80005f0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <SysTick_Config+0x44>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fc:	4b04      	ldr	r3, [pc, #16]	; (8000710 <SysTick_Config+0x44>)
 80006fe:	2207      	movs	r2, #7
 8000700:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000702:	2300      	movs	r3, #0
}
 8000704:	0018      	movs	r0, r3
 8000706:	46bd      	mov	sp, r7
 8000708:	b002      	add	sp, #8
 800070a:	bd80      	pop	{r7, pc}
 800070c:	00ffffff 	.word	0x00ffffff
 8000710:	e000e010 	.word	0xe000e010

08000714 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	60b9      	str	r1, [r7, #8]
 800071c:	607a      	str	r2, [r7, #4]
 800071e:	230f      	movs	r3, #15
 8000720:	18fb      	adds	r3, r7, r3
 8000722:	1c02      	adds	r2, r0, #0
 8000724:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	230f      	movs	r3, #15
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	b25b      	sxtb	r3, r3
 8000730:	0011      	movs	r1, r2
 8000732:	0018      	movs	r0, r3
 8000734:	f7ff ff5c 	bl	80005f0 <NVIC_SetPriority>
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b004      	add	sp, #16
 800073e:	bd80      	pop	{r7, pc}

08000740 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	0002      	movs	r2, r0
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	b25b      	sxtb	r3, r3
 8000752:	0018      	movs	r0, r3
 8000754:	f7ff ff36 	bl	80005c4 <NVIC_EnableIRQ>
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b002      	add	sp, #8
 800075e:	bd80      	pop	{r7, pc}

08000760 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	0018      	movs	r0, r3
 800076c:	f7ff ffae 	bl	80006cc <SysTick_Config>
 8000770:	0003      	movs	r3, r0
}
 8000772:	0018      	movs	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	b002      	add	sp, #8
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b04      	cmp	r3, #4
 8000788:	d106      	bne.n	8000798 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_SYSTICK_CLKSourceConfig+0x30>)
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_SYSTICK_CLKSourceConfig+0x30>)
 800078e:	6812      	ldr	r2, [r2, #0]
 8000790:	2104      	movs	r1, #4
 8000792:	430a      	orrs	r2, r1
 8000794:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000796:	e005      	b.n	80007a4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000798:	4b04      	ldr	r3, [pc, #16]	; (80007ac <HAL_SYSTICK_CLKSourceConfig+0x30>)
 800079a:	4a04      	ldr	r2, [pc, #16]	; (80007ac <HAL_SYSTICK_CLKSourceConfig+0x30>)
 800079c:	6812      	ldr	r2, [r2, #0]
 800079e:	2104      	movs	r1, #4
 80007a0:	438a      	bics	r2, r1
 80007a2:	601a      	str	r2, [r3, #0]
}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b002      	add	sp, #8
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	e000e010 	.word	0xe000e010

080007b0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80007b4:	f000 f803 	bl	80007be <HAL_SYSTICK_Callback>
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d101      	bne.n	80007de <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e042      	b.n	8000864 <HAL_DMA_Init+0x9c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2221      	movs	r2, #33	; 0x21
 80007e2:	2102      	movs	r1, #2
 80007e4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	4a1e      	ldr	r2, [pc, #120]	; (800086c <HAL_DMA_Init+0xa4>)
 80007f2:	4013      	ands	r3, r2
 80007f4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80007fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800080a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000816:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	69db      	ldr	r3, [r3, #28]
 800081c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800081e:	68fa      	ldr	r2, [r7, #12]
 8000820:	4313      	orrs	r3, r2
 8000822:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	68fa      	ldr	r2, [r7, #12]
 800082a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	0018      	movs	r0, r3
 8000830:	f000 f8c0 	bl	80009b4 <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2200      	movs	r2, #0
 800083e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2200      	movs	r2, #0
 8000844:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2200      	movs	r2, #0
 800084a:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2200      	movs	r2, #0
 8000850:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2221      	movs	r2, #33	; 0x21
 8000856:	2101      	movs	r1, #1
 8000858:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2220      	movs	r2, #32
 800085e:	2100      	movs	r1, #0
 8000860:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000862:	2300      	movs	r3, #0
}  
 8000864:	0018      	movs	r0, r3
 8000866:	46bd      	mov	sp, r7
 8000868:	b004      	add	sp, #16
 800086a:	bd80      	pop	{r7, pc}
 800086c:	ffffc00f 	.word	0xffffc00f

08000870 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088c:	2204      	movs	r2, #4
 800088e:	409a      	lsls	r2, r3
 8000890:	0013      	movs	r3, r2
 8000892:	68fa      	ldr	r2, [r7, #12]
 8000894:	4013      	ands	r3, r2
 8000896:	d024      	beq.n	80008e2 <HAL_DMA_IRQHandler+0x72>
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	2204      	movs	r2, #4
 800089c:	4013      	ands	r3, r2
 800089e:	d020      	beq.n	80008e2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	2220      	movs	r2, #32
 80008a8:	4013      	ands	r3, r2
 80008aa:	d107      	bne.n	80008bc <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	6812      	ldr	r2, [r2, #0]
 80008b4:	6812      	ldr	r2, [r2, #0]
 80008b6:	2104      	movs	r1, #4
 80008b8:	438a      	bics	r2, r1
 80008ba:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80008c4:	2104      	movs	r1, #4
 80008c6:	4091      	lsls	r1, r2
 80008c8:	000a      	movs	r2, r1
 80008ca:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d100      	bne.n	80008d6 <HAL_DMA_IRQHandler+0x66>
 80008d4:	e06a      	b.n	80009ac <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	0010      	movs	r0, r2
 80008de:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80008e0:	e064      	b.n	80009ac <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	2202      	movs	r2, #2
 80008e8:	409a      	lsls	r2, r3
 80008ea:	0013      	movs	r3, r2
 80008ec:	68fa      	ldr	r2, [r7, #12]
 80008ee:	4013      	ands	r3, r2
 80008f0:	d02b      	beq.n	800094a <HAL_DMA_IRQHandler+0xda>
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	2202      	movs	r2, #2
 80008f6:	4013      	ands	r3, r2
 80008f8:	d027      	beq.n	800094a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2220      	movs	r2, #32
 8000902:	4013      	ands	r3, r2
 8000904:	d10b      	bne.n	800091e <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	6812      	ldr	r2, [r2, #0]
 800090e:	6812      	ldr	r2, [r2, #0]
 8000910:	210a      	movs	r1, #10
 8000912:	438a      	bics	r2, r1
 8000914:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2221      	movs	r2, #33	; 0x21
 800091a:	2101      	movs	r1, #1
 800091c:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000922:	687a      	ldr	r2, [r7, #4]
 8000924:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000926:	2102      	movs	r1, #2
 8000928:	4091      	lsls	r1, r2
 800092a:	000a      	movs	r2, r1
 800092c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2220      	movs	r2, #32
 8000932:	2100      	movs	r1, #0
 8000934:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800093a:	2b00      	cmp	r3, #0
 800093c:	d036      	beq.n	80009ac <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	0010      	movs	r0, r2
 8000946:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000948:	e030      	b.n	80009ac <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	2208      	movs	r2, #8
 8000950:	409a      	lsls	r2, r3
 8000952:	0013      	movs	r3, r2
 8000954:	68fa      	ldr	r2, [r7, #12]
 8000956:	4013      	ands	r3, r2
 8000958:	d028      	beq.n	80009ac <HAL_DMA_IRQHandler+0x13c>
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	2208      	movs	r2, #8
 800095e:	4013      	ands	r3, r2
 8000960:	d024      	beq.n	80009ac <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	6812      	ldr	r2, [r2, #0]
 800096a:	6812      	ldr	r2, [r2, #0]
 800096c:	210e      	movs	r1, #14
 800096e:	438a      	bics	r2, r1
 8000970:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800097a:	2101      	movs	r1, #1
 800097c:	4091      	lsls	r1, r2
 800097e:	000a      	movs	r2, r1
 8000980:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2201      	movs	r2, #1
 8000986:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2221      	movs	r2, #33	; 0x21
 800098c:	2101      	movs	r1, #1
 800098e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2220      	movs	r2, #32
 8000994:	2100      	movs	r1, #0
 8000996:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099c:	2b00      	cmp	r3, #0
 800099e:	d005      	beq.n	80009ac <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	0010      	movs	r0, r2
 80009a8:	4798      	blx	r3
    }
   }
}  
 80009aa:	e7ff      	b.n	80009ac <HAL_DMA_IRQHandler+0x13c>
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b004      	add	sp, #16
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	001a      	movs	r2, r3
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <DMA_CalcBaseAndBitshift+0x60>)
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d810      	bhi.n	80009ea <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <DMA_CalcBaseAndBitshift+0x64>)
 80009ce:	4694      	mov	ip, r2
 80009d0:	4463      	add	r3, ip
 80009d2:	2114      	movs	r1, #20
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff fb95 	bl	8000104 <__udivsi3>
 80009da:	0003      	movs	r3, r0
 80009dc:	009a      	lsls	r2, r3, #2
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <DMA_CalcBaseAndBitshift+0x68>)
 80009e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80009e8:	e00f      	b.n	8000a0a <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a0c      	ldr	r2, [pc, #48]	; (8000a20 <DMA_CalcBaseAndBitshift+0x6c>)
 80009f0:	4694      	mov	ip, r2
 80009f2:	4463      	add	r3, ip
 80009f4:	2114      	movs	r1, #20
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff fb84 	bl	8000104 <__udivsi3>
 80009fc:	0003      	movs	r3, r0
 80009fe:	009a      	lsls	r2, r3, #2
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <DMA_CalcBaseAndBitshift+0x70>)
 8000a08:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	b002      	add	sp, #8
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	40020407 	.word	0x40020407
 8000a18:	bffdfff8 	.word	0xbffdfff8
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	bffdfbf8 	.word	0xbffdfbf8
 8000a24:	40020400 	.word	0x40020400

08000a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000a3e:	e155      	b.n	8000cec <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2101      	movs	r1, #1
 8000a46:	697a      	ldr	r2, [r7, #20]
 8000a48:	4091      	lsls	r1, r2
 8000a4a:	000a      	movs	r2, r1
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d100      	bne.n	8000a58 <HAL_GPIO_Init+0x30>
 8000a56:	e146      	b.n	8000ce6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d003      	beq.n	8000a68 <HAL_GPIO_Init+0x40>
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b12      	cmp	r3, #18
 8000a66:	d123      	bne.n	8000ab0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	08da      	lsrs	r2, r3, #3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3208      	adds	r2, #8
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	58d3      	ldr	r3, [r2, r3]
 8000a74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	2207      	movs	r2, #7
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	220f      	movs	r2, #15
 8000a80:	409a      	lsls	r2, r3
 8000a82:	0013      	movs	r3, r2
 8000a84:	43da      	mvns	r2, r3
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	691a      	ldr	r2, [r3, #16]
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	2107      	movs	r1, #7
 8000a94:	400b      	ands	r3, r1
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	0013      	movs	r3, r2
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	08da      	lsrs	r2, r3, #3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3208      	adds	r2, #8
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	6939      	ldr	r1, [r7, #16]
 8000aae:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	2203      	movs	r2, #3
 8000abc:	409a      	lsls	r2, r3
 8000abe:	0013      	movs	r3, r2
 8000ac0:	43da      	mvns	r2, r3
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2203      	movs	r2, #3
 8000ace:	401a      	ands	r2, r3
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	409a      	lsls	r2, r3
 8000ad6:	0013      	movs	r3, r2
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d00b      	beq.n	8000b04 <HAL_GPIO_Init+0xdc>
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d007      	beq.n	8000b04 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af8:	2b11      	cmp	r3, #17
 8000afa:	d003      	beq.n	8000b04 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	2b12      	cmp	r3, #18
 8000b02:	d130      	bne.n	8000b66 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689b      	ldr	r3, [r3, #8]
 8000b08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	2203      	movs	r2, #3
 8000b10:	409a      	lsls	r2, r3
 8000b12:	0013      	movs	r3, r2
 8000b14:	43da      	mvns	r2, r3
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	4013      	ands	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	409a      	lsls	r2, r3
 8000b26:	0013      	movs	r3, r2
 8000b28:	693a      	ldr	r2, [r7, #16]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	43da      	mvns	r2, r3
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	091b      	lsrs	r3, r3, #4
 8000b50:	2201      	movs	r2, #1
 8000b52:	401a      	ands	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
 8000b58:	0013      	movs	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	2203      	movs	r2, #3
 8000b72:	409a      	lsls	r2, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	43da      	mvns	r2, r3
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	409a      	lsls	r2, r3
 8000b88:	0013      	movs	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	055b      	lsls	r3, r3, #21
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	d100      	bne.n	8000ba4 <HAL_GPIO_Init+0x17c>
 8000ba2:	e0a0      	b.n	8000ce6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba4:	4b57      	ldr	r3, [pc, #348]	; (8000d04 <HAL_GPIO_Init+0x2dc>)
 8000ba6:	4a57      	ldr	r2, [pc, #348]	; (8000d04 <HAL_GPIO_Init+0x2dc>)
 8000ba8:	6992      	ldr	r2, [r2, #24]
 8000baa:	2101      	movs	r1, #1
 8000bac:	430a      	orrs	r2, r1
 8000bae:	619a      	str	r2, [r3, #24]
 8000bb0:	4b54      	ldr	r3, [pc, #336]	; (8000d04 <HAL_GPIO_Init+0x2dc>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000bbc:	4a52      	ldr	r2, [pc, #328]	; (8000d08 <HAL_GPIO_Init+0x2e0>)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	589b      	ldr	r3, [r3, r2]
 8000bc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	2203      	movs	r2, #3
 8000bce:	4013      	ands	r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	220f      	movs	r2, #15
 8000bd4:	409a      	lsls	r2, r3
 8000bd6:	0013      	movs	r3, r2
 8000bd8:	43da      	mvns	r2, r3
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	2390      	movs	r3, #144	; 0x90
 8000be4:	05db      	lsls	r3, r3, #23
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d019      	beq.n	8000c1e <HAL_GPIO_Init+0x1f6>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a47      	ldr	r2, [pc, #284]	; (8000d0c <HAL_GPIO_Init+0x2e4>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d013      	beq.n	8000c1a <HAL_GPIO_Init+0x1f2>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a46      	ldr	r2, [pc, #280]	; (8000d10 <HAL_GPIO_Init+0x2e8>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d00d      	beq.n	8000c16 <HAL_GPIO_Init+0x1ee>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a45      	ldr	r2, [pc, #276]	; (8000d14 <HAL_GPIO_Init+0x2ec>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d007      	beq.n	8000c12 <HAL_GPIO_Init+0x1ea>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4a44      	ldr	r2, [pc, #272]	; (8000d18 <HAL_GPIO_Init+0x2f0>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d101      	bne.n	8000c0e <HAL_GPIO_Init+0x1e6>
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	e008      	b.n	8000c20 <HAL_GPIO_Init+0x1f8>
 8000c0e:	2305      	movs	r3, #5
 8000c10:	e006      	b.n	8000c20 <HAL_GPIO_Init+0x1f8>
 8000c12:	2303      	movs	r3, #3
 8000c14:	e004      	b.n	8000c20 <HAL_GPIO_Init+0x1f8>
 8000c16:	2302      	movs	r3, #2
 8000c18:	e002      	b.n	8000c20 <HAL_GPIO_Init+0x1f8>
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e000      	b.n	8000c20 <HAL_GPIO_Init+0x1f8>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	2103      	movs	r1, #3
 8000c24:	400a      	ands	r2, r1
 8000c26:	0092      	lsls	r2, r2, #2
 8000c28:	4093      	lsls	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000c30:	4935      	ldr	r1, [pc, #212]	; (8000d08 <HAL_GPIO_Init+0x2e0>)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	089b      	lsrs	r3, r3, #2
 8000c36:	3302      	adds	r3, #2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c3e:	4b37      	ldr	r3, [pc, #220]	; (8000d1c <HAL_GPIO_Init+0x2f4>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	43da      	mvns	r2, r3
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	2380      	movs	r3, #128	; 0x80
 8000c54:	025b      	lsls	r3, r3, #9
 8000c56:	4013      	ands	r3, r2
 8000c58:	d003      	beq.n	8000c62 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c62:	4b2e      	ldr	r3, [pc, #184]	; (8000d1c <HAL_GPIO_Init+0x2f4>)
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c68:	4b2c      	ldr	r3, [pc, #176]	; (8000d1c <HAL_GPIO_Init+0x2f4>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	43da      	mvns	r2, r3
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	4013      	ands	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685a      	ldr	r2, [r3, #4]
 8000c7c:	2380      	movs	r3, #128	; 0x80
 8000c7e:	029b      	lsls	r3, r3, #10
 8000c80:	4013      	ands	r3, r2
 8000c82:	d003      	beq.n	8000c8c <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c8c:	4b23      	ldr	r3, [pc, #140]	; (8000d1c <HAL_GPIO_Init+0x2f4>)
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c92:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <HAL_GPIO_Init+0x2f4>)
 8000c94:	689b      	ldr	r3, [r3, #8]
 8000c96:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	2380      	movs	r3, #128	; 0x80
 8000ca8:	035b      	lsls	r3, r3, #13
 8000caa:	4013      	ands	r3, r2
 8000cac:	d003      	beq.n	8000cb6 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cb6:	4b19      	ldr	r3, [pc, #100]	; (8000d1c <HAL_GPIO_Init+0x2f4>)
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cbc:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <HAL_GPIO_Init+0x2f4>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	43da      	mvns	r2, r3
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	039b      	lsls	r3, r3, #14
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	d003      	beq.n	8000ce0 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_GPIO_Init+0x2f4>)
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	40da      	lsrs	r2, r3
 8000cf4:	1e13      	subs	r3, r2, #0
 8000cf6:	d000      	beq.n	8000cfa <HAL_GPIO_Init+0x2d2>
 8000cf8:	e6a2      	b.n	8000a40 <HAL_GPIO_Init+0x18>
  } 
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b006      	add	sp, #24
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010000 	.word	0x40010000
 8000d0c:	48000400 	.word	0x48000400
 8000d10:	48000800 	.word	0x48000800
 8000d14:	48000c00 	.word	0x48000c00
 8000d18:	48001000 	.word	0x48001000
 8000d1c:	40010400 	.word	0x40010400

08000d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	0008      	movs	r0, r1
 8000d2a:	0011      	movs	r1, r2
 8000d2c:	1cbb      	adds	r3, r7, #2
 8000d2e:	1c02      	adds	r2, r0, #0
 8000d30:	801a      	strh	r2, [r3, #0]
 8000d32:	1c7b      	adds	r3, r7, #1
 8000d34:	1c0a      	adds	r2, r1, #0
 8000d36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d38:	1c7b      	adds	r3, r7, #1
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d004      	beq.n	8000d4a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d40:	1cbb      	adds	r3, r7, #2
 8000d42:	881a      	ldrh	r2, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d48:	e003      	b.n	8000d52 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d4a:	1cbb      	adds	r3, r7, #2
 8000d4c:	881a      	ldrh	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b002      	add	sp, #8
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	000a      	movs	r2, r1
 8000d64:	1cbb      	adds	r3, r7, #2
 8000d66:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	695a      	ldr	r2, [r3, #20]
 8000d6c:	1cbb      	adds	r3, r7, #2
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	405a      	eors	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	615a      	str	r2, [r3, #20]
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b002      	add	sp, #8
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2201      	movs	r2, #1
 8000d92:	4013      	ands	r3, r2
 8000d94:	d100      	bne.n	8000d98 <HAL_RCC_OscConfig+0x18>
 8000d96:	e08d      	b.n	8000eb4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d98:	4bc5      	ldr	r3, [pc, #788]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	220c      	movs	r2, #12
 8000d9e:	4013      	ands	r3, r2
 8000da0:	2b04      	cmp	r3, #4
 8000da2:	d00e      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000da4:	4bc2      	ldr	r3, [pc, #776]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	220c      	movs	r2, #12
 8000daa:	4013      	ands	r3, r2
 8000dac:	2b08      	cmp	r3, #8
 8000dae:	d116      	bne.n	8000dde <HAL_RCC_OscConfig+0x5e>
 8000db0:	4bbf      	ldr	r3, [pc, #764]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	23c0      	movs	r3, #192	; 0xc0
 8000db6:	025b      	lsls	r3, r3, #9
 8000db8:	401a      	ands	r2, r3
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	025b      	lsls	r3, r3, #9
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d10d      	bne.n	8000dde <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc2:	4bbb      	ldr	r3, [pc, #748]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	2380      	movs	r3, #128	; 0x80
 8000dc8:	029b      	lsls	r3, r3, #10
 8000dca:	4013      	ands	r3, r2
 8000dcc:	d100      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x50>
 8000dce:	e070      	b.n	8000eb2 <HAL_RCC_OscConfig+0x132>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d000      	beq.n	8000dda <HAL_RCC_OscConfig+0x5a>
 8000dd8:	e06b      	b.n	8000eb2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e327      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d107      	bne.n	8000df6 <HAL_RCC_OscConfig+0x76>
 8000de6:	4bb2      	ldr	r3, [pc, #712]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000de8:	4ab1      	ldr	r2, [pc, #708]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	2180      	movs	r1, #128	; 0x80
 8000dee:	0249      	lsls	r1, r1, #9
 8000df0:	430a      	orrs	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	e02f      	b.n	8000e56 <HAL_RCC_OscConfig+0xd6>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10c      	bne.n	8000e18 <HAL_RCC_OscConfig+0x98>
 8000dfe:	4bac      	ldr	r3, [pc, #688]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000e00:	4aab      	ldr	r2, [pc, #684]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000e02:	6812      	ldr	r2, [r2, #0]
 8000e04:	49ab      	ldr	r1, [pc, #684]	; (80010b4 <HAL_RCC_OscConfig+0x334>)
 8000e06:	400a      	ands	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	4ba9      	ldr	r3, [pc, #676]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000e0c:	4aa8      	ldr	r2, [pc, #672]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000e0e:	6812      	ldr	r2, [r2, #0]
 8000e10:	49a9      	ldr	r1, [pc, #676]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000e12:	400a      	ands	r2, r1
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	e01e      	b.n	8000e56 <HAL_RCC_OscConfig+0xd6>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b05      	cmp	r3, #5
 8000e1e:	d10e      	bne.n	8000e3e <HAL_RCC_OscConfig+0xbe>
 8000e20:	4ba3      	ldr	r3, [pc, #652]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000e22:	4aa3      	ldr	r2, [pc, #652]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000e24:	6812      	ldr	r2, [r2, #0]
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	02c9      	lsls	r1, r1, #11
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	4ba0      	ldr	r3, [pc, #640]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000e30:	4a9f      	ldr	r2, [pc, #636]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000e32:	6812      	ldr	r2, [r2, #0]
 8000e34:	2180      	movs	r1, #128	; 0x80
 8000e36:	0249      	lsls	r1, r1, #9
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	e00b      	b.n	8000e56 <HAL_RCC_OscConfig+0xd6>
 8000e3e:	4b9c      	ldr	r3, [pc, #624]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000e40:	4a9b      	ldr	r2, [pc, #620]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000e42:	6812      	ldr	r2, [r2, #0]
 8000e44:	499b      	ldr	r1, [pc, #620]	; (80010b4 <HAL_RCC_OscConfig+0x334>)
 8000e46:	400a      	ands	r2, r1
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	4b99      	ldr	r3, [pc, #612]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000e4c:	4a98      	ldr	r2, [pc, #608]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000e4e:	6812      	ldr	r2, [r2, #0]
 8000e50:	4999      	ldr	r1, [pc, #612]	; (80010b8 <HAL_RCC_OscConfig+0x338>)
 8000e52:	400a      	ands	r2, r1
 8000e54:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d014      	beq.n	8000e88 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e5e:	f7ff fba7 	bl	80005b0 <HAL_GetTick>
 8000e62:	0003      	movs	r3, r0
 8000e64:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e66:	e008      	b.n	8000e7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e68:	f7ff fba2 	bl	80005b0 <HAL_GetTick>
 8000e6c:	0002      	movs	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b64      	cmp	r3, #100	; 0x64
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e2d9      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7a:	4b8d      	ldr	r3, [pc, #564]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	2380      	movs	r3, #128	; 0x80
 8000e80:	029b      	lsls	r3, r3, #10
 8000e82:	4013      	ands	r3, r2
 8000e84:	d0f0      	beq.n	8000e68 <HAL_RCC_OscConfig+0xe8>
 8000e86:	e015      	b.n	8000eb4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e88:	f7ff fb92 	bl	80005b0 <HAL_GetTick>
 8000e8c:	0003      	movs	r3, r0
 8000e8e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e90:	e008      	b.n	8000ea4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e92:	f7ff fb8d 	bl	80005b0 <HAL_GetTick>
 8000e96:	0002      	movs	r2, r0
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2b64      	cmp	r3, #100	; 0x64
 8000e9e:	d901      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e2c4      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea4:	4b82      	ldr	r3, [pc, #520]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	029b      	lsls	r3, r3, #10
 8000eac:	4013      	ands	r3, r2
 8000eae:	d1f0      	bne.n	8000e92 <HAL_RCC_OscConfig+0x112>
 8000eb0:	e000      	b.n	8000eb4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2202      	movs	r2, #2
 8000eba:	4013      	ands	r3, r2
 8000ebc:	d100      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x140>
 8000ebe:	e06c      	b.n	8000f9a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ec0:	4b7b      	ldr	r3, [pc, #492]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	220c      	movs	r2, #12
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d00e      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000eca:	4b79      	ldr	r3, [pc, #484]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	220c      	movs	r2, #12
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2b08      	cmp	r3, #8
 8000ed4:	d11f      	bne.n	8000f16 <HAL_RCC_OscConfig+0x196>
 8000ed6:	4b76      	ldr	r3, [pc, #472]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	23c0      	movs	r3, #192	; 0xc0
 8000edc:	025b      	lsls	r3, r3, #9
 8000ede:	401a      	ands	r2, r3
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	021b      	lsls	r3, r3, #8
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d116      	bne.n	8000f16 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee8:	4b71      	ldr	r3, [pc, #452]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2202      	movs	r2, #2
 8000eee:	4013      	ands	r3, r2
 8000ef0:	d005      	beq.n	8000efe <HAL_RCC_OscConfig+0x17e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d001      	beq.n	8000efe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e297      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000efe:	4a6c      	ldr	r2, [pc, #432]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000f00:	4b6b      	ldr	r3, [pc, #428]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	21f8      	movs	r1, #248	; 0xf8
 8000f06:	438b      	bics	r3, r1
 8000f08:	0019      	movs	r1, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	430b      	orrs	r3, r1
 8000f12:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f14:	e041      	b.n	8000f9a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d024      	beq.n	8000f68 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f1e:	4b64      	ldr	r3, [pc, #400]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000f20:	4a63      	ldr	r2, [pc, #396]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	2101      	movs	r1, #1
 8000f26:	430a      	orrs	r2, r1
 8000f28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2a:	f7ff fb41 	bl	80005b0 <HAL_GetTick>
 8000f2e:	0003      	movs	r3, r0
 8000f30:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f34:	f7ff fb3c 	bl	80005b0 <HAL_GetTick>
 8000f38:	0002      	movs	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e273      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f46:	4b5a      	ldr	r3, [pc, #360]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d0f1      	beq.n	8000f34 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f50:	4a57      	ldr	r2, [pc, #348]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000f52:	4b57      	ldr	r3, [pc, #348]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	21f8      	movs	r1, #248	; 0xf8
 8000f58:	438b      	bics	r3, r1
 8000f5a:	0019      	movs	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	430b      	orrs	r3, r1
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e018      	b.n	8000f9a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f68:	4b51      	ldr	r3, [pc, #324]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000f6a:	4a51      	ldr	r2, [pc, #324]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000f6c:	6812      	ldr	r2, [r2, #0]
 8000f6e:	2101      	movs	r1, #1
 8000f70:	438a      	bics	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fb1c 	bl	80005b0 <HAL_GetTick>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f7c:	e008      	b.n	8000f90 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f7e:	f7ff fb17 	bl	80005b0 <HAL_GetTick>
 8000f82:	0002      	movs	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e24e      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f90:	4b47      	ldr	r3, [pc, #284]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2202      	movs	r2, #2
 8000f96:	4013      	ands	r3, r2
 8000f98:	d1f1      	bne.n	8000f7e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2208      	movs	r2, #8
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d036      	beq.n	8001012 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d019      	beq.n	8000fe0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fac:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000fae:	4a40      	ldr	r2, [pc, #256]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000fb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb8:	f7ff fafa 	bl	80005b0 <HAL_GetTick>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fc2:	f7ff faf5 	bl	80005b0 <HAL_GetTick>
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e22c      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd4:	4b36      	ldr	r3, [pc, #216]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	2202      	movs	r2, #2
 8000fda:	4013      	ands	r3, r2
 8000fdc:	d0f1      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x242>
 8000fde:	e018      	b.n	8001012 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fe0:	4b33      	ldr	r3, [pc, #204]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000fe2:	4a33      	ldr	r2, [pc, #204]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8000fe4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	438a      	bics	r2, r1
 8000fea:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fec:	f7ff fae0 	bl	80005b0 <HAL_GetTick>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff4:	e008      	b.n	8001008 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ff6:	f7ff fadb 	bl	80005b0 <HAL_GetTick>
 8000ffa:	0002      	movs	r2, r0
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d901      	bls.n	8001008 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	e212      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001008:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	2202      	movs	r2, #2
 800100e:	4013      	ands	r3, r2
 8001010:	d1f1      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2204      	movs	r2, #4
 8001018:	4013      	ands	r3, r2
 800101a:	d100      	bne.n	800101e <HAL_RCC_OscConfig+0x29e>
 800101c:	e0b6      	b.n	800118c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800101e:	2317      	movs	r3, #23
 8001020:	18fb      	adds	r3, r7, r3
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8001028:	69da      	ldr	r2, [r3, #28]
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	055b      	lsls	r3, r3, #21
 800102e:	4013      	ands	r3, r2
 8001030:	d111      	bne.n	8001056 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8001034:	4a1e      	ldr	r2, [pc, #120]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8001036:	69d2      	ldr	r2, [r2, #28]
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	0549      	lsls	r1, r1, #21
 800103c:	430a      	orrs	r2, r1
 800103e:	61da      	str	r2, [r3, #28]
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 8001042:	69da      	ldr	r2, [r3, #28]
 8001044:	2380      	movs	r3, #128	; 0x80
 8001046:	055b      	lsls	r3, r3, #21
 8001048:	4013      	ands	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800104e:	2317      	movs	r3, #23
 8001050:	18fb      	adds	r3, r7, r3
 8001052:	2201      	movs	r2, #1
 8001054:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_RCC_OscConfig+0x33c>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	4013      	ands	r3, r2
 8001060:	d11a      	bne.n	8001098 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <HAL_RCC_OscConfig+0x33c>)
 8001064:	4a15      	ldr	r2, [pc, #84]	; (80010bc <HAL_RCC_OscConfig+0x33c>)
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	2180      	movs	r1, #128	; 0x80
 800106a:	0049      	lsls	r1, r1, #1
 800106c:	430a      	orrs	r2, r1
 800106e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001070:	f7ff fa9e 	bl	80005b0 <HAL_GetTick>
 8001074:	0003      	movs	r3, r0
 8001076:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800107a:	f7ff fa99 	bl	80005b0 <HAL_GetTick>
 800107e:	0002      	movs	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b64      	cmp	r3, #100	; 0x64
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e1d0      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_RCC_OscConfig+0x33c>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4013      	ands	r3, r2
 8001096:	d0f0      	beq.n	800107a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d10f      	bne.n	80010c0 <HAL_RCC_OscConfig+0x340>
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 80010a2:	4a03      	ldr	r2, [pc, #12]	; (80010b0 <HAL_RCC_OscConfig+0x330>)
 80010a4:	6a12      	ldr	r2, [r2, #32]
 80010a6:	2101      	movs	r1, #1
 80010a8:	430a      	orrs	r2, r1
 80010aa:	621a      	str	r2, [r3, #32]
 80010ac:	e036      	b.n	800111c <HAL_RCC_OscConfig+0x39c>
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	40021000 	.word	0x40021000
 80010b4:	fffeffff 	.word	0xfffeffff
 80010b8:	fffbffff 	.word	0xfffbffff
 80010bc:	40007000 	.word	0x40007000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10c      	bne.n	80010e2 <HAL_RCC_OscConfig+0x362>
 80010c8:	4bc9      	ldr	r3, [pc, #804]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80010ca:	4ac9      	ldr	r2, [pc, #804]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80010cc:	6a12      	ldr	r2, [r2, #32]
 80010ce:	2101      	movs	r1, #1
 80010d0:	438a      	bics	r2, r1
 80010d2:	621a      	str	r2, [r3, #32]
 80010d4:	4bc6      	ldr	r3, [pc, #792]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80010d6:	4ac6      	ldr	r2, [pc, #792]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80010d8:	6a12      	ldr	r2, [r2, #32]
 80010da:	2104      	movs	r1, #4
 80010dc:	438a      	bics	r2, r1
 80010de:	621a      	str	r2, [r3, #32]
 80010e0:	e01c      	b.n	800111c <HAL_RCC_OscConfig+0x39c>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2b05      	cmp	r3, #5
 80010e8:	d10c      	bne.n	8001104 <HAL_RCC_OscConfig+0x384>
 80010ea:	4bc1      	ldr	r3, [pc, #772]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80010ec:	4ac0      	ldr	r2, [pc, #768]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80010ee:	6a12      	ldr	r2, [r2, #32]
 80010f0:	2104      	movs	r1, #4
 80010f2:	430a      	orrs	r2, r1
 80010f4:	621a      	str	r2, [r3, #32]
 80010f6:	4bbe      	ldr	r3, [pc, #760]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80010f8:	4abd      	ldr	r2, [pc, #756]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80010fa:	6a12      	ldr	r2, [r2, #32]
 80010fc:	2101      	movs	r1, #1
 80010fe:	430a      	orrs	r2, r1
 8001100:	621a      	str	r2, [r3, #32]
 8001102:	e00b      	b.n	800111c <HAL_RCC_OscConfig+0x39c>
 8001104:	4bba      	ldr	r3, [pc, #744]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001106:	4aba      	ldr	r2, [pc, #744]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001108:	6a12      	ldr	r2, [r2, #32]
 800110a:	2101      	movs	r1, #1
 800110c:	438a      	bics	r2, r1
 800110e:	621a      	str	r2, [r3, #32]
 8001110:	4bb7      	ldr	r3, [pc, #732]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001112:	4ab7      	ldr	r2, [pc, #732]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001114:	6a12      	ldr	r2, [r2, #32]
 8001116:	2104      	movs	r1, #4
 8001118:	438a      	bics	r2, r1
 800111a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d014      	beq.n	800114e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001124:	f7ff fa44 	bl	80005b0 <HAL_GetTick>
 8001128:	0003      	movs	r3, r0
 800112a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800112c:	e009      	b.n	8001142 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800112e:	f7ff fa3f 	bl	80005b0 <HAL_GetTick>
 8001132:	0002      	movs	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	4aae      	ldr	r2, [pc, #696]	; (80013f4 <HAL_RCC_OscConfig+0x674>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e175      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001142:	4bab      	ldr	r3, [pc, #684]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001144:	6a1b      	ldr	r3, [r3, #32]
 8001146:	2202      	movs	r2, #2
 8001148:	4013      	ands	r3, r2
 800114a:	d0f0      	beq.n	800112e <HAL_RCC_OscConfig+0x3ae>
 800114c:	e013      	b.n	8001176 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114e:	f7ff fa2f 	bl	80005b0 <HAL_GetTick>
 8001152:	0003      	movs	r3, r0
 8001154:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001156:	e009      	b.n	800116c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001158:	f7ff fa2a 	bl	80005b0 <HAL_GetTick>
 800115c:	0002      	movs	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	4aa4      	ldr	r2, [pc, #656]	; (80013f4 <HAL_RCC_OscConfig+0x674>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e160      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800116c:	4ba0      	ldr	r3, [pc, #640]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	2202      	movs	r2, #2
 8001172:	4013      	ands	r3, r2
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001176:	2317      	movs	r3, #23
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d105      	bne.n	800118c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001180:	4b9b      	ldr	r3, [pc, #620]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001182:	4a9b      	ldr	r2, [pc, #620]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001184:	69d2      	ldr	r2, [r2, #28]
 8001186:	499c      	ldr	r1, [pc, #624]	; (80013f8 <HAL_RCC_OscConfig+0x678>)
 8001188:	400a      	ands	r2, r1
 800118a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2210      	movs	r2, #16
 8001192:	4013      	ands	r3, r2
 8001194:	d063      	beq.n	800125e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d12a      	bne.n	80011f4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800119e:	4b94      	ldr	r3, [pc, #592]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80011a0:	4a93      	ldr	r2, [pc, #588]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80011a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011a4:	2104      	movs	r1, #4
 80011a6:	430a      	orrs	r2, r1
 80011a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80011aa:	4b91      	ldr	r3, [pc, #580]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80011ac:	4a90      	ldr	r2, [pc, #576]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80011ae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011b0:	2101      	movs	r1, #1
 80011b2:	430a      	orrs	r2, r1
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b6:	f7ff f9fb 	bl	80005b0 <HAL_GetTick>
 80011ba:	0003      	movs	r3, r0
 80011bc:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011c0:	f7ff f9f6 	bl	80005b0 <HAL_GetTick>
 80011c4:	0002      	movs	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e12d      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011d2:	4b87      	ldr	r3, [pc, #540]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80011d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d6:	2202      	movs	r2, #2
 80011d8:	4013      	ands	r3, r2
 80011da:	d0f1      	beq.n	80011c0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011dc:	4a84      	ldr	r2, [pc, #528]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80011de:	4b84      	ldr	r3, [pc, #528]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80011e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e2:	21f8      	movs	r1, #248	; 0xf8
 80011e4:	438b      	bics	r3, r1
 80011e6:	0019      	movs	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	430b      	orrs	r3, r1
 80011f0:	6353      	str	r3, [r2, #52]	; 0x34
 80011f2:	e034      	b.n	800125e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	3305      	adds	r3, #5
 80011fa:	d111      	bne.n	8001220 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80011fc:	4b7c      	ldr	r3, [pc, #496]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80011fe:	4a7c      	ldr	r2, [pc, #496]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001200:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001202:	2104      	movs	r1, #4
 8001204:	438a      	bics	r2, r1
 8001206:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001208:	4a79      	ldr	r2, [pc, #484]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 800120a:	4b79      	ldr	r3, [pc, #484]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 800120c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800120e:	21f8      	movs	r1, #248	; 0xf8
 8001210:	438b      	bics	r3, r1
 8001212:	0019      	movs	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	430b      	orrs	r3, r1
 800121c:	6353      	str	r3, [r2, #52]	; 0x34
 800121e:	e01e      	b.n	800125e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001220:	4b73      	ldr	r3, [pc, #460]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001222:	4a73      	ldr	r2, [pc, #460]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001224:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001226:	2104      	movs	r1, #4
 8001228:	430a      	orrs	r2, r1
 800122a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800122c:	4b70      	ldr	r3, [pc, #448]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 800122e:	4a70      	ldr	r2, [pc, #448]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001230:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001232:	2101      	movs	r1, #1
 8001234:	438a      	bics	r2, r1
 8001236:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001238:	f7ff f9ba 	bl	80005b0 <HAL_GetTick>
 800123c:	0003      	movs	r3, r0
 800123e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001242:	f7ff f9b5 	bl	80005b0 <HAL_GetTick>
 8001246:	0002      	movs	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e0ec      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001254:	4b66      	ldr	r3, [pc, #408]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001258:	2202      	movs	r2, #2
 800125a:	4013      	ands	r3, r2
 800125c:	d1f1      	bne.n	8001242 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2220      	movs	r2, #32
 8001264:	4013      	ands	r3, r2
 8001266:	d05c      	beq.n	8001322 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001268:	4b61      	ldr	r3, [pc, #388]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	220c      	movs	r2, #12
 800126e:	4013      	ands	r3, r2
 8001270:	2b0c      	cmp	r3, #12
 8001272:	d00e      	beq.n	8001292 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001274:	4b5e      	ldr	r3, [pc, #376]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	220c      	movs	r2, #12
 800127a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800127c:	2b08      	cmp	r3, #8
 800127e:	d114      	bne.n	80012aa <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001280:	4b5b      	ldr	r3, [pc, #364]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001282:	685a      	ldr	r2, [r3, #4]
 8001284:	23c0      	movs	r3, #192	; 0xc0
 8001286:	025b      	lsls	r3, r3, #9
 8001288:	401a      	ands	r2, r3
 800128a:	23c0      	movs	r3, #192	; 0xc0
 800128c:	025b      	lsls	r3, r3, #9
 800128e:	429a      	cmp	r2, r3
 8001290:	d10b      	bne.n	80012aa <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001292:	4b57      	ldr	r3, [pc, #348]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	025b      	lsls	r3, r3, #9
 800129a:	4013      	ands	r3, r2
 800129c:	d040      	beq.n	8001320 <HAL_RCC_OscConfig+0x5a0>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d03c      	beq.n	8001320 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e0c1      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6a1b      	ldr	r3, [r3, #32]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d01b      	beq.n	80012ea <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80012b2:	4b4f      	ldr	r3, [pc, #316]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80012b4:	4a4e      	ldr	r2, [pc, #312]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80012b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	0249      	lsls	r1, r1, #9
 80012bc:	430a      	orrs	r2, r1
 80012be:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff f976 	bl	80005b0 <HAL_GetTick>
 80012c4:	0003      	movs	r3, r0
 80012c6:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80012c8:	e008      	b.n	80012dc <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ca:	f7ff f971 	bl	80005b0 <HAL_GetTick>
 80012ce:	0002      	movs	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d901      	bls.n	80012dc <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e0a8      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80012dc:	4b44      	ldr	r3, [pc, #272]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80012de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	025b      	lsls	r3, r3, #9
 80012e4:	4013      	ands	r3, r2
 80012e6:	d0f0      	beq.n	80012ca <HAL_RCC_OscConfig+0x54a>
 80012e8:	e01b      	b.n	8001322 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80012ea:	4b41      	ldr	r3, [pc, #260]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80012ec:	4a40      	ldr	r2, [pc, #256]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80012ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012f0:	4942      	ldr	r1, [pc, #264]	; (80013fc <HAL_RCC_OscConfig+0x67c>)
 80012f2:	400a      	ands	r2, r1
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f6:	f7ff f95b 	bl	80005b0 <HAL_GetTick>
 80012fa:	0003      	movs	r3, r0
 80012fc:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001300:	f7ff f956 	bl	80005b0 <HAL_GetTick>
 8001304:	0002      	movs	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e08d      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001312:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001316:	2380      	movs	r3, #128	; 0x80
 8001318:	025b      	lsls	r3, r3, #9
 800131a:	4013      	ands	r3, r2
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x580>
 800131e:	e000      	b.n	8001322 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001320:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	2b00      	cmp	r3, #0
 8001328:	d100      	bne.n	800132c <HAL_RCC_OscConfig+0x5ac>
 800132a:	e07f      	b.n	800142c <HAL_RCC_OscConfig+0x6ac>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800132c:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	220c      	movs	r2, #12
 8001332:	4013      	ands	r3, r2
 8001334:	2b08      	cmp	r3, #8
 8001336:	d100      	bne.n	800133a <HAL_RCC_OscConfig+0x5ba>
 8001338:	e076      	b.n	8001428 <HAL_RCC_OscConfig+0x6a8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	2b02      	cmp	r3, #2
 8001340:	d14b      	bne.n	80013da <HAL_RCC_OscConfig+0x65a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001342:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001344:	4a2a      	ldr	r2, [pc, #168]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	492d      	ldr	r1, [pc, #180]	; (8001400 <HAL_RCC_OscConfig+0x680>)
 800134a:	400a      	ands	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff f92f 	bl	80005b0 <HAL_GetTick>
 8001352:	0003      	movs	r3, r0
 8001354:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001358:	f7ff f92a 	bl	80005b0 <HAL_GetTick>
 800135c:	0002      	movs	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e061      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	049b      	lsls	r3, r3, #18
 8001372:	4013      	ands	r3, r2
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001376:	4a1e      	ldr	r2, [pc, #120]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	210f      	movs	r1, #15
 800137e:	438b      	bics	r3, r1
 8001380:	0019      	movs	r1, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	430b      	orrs	r3, r1
 8001388:	62d3      	str	r3, [r2, #44]	; 0x2c
 800138a:	4a19      	ldr	r2, [pc, #100]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	491c      	ldr	r1, [pc, #112]	; (8001404 <HAL_RCC_OscConfig+0x684>)
 8001392:	4019      	ands	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139c:	4303      	orrs	r3, r0
 800139e:	430b      	orrs	r3, r1
 80013a0:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80013a4:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	2180      	movs	r1, #128	; 0x80
 80013aa:	0449      	lsls	r1, r1, #17
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b0:	f7ff f8fe 	bl	80005b0 <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ba:	f7ff f8f9 	bl	80005b0 <HAL_GetTick>
 80013be:	0002      	movs	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e030      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	049b      	lsls	r3, r3, #18
 80013d4:	4013      	ands	r3, r2
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x63a>
 80013d8:	e028      	b.n	800142c <HAL_RCC_OscConfig+0x6ac>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013da:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <HAL_RCC_OscConfig+0x670>)
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	4907      	ldr	r1, [pc, #28]	; (8001400 <HAL_RCC_OscConfig+0x680>)
 80013e2:	400a      	ands	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7ff f8e3 	bl	80005b0 <HAL_GetTick>
 80013ea:	0003      	movs	r3, r0
 80013ec:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ee:	e014      	b.n	800141a <HAL_RCC_OscConfig+0x69a>
 80013f0:	40021000 	.word	0x40021000
 80013f4:	00001388 	.word	0x00001388
 80013f8:	efffffff 	.word	0xefffffff
 80013fc:	fffeffff 	.word	0xfffeffff
 8001400:	feffffff 	.word	0xfeffffff
 8001404:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001408:	f7ff f8d2 	bl	80005b0 <HAL_GetTick>
 800140c:	0002      	movs	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e009      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <HAL_RCC_OscConfig+0x6b8>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	049b      	lsls	r3, r3, #18
 8001422:	4013      	ands	r3, r2
 8001424:	d1f0      	bne.n	8001408 <HAL_RCC_OscConfig+0x688>
 8001426:	e001      	b.n	800142c <HAL_RCC_OscConfig+0x6ac>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e000      	b.n	800142e <HAL_RCC_OscConfig+0x6ae>
    }
  }
  
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	0018      	movs	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	b006      	add	sp, #24
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	40021000 	.word	0x40021000

0800143c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800144a:	4b7a      	ldr	r3, [pc, #488]	; (8001634 <HAL_RCC_ClockConfig+0x1f8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2201      	movs	r2, #1
 8001450:	401a      	ands	r2, r3
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d211      	bcs.n	800147c <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001458:	4b76      	ldr	r3, [pc, #472]	; (8001634 <HAL_RCC_ClockConfig+0x1f8>)
 800145a:	4a76      	ldr	r2, [pc, #472]	; (8001634 <HAL_RCC_ClockConfig+0x1f8>)
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	2101      	movs	r1, #1
 8001460:	438a      	bics	r2, r1
 8001462:	0011      	movs	r1, r2
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800146a:	4b72      	ldr	r3, [pc, #456]	; (8001634 <HAL_RCC_ClockConfig+0x1f8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2201      	movs	r2, #1
 8001470:	401a      	ands	r2, r3
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d001      	beq.n	800147c <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e0d7      	b.n	800162c <HAL_RCC_ClockConfig+0x1f0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2202      	movs	r2, #2
 8001482:	4013      	ands	r3, r2
 8001484:	d009      	beq.n	800149a <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001486:	4a6c      	ldr	r2, [pc, #432]	; (8001638 <HAL_RCC_ClockConfig+0x1fc>)
 8001488:	4b6b      	ldr	r3, [pc, #428]	; (8001638 <HAL_RCC_ClockConfig+0x1fc>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	21f0      	movs	r1, #240	; 0xf0
 800148e:	438b      	bics	r3, r1
 8001490:	0019      	movs	r1, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	430b      	orrs	r3, r1
 8001498:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2201      	movs	r2, #1
 80014a0:	4013      	ands	r3, r2
 80014a2:	d100      	bne.n	80014a6 <HAL_RCC_ClockConfig+0x6a>
 80014a4:	e089      	b.n	80015ba <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d107      	bne.n	80014be <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ae:	4b62      	ldr	r3, [pc, #392]	; (8001638 <HAL_RCC_ClockConfig+0x1fc>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	029b      	lsls	r3, r3, #10
 80014b6:	4013      	ands	r3, r2
 80014b8:	d120      	bne.n	80014fc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e0b6      	b.n	800162c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d107      	bne.n	80014d6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014c6:	4b5c      	ldr	r3, [pc, #368]	; (8001638 <HAL_RCC_ClockConfig+0x1fc>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	2380      	movs	r3, #128	; 0x80
 80014cc:	049b      	lsls	r3, r3, #18
 80014ce:	4013      	ands	r3, r2
 80014d0:	d114      	bne.n	80014fc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0aa      	b.n	800162c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b03      	cmp	r3, #3
 80014dc:	d107      	bne.n	80014ee <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014de:	4b56      	ldr	r3, [pc, #344]	; (8001638 <HAL_RCC_ClockConfig+0x1fc>)
 80014e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014e2:	2380      	movs	r3, #128	; 0x80
 80014e4:	025b      	lsls	r3, r3, #9
 80014e6:	4013      	ands	r3, r2
 80014e8:	d108      	bne.n	80014fc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e09e      	b.n	800162c <HAL_RCC_ClockConfig+0x1f0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014ee:	4b52      	ldr	r3, [pc, #328]	; (8001638 <HAL_RCC_ClockConfig+0x1fc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2202      	movs	r2, #2
 80014f4:	4013      	ands	r3, r2
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e097      	b.n	800162c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014fc:	4a4e      	ldr	r2, [pc, #312]	; (8001638 <HAL_RCC_ClockConfig+0x1fc>)
 80014fe:	4b4e      	ldr	r3, [pc, #312]	; (8001638 <HAL_RCC_ClockConfig+0x1fc>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2103      	movs	r1, #3
 8001504:	438b      	bics	r3, r1
 8001506:	0019      	movs	r1, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	430b      	orrs	r3, r1
 800150e:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001510:	f7ff f84e 	bl	80005b0 <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d111      	bne.n	8001544 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001520:	e009      	b.n	8001536 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001522:	f7ff f845 	bl	80005b0 <HAL_GetTick>
 8001526:	0002      	movs	r2, r0
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	4a43      	ldr	r2, [pc, #268]	; (800163c <HAL_RCC_ClockConfig+0x200>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e07a      	b.n	800162c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001536:	4b40      	ldr	r3, [pc, #256]	; (8001638 <HAL_RCC_ClockConfig+0x1fc>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	220c      	movs	r2, #12
 800153c:	4013      	ands	r3, r2
 800153e:	2b04      	cmp	r3, #4
 8001540:	d1ef      	bne.n	8001522 <HAL_RCC_ClockConfig+0xe6>
 8001542:	e03a      	b.n	80015ba <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b02      	cmp	r3, #2
 800154a:	d111      	bne.n	8001570 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800154c:	e009      	b.n	8001562 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154e:	f7ff f82f 	bl	80005b0 <HAL_GetTick>
 8001552:	0002      	movs	r2, r0
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	4a38      	ldr	r2, [pc, #224]	; (800163c <HAL_RCC_ClockConfig+0x200>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e064      	b.n	800162c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001562:	4b35      	ldr	r3, [pc, #212]	; (8001638 <HAL_RCC_ClockConfig+0x1fc>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	220c      	movs	r2, #12
 8001568:	4013      	ands	r3, r2
 800156a:	2b08      	cmp	r3, #8
 800156c:	d1ef      	bne.n	800154e <HAL_RCC_ClockConfig+0x112>
 800156e:	e024      	b.n	80015ba <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b03      	cmp	r3, #3
 8001576:	d11b      	bne.n	80015b0 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001578:	e009      	b.n	800158e <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800157a:	f7ff f819 	bl	80005b0 <HAL_GetTick>
 800157e:	0002      	movs	r2, r0
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	4a2d      	ldr	r2, [pc, #180]	; (800163c <HAL_RCC_ClockConfig+0x200>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e04e      	b.n	800162c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 800158e:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <HAL_RCC_ClockConfig+0x1fc>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	220c      	movs	r2, #12
 8001594:	4013      	ands	r3, r2
 8001596:	2b0c      	cmp	r3, #12
 8001598:	d1ef      	bne.n	800157a <HAL_RCC_ClockConfig+0x13e>
 800159a:	e00e      	b.n	80015ba <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159c:	f7ff f808 	bl	80005b0 <HAL_GetTick>
 80015a0:	0002      	movs	r2, r0
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	4a25      	ldr	r2, [pc, #148]	; (800163c <HAL_RCC_ClockConfig+0x200>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e03d      	b.n	800162c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80015b0:	4b21      	ldr	r3, [pc, #132]	; (8001638 <HAL_RCC_ClockConfig+0x1fc>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	220c      	movs	r2, #12
 80015b6:	4013      	ands	r3, r2
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80015ba:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <HAL_RCC_ClockConfig+0x1f8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2201      	movs	r2, #1
 80015c0:	401a      	ands	r2, r3
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d911      	bls.n	80015ec <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_RCC_ClockConfig+0x1f8>)
 80015ca:	4a1a      	ldr	r2, [pc, #104]	; (8001634 <HAL_RCC_ClockConfig+0x1f8>)
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	2101      	movs	r1, #1
 80015d0:	438a      	bics	r2, r1
 80015d2:	0011      	movs	r1, r2
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <HAL_RCC_ClockConfig+0x1f8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2201      	movs	r2, #1
 80015e0:	401a      	ands	r2, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d001      	beq.n	80015ec <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e01f      	b.n	800162c <HAL_RCC_ClockConfig+0x1f0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2204      	movs	r2, #4
 80015f2:	4013      	ands	r3, r2
 80015f4:	d008      	beq.n	8001608 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015f6:	4a10      	ldr	r2, [pc, #64]	; (8001638 <HAL_RCC_ClockConfig+0x1fc>)
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <HAL_RCC_ClockConfig+0x1fc>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4910      	ldr	r1, [pc, #64]	; (8001640 <HAL_RCC_ClockConfig+0x204>)
 80015fe:	4019      	ands	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	430b      	orrs	r3, r1
 8001606:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001608:	f000 f820 	bl	800164c <HAL_RCC_GetSysClockFreq>
 800160c:	0001      	movs	r1, r0
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_RCC_ClockConfig+0x1fc>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	220f      	movs	r2, #15
 8001616:	4013      	ands	r3, r2
 8001618:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <HAL_RCC_ClockConfig+0x208>)
 800161a:	5cd3      	ldrb	r3, [r2, r3]
 800161c:	000a      	movs	r2, r1
 800161e:	40da      	lsrs	r2, r3
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_RCC_ClockConfig+0x20c>)
 8001622:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001624:	2000      	movs	r0, #0
 8001626:	f7fe ff9b 	bl	8000560 <HAL_InitTick>
  
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
}
 800162c:	0018      	movs	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	b004      	add	sp, #16
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40022000 	.word	0x40022000
 8001638:	40021000 	.word	0x40021000
 800163c:	00001388 	.word	0x00001388
 8001640:	fffff8ff 	.word	0xfffff8ff
 8001644:	08002e04 	.word	0x08002e04
 8001648:	20000018 	.word	0x20000018

0800164c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b08f      	sub	sp, #60	; 0x3c
 8001650:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001652:	2314      	movs	r3, #20
 8001654:	18fb      	adds	r3, r7, r3
 8001656:	4a37      	ldr	r2, [pc, #220]	; (8001734 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001658:	ca13      	ldmia	r2!, {r0, r1, r4}
 800165a:	c313      	stmia	r3!, {r0, r1, r4}
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	4a35      	ldr	r2, [pc, #212]	; (8001738 <HAL_RCC_GetSysClockFreq+0xec>)
 8001664:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001666:	c313      	stmia	r3!, {r0, r1, r4}
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001670:	2300      	movs	r3, #0
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
 8001674:	2300      	movs	r3, #0
 8001676:	637b      	str	r3, [r7, #52]	; 0x34
 8001678:	2300      	movs	r3, #0
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800167c:	2300      	movs	r3, #0
 800167e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001680:	4b2e      	ldr	r3, [pc, #184]	; (800173c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001688:	220c      	movs	r2, #12
 800168a:	4013      	ands	r3, r2
 800168c:	2b08      	cmp	r3, #8
 800168e:	d006      	beq.n	800169e <HAL_RCC_GetSysClockFreq+0x52>
 8001690:	2b0c      	cmp	r3, #12
 8001692:	d043      	beq.n	800171c <HAL_RCC_GetSysClockFreq+0xd0>
 8001694:	2b04      	cmp	r3, #4
 8001696:	d144      	bne.n	8001722 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001698:	4b29      	ldr	r3, [pc, #164]	; (8001740 <HAL_RCC_GetSysClockFreq+0xf4>)
 800169a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800169c:	e044      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800169e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a0:	0c9b      	lsrs	r3, r3, #18
 80016a2:	220f      	movs	r2, #15
 80016a4:	4013      	ands	r3, r2
 80016a6:	2214      	movs	r2, #20
 80016a8:	18ba      	adds	r2, r7, r2
 80016aa:	5cd3      	ldrb	r3, [r2, r3]
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80016ae:	4b23      	ldr	r3, [pc, #140]	; (800173c <HAL_RCC_GetSysClockFreq+0xf0>)
 80016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b2:	220f      	movs	r2, #15
 80016b4:	4013      	ands	r3, r2
 80016b6:	1d3a      	adds	r2, r7, #4
 80016b8:	5cd3      	ldrb	r3, [r2, r3]
 80016ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016be:	23c0      	movs	r3, #192	; 0xc0
 80016c0:	025b      	lsls	r3, r3, #9
 80016c2:	401a      	ands	r2, r3
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	025b      	lsls	r3, r3, #9
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d109      	bne.n	80016e0 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80016cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016ce:	481c      	ldr	r0, [pc, #112]	; (8001740 <HAL_RCC_GetSysClockFreq+0xf4>)
 80016d0:	f7fe fd18 	bl	8000104 <__udivsi3>
 80016d4:	0003      	movs	r3, r0
 80016d6:	001a      	movs	r2, r3
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	4353      	muls	r3, r2
 80016dc:	637b      	str	r3, [r7, #52]	; 0x34
 80016de:	e01a      	b.n	8001716 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80016e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016e2:	23c0      	movs	r3, #192	; 0xc0
 80016e4:	025b      	lsls	r3, r3, #9
 80016e6:	401a      	ands	r2, r3
 80016e8:	23c0      	movs	r3, #192	; 0xc0
 80016ea:	025b      	lsls	r3, r3, #9
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d109      	bne.n	8001704 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80016f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016f2:	4814      	ldr	r0, [pc, #80]	; (8001744 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016f4:	f7fe fd06 	bl	8000104 <__udivsi3>
 80016f8:	0003      	movs	r3, r0
 80016fa:	001a      	movs	r2, r3
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	4353      	muls	r3, r2
 8001700:	637b      	str	r3, [r7, #52]	; 0x34
 8001702:	e008      	b.n	8001716 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001706:	480e      	ldr	r0, [pc, #56]	; (8001740 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001708:	f7fe fcfc 	bl	8000104 <__udivsi3>
 800170c:	0003      	movs	r3, r0
 800170e:	001a      	movs	r2, r3
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	4353      	muls	r3, r2
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8001716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800171a:	e005      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_RCC_GetSysClockFreq+0xf8>)
 800171e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001720:	e002      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001722:	4b07      	ldr	r3, [pc, #28]	; (8001740 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001726:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800172a:	0018      	movs	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	b00f      	add	sp, #60	; 0x3c
 8001730:	bd90      	pop	{r4, r7, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	08002d78 	.word	0x08002d78
 8001738:	08002d88 	.word	0x08002d88
 800173c:	40021000 	.word	0x40021000
 8001740:	007a1200 	.word	0x007a1200
 8001744:	02dc6c00 	.word	0x02dc6c00

08001748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800174c:	4b02      	ldr	r3, [pc, #8]	; (8001758 <HAL_RCC_GetHCLKFreq+0x10>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	0018      	movs	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	20000018 	.word	0x20000018

0800175c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d101      	bne.n	800176e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e088      	b.n	8001880 <HAL_SPI_Init+0x124>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	225d      	movs	r2, #93	; 0x5d
 8001778:	5c9b      	ldrb	r3, [r3, r2]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	d107      	bne.n	8001790 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	225c      	movs	r2, #92	; 0x5c
 8001784:	2100      	movs	r1, #0
 8001786:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	0018      	movs	r0, r3
 800178c:	f001 f99e 	bl	8002acc <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	225d      	movs	r2, #93	; 0x5d
 8001794:	2102      	movs	r1, #2
 8001796:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	6812      	ldr	r2, [r2, #0]
 80017a2:	2140      	movs	r1, #64	; 0x40
 80017a4:	438a      	bics	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	23e0      	movs	r3, #224	; 0xe0
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d902      	bls.n	80017ba <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e002      	b.n	80017c0 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80017ba:	2380      	movs	r3, #128	; 0x80
 80017bc:	015b      	lsls	r3, r3, #5
 80017be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	23f0      	movs	r3, #240	; 0xf0
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d008      	beq.n	80017de <HAL_SPI_Init+0x82>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68da      	ldr	r2, [r3, #12]
 80017d0:	23e0      	movs	r3, #224	; 0xe0
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d002      	beq.n	80017de <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10c      	bne.n	8001800 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	23e0      	movs	r3, #224	; 0xe0
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d903      	bls.n	80017fa <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2202      	movs	r2, #2
 80017f6:	631a      	str	r2, [r3, #48]	; 0x30
 80017f8:	e002      	b.n	8001800 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6851      	ldr	r1, [r2, #4]
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6892      	ldr	r2, [r2, #8]
 800180c:	4311      	orrs	r1, r2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6912      	ldr	r2, [r2, #16]
 8001812:	4311      	orrs	r1, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6952      	ldr	r2, [r2, #20]
 8001818:	4311      	orrs	r1, r2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6990      	ldr	r0, [r2, #24]
 800181e:	2280      	movs	r2, #128	; 0x80
 8001820:	0092      	lsls	r2, r2, #2
 8001822:	4002      	ands	r2, r0
 8001824:	4311      	orrs	r1, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	69d2      	ldr	r2, [r2, #28]
 800182a:	4311      	orrs	r1, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6a12      	ldr	r2, [r2, #32]
 8001830:	4311      	orrs	r1, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001836:	430a      	orrs	r2, r1
 8001838:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	6992      	ldr	r2, [r2, #24]
 8001842:	0c12      	lsrs	r2, r2, #16
 8001844:	2104      	movs	r1, #4
 8001846:	4011      	ands	r1, r2
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800184c:	4311      	orrs	r1, r2
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001852:	4311      	orrs	r1, r2
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	68d2      	ldr	r2, [r2, #12]
 8001858:	4311      	orrs	r1, r2
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	430a      	orrs	r2, r1
 800185e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	69d2      	ldr	r2, [r2, #28]
 800186a:	4907      	ldr	r1, [pc, #28]	; (8001888 <HAL_SPI_Init+0x12c>)
 800186c:	400a      	ands	r2, r1
 800186e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	225d      	movs	r2, #93	; 0x5d
 800187a:	2101      	movs	r1, #1
 800187c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	b004      	add	sp, #16
 8001886:	bd80      	pop	{r7, pc}
 8001888:	fffff7ff 	.word	0xfffff7ff

0800188c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b088      	sub	sp, #32
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	1dbb      	adds	r3, r7, #6
 800189a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80018a0:	231f      	movs	r3, #31
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	225c      	movs	r2, #92	; 0x5c
 80018ac:	5c9b      	ldrb	r3, [r3, r2]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_SPI_Transmit+0x2a>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e14f      	b.n	8001b56 <HAL_SPI_Transmit+0x2ca>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	225c      	movs	r2, #92	; 0x5c
 80018ba:	2101      	movs	r1, #1
 80018bc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80018be:	f7fe fe77 	bl	80005b0 <HAL_GetTick>
 80018c2:	0003      	movs	r3, r0
 80018c4:	61bb      	str	r3, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	225d      	movs	r2, #93	; 0x5d
 80018ca:	5c9b      	ldrb	r3, [r3, r2]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d004      	beq.n	80018dc <HAL_SPI_Transmit+0x50>
  {
    errorcode = HAL_BUSY;
 80018d2:	231f      	movs	r3, #31
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	2202      	movs	r2, #2
 80018d8:	701a      	strb	r2, [r3, #0]
    goto error;
 80018da:	e131      	b.n	8001b40 <HAL_SPI_Transmit+0x2b4>
  }

  if ((pData == NULL) || (Size == 0U))
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_SPI_Transmit+0x5e>
 80018e2:	1dbb      	adds	r3, r7, #6
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d104      	bne.n	80018f4 <HAL_SPI_Transmit+0x68>
  {
    errorcode = HAL_ERROR;
 80018ea:	231f      	movs	r3, #31
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	2201      	movs	r2, #1
 80018f0:	701a      	strb	r2, [r3, #0]
    goto error;
 80018f2:	e125      	b.n	8001b40 <HAL_SPI_Transmit+0x2b4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	225d      	movs	r2, #93	; 0x5d
 80018f8:	2103      	movs	r1, #3
 80018fa:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1dba      	adds	r2, r7, #6
 800190c:	8812      	ldrh	r2, [r2, #0]
 800190e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	1dba      	adds	r2, r7, #6
 8001914:	8812      	ldrh	r2, [r2, #0]
 8001916:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2244      	movs	r2, #68	; 0x44
 8001922:	2100      	movs	r1, #0
 8001924:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2246      	movs	r2, #70	; 0x46
 800192a:	2100      	movs	r1, #0
 800192c:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2200      	movs	r2, #0
 8001932:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2200      	movs	r2, #0
 8001938:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	021b      	lsls	r3, r3, #8
 8001942:	429a      	cmp	r2, r3
 8001944:	d108      	bne.n	8001958 <HAL_SPI_Transmit+0xcc>
  {
    SPI_1LINE_TX(hspi);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	2180      	movs	r1, #128	; 0x80
 8001952:	01c9      	lsls	r1, r1, #7
 8001954:	430a      	orrs	r2, r1
 8001956:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2240      	movs	r2, #64	; 0x40
 8001960:	4013      	ands	r3, r2
 8001962:	2b40      	cmp	r3, #64	; 0x40
 8001964:	d007      	beq.n	8001976 <HAL_SPI_Transmit+0xea>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	2140      	movs	r1, #64	; 0x40
 8001972:	430a      	orrs	r2, r1
 8001974:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	23e0      	movs	r3, #224	; 0xe0
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	429a      	cmp	r2, r3
 8001980:	d948      	bls.n	8001a14 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d004      	beq.n	8001994 <HAL_SPI_Transmit+0x108>
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800198e:	b29b      	uxth	r3, r3
 8001990:	2b01      	cmp	r3, #1
 8001992:	d139      	bne.n	8001a08 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	8812      	ldrh	r2, [r2, #0]
 800199c:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	3302      	adds	r3, #2
 80019a2:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	3b01      	subs	r3, #1
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80019b2:	e029      	b.n	8001a08 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2202      	movs	r2, #2
 80019bc:	4013      	ands	r3, r2
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d10f      	bne.n	80019e2 <HAL_SPI_Transmit+0x156>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	8812      	ldrh	r2, [r2, #0]
 80019ca:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	3302      	adds	r3, #2
 80019d0:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	3b01      	subs	r3, #1
 80019da:	b29a      	uxth	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80019e0:	e012      	b.n	8001a08 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00a      	beq.n	80019fe <HAL_SPI_Transmit+0x172>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	3301      	adds	r3, #1
 80019ec:	d00c      	beq.n	8001a08 <HAL_SPI_Transmit+0x17c>
 80019ee:	f7fe fddf 	bl	80005b0 <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	1ad2      	subs	r2, r2, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d304      	bcc.n	8001a08 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80019fe:	231f      	movs	r3, #31
 8001a00:	18fb      	adds	r3, r7, r3
 8001a02:	2203      	movs	r2, #3
 8001a04:	701a      	strb	r2, [r3, #0]
          goto error;
 8001a06:	e09b      	b.n	8001b40 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1d0      	bne.n	80019b4 <HAL_SPI_Transmit+0x128>
 8001a12:	e073      	b.n	8001afc <HAL_SPI_Transmit+0x270>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d004      	beq.n	8001a26 <HAL_SPI_Transmit+0x19a>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d165      	bne.n	8001af2 <HAL_SPI_Transmit+0x266>
    {
      if (hspi->TxXferCount > 1U)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d90f      	bls.n	8001a50 <HAL_SPI_Transmit+0x1c4>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	8812      	ldrh	r2, [r2, #0]
 8001a38:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a44:	b29b      	uxth	r3, r3
 8001a46:	3b02      	subs	r3, #2
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001a4e:	e050      	b.n	8001af2 <HAL_SPI_Transmit+0x266>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	330c      	adds	r3, #12
 8001a56:	001a      	movs	r2, r3
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	1c59      	adds	r1, r3, #1
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8001a70:	e03f      	b.n	8001af2 <HAL_SPI_Transmit+0x266>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2202      	movs	r2, #2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d125      	bne.n	8001acc <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d90f      	bls.n	8001aaa <HAL_SPI_Transmit+0x21e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	8812      	ldrh	r2, [r2, #0]
 8001a92:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	3302      	adds	r3, #2
 8001a98:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	3b02      	subs	r3, #2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001aa8:	e023      	b.n	8001af2 <HAL_SPI_Transmit+0x266>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	330c      	adds	r3, #12
 8001ab0:	001a      	movs	r2, r3
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	1c59      	adds	r1, r3, #1
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001aca:	e012      	b.n	8001af2 <HAL_SPI_Transmit+0x266>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d00a      	beq.n	8001ae8 <HAL_SPI_Transmit+0x25c>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	d00c      	beq.n	8001af2 <HAL_SPI_Transmit+0x266>
 8001ad8:	f7fe fd6a 	bl	80005b0 <HAL_GetTick>
 8001adc:	0002      	movs	r2, r0
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	1ad2      	subs	r2, r2, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d304      	bcc.n	8001af2 <HAL_SPI_Transmit+0x266>
        {
          errorcode = HAL_TIMEOUT;
 8001ae8:	231f      	movs	r3, #31
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	2203      	movs	r2, #3
 8001aee:	701a      	strb	r2, [r3, #0]
          goto error;
 8001af0:	e026      	b.n	8001b40 <HAL_SPI_Transmit+0x2b4>
    while (hspi->TxXferCount > 0U)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1ba      	bne.n	8001a72 <HAL_SPI_Transmit+0x1e6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	6839      	ldr	r1, [r7, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	0018      	movs	r0, r3
 8001b04:	f000 fcce 	bl	80024a4 <SPI_EndRxTxTransaction>
 8001b08:	1e03      	subs	r3, r0, #0
 8001b0a:	d002      	beq.n	8001b12 <HAL_SPI_Transmit+0x286>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10a      	bne.n	8001b30 <HAL_SPI_Transmit+0x2a4>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_SPI_Transmit+0x2b4>
  {
    errorcode = HAL_ERROR;
 8001b38:	231f      	movs	r3, #31
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	701a      	strb	r2, [r3, #0]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	225d      	movs	r2, #93	; 0x5d
 8001b44:	2101      	movs	r1, #1
 8001b46:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	225c      	movs	r2, #92	; 0x5c
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001b50:	231f      	movs	r3, #31
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	781b      	ldrb	r3, [r3, #0]
}
 8001b56:	0018      	movs	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	b008      	add	sp, #32
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	1dbb      	adds	r3, r7, #6
 8001b6e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b74:	2317      	movs	r3, #23
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	685a      	ldr	r2, [r3, #4]
 8001b80:	2382      	movs	r3, #130	; 0x82
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d113      	bne.n	8001bb0 <HAL_SPI_Receive+0x50>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10f      	bne.n	8001bb0 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	225d      	movs	r2, #93	; 0x5d
 8001b94:	2104      	movs	r1, #4
 8001b96:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001b98:	1dbb      	adds	r3, r7, #6
 8001b9a:	881c      	ldrh	r4, [r3, #0]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	68b9      	ldr	r1, [r7, #8]
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	0023      	movs	r3, r4
 8001ba8:	f000 f916 	bl	8001dd8 <HAL_SPI_TransmitReceive>
 8001bac:	0003      	movs	r3, r0
 8001bae:	e10a      	b.n	8001dc6 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	225c      	movs	r2, #92	; 0x5c
 8001bb4:	5c9b      	ldrb	r3, [r3, r2]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_SPI_Receive+0x5e>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e103      	b.n	8001dc6 <HAL_SPI_Receive+0x266>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	225c      	movs	r2, #92	; 0x5c
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001bc6:	f7fe fcf3 	bl	80005b0 <HAL_GetTick>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	225d      	movs	r2, #93	; 0x5d
 8001bd2:	5c9b      	ldrb	r3, [r3, r2]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d004      	beq.n	8001be4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8001bda:	2317      	movs	r3, #23
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	2202      	movs	r2, #2
 8001be0:	701a      	strb	r2, [r3, #0]
    goto error;
 8001be2:	e0e5      	b.n	8001db0 <HAL_SPI_Receive+0x250>
  }

  if ((pData == NULL) || (Size == 0U))
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_SPI_Receive+0x92>
 8001bea:	1dbb      	adds	r3, r7, #6
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d104      	bne.n	8001bfc <HAL_SPI_Receive+0x9c>
  {
    errorcode = HAL_ERROR;
 8001bf2:	2317      	movs	r3, #23
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	701a      	strb	r2, [r3, #0]
    goto error;
 8001bfa:	e0d9      	b.n	8001db0 <HAL_SPI_Receive+0x250>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	225d      	movs	r2, #93	; 0x5d
 8001c00:	2104      	movs	r1, #4
 8001c02:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2200      	movs	r2, #0
 8001c08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1dba      	adds	r2, r7, #6
 8001c14:	2144      	movs	r1, #68	; 0x44
 8001c16:	8812      	ldrh	r2, [r2, #0]
 8001c18:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	1dba      	adds	r2, r7, #6
 8001c1e:	2146      	movs	r1, #70	; 0x46
 8001c20:	8812      	ldrh	r2, [r2, #0]
 8001c22:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx FiFo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	23e0      	movs	r3, #224	; 0xe0
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d908      	bls.n	8001c60 <HAL_SPI_Receive+0x100>
  {
    /* set fiforxthresold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	6852      	ldr	r2, [r2, #4]
 8001c58:	495d      	ldr	r1, [pc, #372]	; (8001dd0 <HAL_SPI_Receive+0x270>)
 8001c5a:	400a      	ands	r2, r1
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	e008      	b.n	8001c72 <HAL_SPI_Receive+0x112>
  }
  else
  {
    /* set fiforxthresold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	6812      	ldr	r2, [r2, #0]
 8001c68:	6852      	ldr	r2, [r2, #4]
 8001c6a:	2180      	movs	r1, #128	; 0x80
 8001c6c:	0149      	lsls	r1, r1, #5
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d107      	bne.n	8001c8e <HAL_SPI_Receive+0x12e>
  {
    SPI_1LINE_RX(hspi);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	4952      	ldr	r1, [pc, #328]	; (8001dd4 <HAL_SPI_Receive+0x274>)
 8001c8a:	400a      	ands	r2, r1
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2240      	movs	r2, #64	; 0x40
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b40      	cmp	r3, #64	; 0x40
 8001c9a:	d007      	beq.n	8001cac <HAL_SPI_Receive+0x14c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	2140      	movs	r1, #64	; 0x40
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	23e0      	movs	r3, #224	; 0xe0
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d862      	bhi.n	8001d7e <HAL_SPI_Receive+0x21e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001cb8:	e02d      	b.n	8001d16 <HAL_SPI_Receive+0x1b6>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d113      	bne.n	8001cf0 <HAL_SPI_Receive+0x190>
      {
        /* read the received data */
        (* (uint8_t *)pData) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	330c      	adds	r3, #12
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2246      	movs	r2, #70	; 0x46
 8001ce0:	5a9b      	ldrh	r3, [r3, r2]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	b299      	uxth	r1, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2246      	movs	r2, #70	; 0x46
 8001cec:	5299      	strh	r1, [r3, r2]
 8001cee:	e012      	b.n	8001d16 <HAL_SPI_Receive+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00a      	beq.n	8001d0c <HAL_SPI_Receive+0x1ac>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	d00c      	beq.n	8001d16 <HAL_SPI_Receive+0x1b6>
 8001cfc:	f7fe fc58 	bl	80005b0 <HAL_GetTick>
 8001d00:	0002      	movs	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad2      	subs	r2, r2, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d304      	bcc.n	8001d16 <HAL_SPI_Receive+0x1b6>
        {
          errorcode = HAL_TIMEOUT;
 8001d0c:	2317      	movs	r3, #23
 8001d0e:	18fb      	adds	r3, r7, r3
 8001d10:	2203      	movs	r2, #3
 8001d12:	701a      	strb	r2, [r3, #0]
          goto error;
 8001d14:	e04c      	b.n	8001db0 <HAL_SPI_Receive+0x250>
    while (hspi->RxXferCount > 0U)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2246      	movs	r2, #70	; 0x46
 8001d1a:	5a9b      	ldrh	r3, [r3, r2]
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1cb      	bne.n	8001cba <HAL_SPI_Receive+0x15a>
 8001d22:	e032      	b.n	8001d8a <HAL_SPI_Receive+0x22a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d112      	bne.n	8001d58 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)pData) = hspi->Instance->DR;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	801a      	strh	r2, [r3, #0]
        pData += sizeof(uint16_t);
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	3302      	adds	r3, #2
 8001d42:	60bb      	str	r3, [r7, #8]
        hspi->RxXferCount--;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2246      	movs	r2, #70	; 0x46
 8001d48:	5a9b      	ldrh	r3, [r3, r2]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	b299      	uxth	r1, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2246      	movs	r2, #70	; 0x46
 8001d54:	5299      	strh	r1, [r3, r2]
 8001d56:	e012      	b.n	8001d7e <HAL_SPI_Receive+0x21e>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00a      	beq.n	8001d74 <HAL_SPI_Receive+0x214>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	3301      	adds	r3, #1
 8001d62:	d00c      	beq.n	8001d7e <HAL_SPI_Receive+0x21e>
 8001d64:	f7fe fc24 	bl	80005b0 <HAL_GetTick>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad2      	subs	r2, r2, r3
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d304      	bcc.n	8001d7e <HAL_SPI_Receive+0x21e>
        {
          errorcode = HAL_TIMEOUT;
 8001d74:	2317      	movs	r3, #23
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	2203      	movs	r2, #3
 8001d7a:	701a      	strb	r2, [r3, #0]
          goto error;
 8001d7c:	e018      	b.n	8001db0 <HAL_SPI_Receive+0x250>
    while (hspi->RxXferCount > 0U)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2246      	movs	r2, #70	; 0x46
 8001d82:	5a9b      	ldrh	r3, [r3, r2]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1cc      	bne.n	8001d24 <HAL_SPI_Receive+0x1c4>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	6839      	ldr	r1, [r7, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	0018      	movs	r0, r3
 8001d92:	f000 fb29 	bl	80023e8 <SPI_EndRxTransaction>
 8001d96:	1e03      	subs	r3, r0, #0
 8001d98:	d002      	beq.n	8001da0 <HAL_SPI_Receive+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_SPI_Receive+0x250>
  {
    errorcode = HAL_ERROR;
 8001da8:	2317      	movs	r3, #23
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	225d      	movs	r2, #93	; 0x5d
 8001db4:	2101      	movs	r1, #1
 8001db6:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	225c      	movs	r2, #92	; 0x5c
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001dc0:	2317      	movs	r3, #23
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	781b      	ldrb	r3, [r3, #0]
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b007      	add	sp, #28
 8001dcc:	bd90      	pop	{r4, r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	ffffefff 	.word	0xffffefff
 8001dd4:	ffffbfff 	.word	0xffffbfff

08001dd8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	; 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	001a      	movs	r2, r3
 8001de6:	1cbb      	adds	r3, r7, #2
 8001de8:	801a      	strh	r2, [r3, #0]
  uint32_t tmp = 0U, tmp1 = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8001df6:	2301      	movs	r3, #1
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001dfa:	2323      	movs	r3, #35	; 0x23
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	225c      	movs	r2, #92	; 0x5c
 8001e06:	5c9b      	ldrb	r3, [r3, r2]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_SPI_TransmitReceive+0x38>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e1f1      	b.n	80021f4 <HAL_SPI_TransmitReceive+0x41c>
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	225c      	movs	r2, #92	; 0x5c
 8001e14:	2101      	movs	r1, #1
 8001e16:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e18:	f7fe fbca 	bl	80005b0 <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	617b      	str	r3, [r7, #20]

  tmp  = hspi->State;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	225d      	movs	r2, #93	; 0x5d
 8001e24:	5c9b      	ldrb	r3, [r3, r2]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d010      	beq.n	8001e58 <HAL_SPI_TransmitReceive+0x80>
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	2382      	movs	r3, #130	; 0x82
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d106      	bne.n	8001e4e <HAL_SPI_TransmitReceive+0x76>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d102      	bne.n	8001e4e <HAL_SPI_TransmitReceive+0x76>
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d004      	beq.n	8001e58 <HAL_SPI_TransmitReceive+0x80>
  {
    errorcode = HAL_BUSY;
 8001e4e:	2323      	movs	r3, #35	; 0x23
 8001e50:	18fb      	adds	r3, r7, r3
 8001e52:	2202      	movs	r2, #2
 8001e54:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e56:	e1c2      	b.n	80021de <HAL_SPI_TransmitReceive+0x406>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d006      	beq.n	8001e6c <HAL_SPI_TransmitReceive+0x94>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_SPI_TransmitReceive+0x94>
 8001e64:	1cbb      	adds	r3, r7, #2
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d104      	bne.n	8001e76 <HAL_SPI_TransmitReceive+0x9e>
  {
    errorcode = HAL_ERROR;
 8001e6c:	2323      	movs	r3, #35	; 0x23
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
    goto error;
 8001e74:	e1b3      	b.n	80021de <HAL_SPI_TransmitReceive+0x406>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	225d      	movs	r2, #93	; 0x5d
 8001e7a:	5c9b      	ldrb	r3, [r3, r2]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d003      	beq.n	8001e8a <HAL_SPI_TransmitReceive+0xb2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	225d      	movs	r2, #93	; 0x5d
 8001e86:	2105      	movs	r1, #5
 8001e88:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1cba      	adds	r2, r7, #2
 8001e9a:	2146      	movs	r1, #70	; 0x46
 8001e9c:	8812      	ldrh	r2, [r2, #0]
 8001e9e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1cba      	adds	r2, r7, #2
 8001ea4:	2144      	movs	r1, #68	; 0x44
 8001ea6:	8812      	ldrh	r2, [r2, #0]
 8001ea8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1cba      	adds	r2, r7, #2
 8001eb4:	8812      	ldrh	r2, [r2, #0]
 8001eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	1cba      	adds	r2, r7, #2
 8001ebc:	8812      	ldrh	r2, [r2, #0]
 8001ebe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	23e0      	movs	r3, #224	; 0xe0
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d805      	bhi.n	8001ee4 <HAL_SPI_TransmitReceive+0x10c>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2246      	movs	r2, #70	; 0x46
 8001edc:	5a9b      	ldrh	r3, [r3, r2]
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d908      	bls.n	8001ef6 <HAL_SPI_TransmitReceive+0x11e>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68fa      	ldr	r2, [r7, #12]
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	6852      	ldr	r2, [r2, #4]
 8001eee:	49c3      	ldr	r1, [pc, #780]	; (80021fc <HAL_SPI_TransmitReceive+0x424>)
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	e008      	b.n	8001f08 <HAL_SPI_TransmitReceive+0x130>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	6852      	ldr	r2, [r2, #4]
 8001f00:	2180      	movs	r1, #128	; 0x80
 8001f02:	0149      	lsls	r1, r1, #5
 8001f04:	430a      	orrs	r2, r1
 8001f06:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2240      	movs	r2, #64	; 0x40
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b40      	cmp	r3, #64	; 0x40
 8001f14:	d007      	beq.n	8001f26 <HAL_SPI_TransmitReceive+0x14e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	6812      	ldr	r2, [r2, #0]
 8001f20:	2140      	movs	r1, #64	; 0x40
 8001f22:	430a      	orrs	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	23e0      	movs	r3, #224	; 0xe0
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d800      	bhi.n	8001f34 <HAL_SPI_TransmitReceive+0x15c>
 8001f32:	e075      	b.n	8002020 <HAL_SPI_TransmitReceive+0x248>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d004      	beq.n	8001f46 <HAL_SPI_TransmitReceive+0x16e>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d160      	bne.n	8002008 <HAL_SPI_TransmitReceive+0x230>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	8812      	ldrh	r2, [r2, #0]
 8001f4e:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	3302      	adds	r3, #2
 8001f54:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f64:	e050      	b.n	8002008 <HAL_SPI_TransmitReceive+0x230>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01c      	beq.n	8001fa6 <HAL_SPI_TransmitReceive+0x1ce>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d017      	beq.n	8001fa6 <HAL_SPI_TransmitReceive+0x1ce>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d110      	bne.n	8001fa6 <HAL_SPI_TransmitReceive+0x1ce>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	8812      	ldrh	r2, [r2, #0]
 8001f8c:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	3302      	adds	r3, #2
 8001f92:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2246      	movs	r2, #70	; 0x46
 8001faa:	5a9b      	ldrh	r3, [r3, r2]
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d01a      	beq.n	8001fe8 <HAL_SPI_TransmitReceive+0x210>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d113      	bne.n	8001fe8 <HAL_SPI_TransmitReceive+0x210>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3302      	adds	r3, #2
 8001fd0:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2246      	movs	r2, #70	; 0x46
 8001fd6:	5a9b      	ldrh	r3, [r3, r2]
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b299      	uxth	r1, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2246      	movs	r2, #70	; 0x46
 8001fe2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fea:	3301      	adds	r3, #1
 8001fec:	d00c      	beq.n	8002008 <HAL_SPI_TransmitReceive+0x230>
 8001fee:	f7fe fadf 	bl	80005b0 <HAL_GetTick>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	1ad2      	subs	r2, r2, r3
 8001ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d304      	bcc.n	8002008 <HAL_SPI_TransmitReceive+0x230>
      {
        errorcode = HAL_TIMEOUT;
 8001ffe:	2323      	movs	r3, #35	; 0x23
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	2203      	movs	r2, #3
 8002004:	701a      	strb	r2, [r3, #0]
        goto error;
 8002006:	e0ea      	b.n	80021de <HAL_SPI_TransmitReceive+0x406>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1a9      	bne.n	8001f66 <HAL_SPI_TransmitReceive+0x18e>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2246      	movs	r2, #70	; 0x46
 8002016:	5a9b      	ldrh	r3, [r3, r2]
 8002018:	b29b      	uxth	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1a3      	bne.n	8001f66 <HAL_SPI_TransmitReceive+0x18e>
 800201e:	e0cb      	b.n	80021b8 <HAL_SPI_TransmitReceive+0x3e0>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_SPI_TransmitReceive+0x25c>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d000      	beq.n	8002034 <HAL_SPI_TransmitReceive+0x25c>
 8002032:	e0b4      	b.n	800219e <HAL_SPI_TransmitReceive+0x3c6>
    {
      if (hspi->TxXferCount > 1U)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002038:	b29b      	uxth	r3, r3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d90f      	bls.n	800205e <HAL_SPI_TransmitReceive+0x286>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	8812      	ldrh	r2, [r2, #0]
 8002046:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	3302      	adds	r3, #2
 800204c:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002052:	b29b      	uxth	r3, r3
 8002054:	3b02      	subs	r3, #2
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800205c:	e09f      	b.n	800219e <HAL_SPI_TransmitReceive+0x3c6>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	330c      	adds	r3, #12
 8002064:	001a      	movs	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	1c59      	adds	r1, r3, #1
 800206a:	60b9      	str	r1, [r7, #8]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800207e:	e08e      	b.n	800219e <HAL_SPI_TransmitReceive+0x3c6>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	2b00      	cmp	r3, #0
 8002084:	d032      	beq.n	80020ec <HAL_SPI_TransmitReceive+0x314>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800208a:	b29b      	uxth	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d02d      	beq.n	80020ec <HAL_SPI_TransmitReceive+0x314>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2202      	movs	r2, #2
 8002098:	4013      	ands	r3, r2
 800209a:	2b02      	cmp	r3, #2
 800209c:	d126      	bne.n	80020ec <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d90f      	bls.n	80020c8 <HAL_SPI_TransmitReceive+0x2f0>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	8812      	ldrh	r2, [r2, #0]
 80020b0:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	3302      	adds	r3, #2
 80020b6:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020bc:	b29b      	uxth	r3, r3
 80020be:	3b02      	subs	r3, #2
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020c6:	e00f      	b.n	80020e8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	330c      	adds	r3, #12
 80020ce:	001a      	movs	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	1c59      	adds	r1, r3, #1
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020de:	b29b      	uxth	r3, r3
 80020e0:	3b01      	subs	r3, #1
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2246      	movs	r2, #70	; 0x46
 80020f0:	5a9b      	ldrh	r3, [r3, r2]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d042      	beq.n	800217e <HAL_SPI_TransmitReceive+0x3a6>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2201      	movs	r2, #1
 8002100:	4013      	ands	r3, r2
 8002102:	2b01      	cmp	r3, #1
 8002104:	d13b      	bne.n	800217e <HAL_SPI_TransmitReceive+0x3a6>
      {
        if (hspi->RxXferCount > 1U)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2246      	movs	r2, #70	; 0x46
 800210a:	5a9b      	ldrh	r3, [r3, r2]
 800210c:	b29b      	uxth	r3, r3
 800210e:	2b01      	cmp	r3, #1
 8002110:	d921      	bls.n	8002156 <HAL_SPI_TransmitReceive+0x37e>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	b29a      	uxth	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3302      	adds	r3, #2
 8002122:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2246      	movs	r2, #70	; 0x46
 8002128:	5a9b      	ldrh	r3, [r3, r2]
 800212a:	b29b      	uxth	r3, r3
 800212c:	3b02      	subs	r3, #2
 800212e:	b299      	uxth	r1, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2246      	movs	r2, #70	; 0x46
 8002134:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2246      	movs	r2, #70	; 0x46
 800213a:	5a9b      	ldrh	r3, [r3, r2]
 800213c:	b29b      	uxth	r3, r3
 800213e:	2b01      	cmp	r3, #1
 8002140:	d81b      	bhi.n	800217a <HAL_SPI_TransmitReceive+0x3a2>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	6852      	ldr	r2, [r2, #4]
 800214c:	2180      	movs	r1, #128	; 0x80
 800214e:	0149      	lsls	r1, r1, #5
 8002150:	430a      	orrs	r2, r1
 8002152:	605a      	str	r2, [r3, #4]
 8002154:	e011      	b.n	800217a <HAL_SPI_TransmitReceive+0x3a2>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	607a      	str	r2, [r7, #4]
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	320c      	adds	r2, #12
 8002162:	7812      	ldrb	r2, [r2, #0]
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2246      	movs	r2, #70	; 0x46
 800216c:	5a9b      	ldrh	r3, [r3, r2]
 800216e:	b29b      	uxth	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b299      	uxth	r1, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2246      	movs	r2, #70	; 0x46
 8002178:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800217a:	2301      	movs	r3, #1
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800217e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002180:	3301      	adds	r3, #1
 8002182:	d00c      	beq.n	800219e <HAL_SPI_TransmitReceive+0x3c6>
 8002184:	f7fe fa14 	bl	80005b0 <HAL_GetTick>
 8002188:	0002      	movs	r2, r0
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	1ad2      	subs	r2, r2, r3
 800218e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002190:	429a      	cmp	r2, r3
 8002192:	d304      	bcc.n	800219e <HAL_SPI_TransmitReceive+0x3c6>
      {
        errorcode = HAL_TIMEOUT;
 8002194:	2323      	movs	r3, #35	; 0x23
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	2203      	movs	r2, #3
 800219a:	701a      	strb	r2, [r3, #0]
        goto error;
 800219c:	e01f      	b.n	80021de <HAL_SPI_TransmitReceive+0x406>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d000      	beq.n	80021aa <HAL_SPI_TransmitReceive+0x3d2>
 80021a8:	e76a      	b.n	8002080 <HAL_SPI_TransmitReceive+0x2a8>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2246      	movs	r2, #70	; 0x46
 80021ae:	5a9b      	ldrh	r3, [r3, r2]
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d000      	beq.n	80021b8 <HAL_SPI_TransmitReceive+0x3e0>
 80021b6:	e763      	b.n	8002080 <HAL_SPI_TransmitReceive+0x2a8>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	0018      	movs	r0, r3
 80021c0:	f000 f970 	bl	80024a4 <SPI_EndRxTxTransaction>
 80021c4:	1e03      	subs	r3, r0, #0
 80021c6:	d002      	beq.n	80021ce <HAL_SPI_TransmitReceive+0x3f6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2220      	movs	r2, #32
 80021cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_SPI_TransmitReceive+0x406>
  {
    errorcode = HAL_ERROR;
 80021d6:	2323      	movs	r3, #35	; 0x23
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	225d      	movs	r2, #93	; 0x5d
 80021e2:	2101      	movs	r1, #1
 80021e4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	225c      	movs	r2, #92	; 0x5c
 80021ea:	2100      	movs	r1, #0
 80021ec:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80021ee:	2323      	movs	r3, #35	; 0x23
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	781b      	ldrb	r3, [r3, #0]
}
 80021f4:	0018      	movs	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b00a      	add	sp, #40	; 0x28
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	ffffefff 	.word	0xffffefff

08002200 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(SPI_HandleTypeDef *hspi)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	b002      	add	sp, #8
 8002212:	bd80      	pop	{r7, pc}

08002214 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002222:	e050      	b.n	80022c6 <SPI_WaitFlagStateUntilTimeout+0xb2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	3301      	adds	r3, #1
 8002228:	d04d      	beq.n	80022c6 <SPI_WaitFlagStateUntilTimeout+0xb2>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d007      	beq.n	8002240 <SPI_WaitFlagStateUntilTimeout+0x2c>
 8002230:	f7fe f9be 	bl	80005b0 <HAL_GetTick>
 8002234:	0002      	movs	r2, r0
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	1ad2      	subs	r2, r2, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	429a      	cmp	r2, r3
 800223e:	d342      	bcc.n	80022c6 <SPI_WaitFlagStateUntilTimeout+0xb2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	6812      	ldr	r2, [r2, #0]
 8002248:	6852      	ldr	r2, [r2, #4]
 800224a:	21e0      	movs	r1, #224	; 0xe0
 800224c:	438a      	bics	r2, r1
 800224e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	2382      	movs	r3, #130	; 0x82
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	429a      	cmp	r2, r3
 800225a:	d113      	bne.n	8002284 <SPI_WaitFlagStateUntilTimeout+0x70>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	429a      	cmp	r2, r3
 8002266:	d005      	beq.n	8002274 <SPI_WaitFlagStateUntilTimeout+0x60>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	429a      	cmp	r2, r3
 8002272:	d107      	bne.n	8002284 <SPI_WaitFlagStateUntilTimeout+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	2140      	movs	r1, #64	; 0x40
 8002280:	438a      	bics	r2, r1
 8002282:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	019b      	lsls	r3, r3, #6
 800228c:	429a      	cmp	r2, r3
 800228e:	d110      	bne.n	80022b2 <SPI_WaitFlagStateUntilTimeout+0x9e>
        {
          SPI_RESET_CRC(hspi);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	4914      	ldr	r1, [pc, #80]	; (80022ec <SPI_WaitFlagStateUntilTimeout+0xd8>)
 800229c:	400a      	ands	r2, r1
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	2180      	movs	r1, #128	; 0x80
 80022ac:	0189      	lsls	r1, r1, #6
 80022ae:	430a      	orrs	r2, r1
 80022b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	225d      	movs	r2, #93	; 0x5d
 80022b6:	2101      	movs	r1, #1
 80022b8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	225c      	movs	r2, #92	; 0x5c
 80022be:	2100      	movs	r1, #0
 80022c0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e00e      	b.n	80022e4 <SPI_WaitFlagStateUntilTimeout+0xd0>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	401a      	ands	r2, r3
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d101      	bne.n	80022da <SPI_WaitFlagStateUntilTimeout+0xc6>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <SPI_WaitFlagStateUntilTimeout+0xc8>
 80022da:	2300      	movs	r3, #0
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4293      	cmp	r3, r2
 80022e0:	d1a0      	bne.n	8002224 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b004      	add	sp, #16
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	ffffdfff 	.word	0xffffdfff

080022f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 80022fe:	e063      	b.n	80023c8 <SPI_WaitFifoStateUntilTimeout+0xd8>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	23c0      	movs	r3, #192	; 0xc0
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	429a      	cmp	r2, r3
 8002308:	d10d      	bne.n	8002326 <SPI_WaitFifoStateUntilTimeout+0x36>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10a      	bne.n	8002326 <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	330c      	adds	r3, #12
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	2317      	movs	r3, #23
 800231c:	18fb      	adds	r3, r7, r3
 800231e:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002320:	2317      	movs	r3, #23
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	3301      	adds	r3, #1
 800232a:	d04d      	beq.n	80023c8 <SPI_WaitFifoStateUntilTimeout+0xd8>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d007      	beq.n	8002342 <SPI_WaitFifoStateUntilTimeout+0x52>
 8002332:	f7fe f93d 	bl	80005b0 <HAL_GetTick>
 8002336:	0002      	movs	r2, r0
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	1ad2      	subs	r2, r2, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d342      	bcc.n	80023c8 <SPI_WaitFifoStateUntilTimeout+0xd8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	6852      	ldr	r2, [r2, #4]
 800234c:	21e0      	movs	r1, #224	; 0xe0
 800234e:	438a      	bics	r2, r1
 8002350:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	2382      	movs	r3, #130	; 0x82
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	429a      	cmp	r2, r3
 800235c:	d113      	bne.n	8002386 <SPI_WaitFifoStateUntilTimeout+0x96>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	429a      	cmp	r2, r3
 8002368:	d005      	beq.n	8002376 <SPI_WaitFifoStateUntilTimeout+0x86>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	429a      	cmp	r2, r3
 8002374:	d107      	bne.n	8002386 <SPI_WaitFifoStateUntilTimeout+0x96>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	6812      	ldr	r2, [r2, #0]
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	2140      	movs	r1, #64	; 0x40
 8002382:	438a      	bics	r2, r1
 8002384:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	019b      	lsls	r3, r3, #6
 800238e:	429a      	cmp	r2, r3
 8002390:	d110      	bne.n	80023b4 <SPI_WaitFifoStateUntilTimeout+0xc4>
        {
          SPI_RESET_CRC(hspi);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	6812      	ldr	r2, [r2, #0]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	4911      	ldr	r1, [pc, #68]	; (80023e4 <SPI_WaitFifoStateUntilTimeout+0xf4>)
 800239e:	400a      	ands	r2, r1
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	2180      	movs	r1, #128	; 0x80
 80023ae:	0189      	lsls	r1, r1, #6
 80023b0:	430a      	orrs	r2, r1
 80023b2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	225d      	movs	r2, #93	; 0x5d
 80023b8:	2101      	movs	r1, #1
 80023ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	225c      	movs	r2, #92	; 0x5c
 80023c0:	2100      	movs	r1, #0
 80023c2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e008      	b.n	80023da <SPI_WaitFifoStateUntilTimeout+0xea>
  while ((hspi->Instance->SR & Fifo) != State)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	401a      	ands	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d193      	bne.n	8002300 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b006      	add	sp, #24
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	ffffdfff 	.word	0xffffdfff

080023e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	2382      	movs	r3, #130	; 0x82
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d113      	bne.n	8002428 <SPI_EndRxTransaction+0x40>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	429a      	cmp	r2, r3
 800240a:	d005      	beq.n	8002418 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	429a      	cmp	r2, r3
 8002416:	d107      	bne.n	8002428 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	2140      	movs	r1, #64	; 0x40
 8002424:	438a      	bics	r2, r1
 8002426:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	0013      	movs	r3, r2
 8002432:	2200      	movs	r2, #0
 8002434:	2180      	movs	r1, #128	; 0x80
 8002436:	f7ff feed 	bl	8002214 <SPI_WaitFlagStateUntilTimeout>
 800243a:	1e03      	subs	r3, r0, #0
 800243c:	d007      	beq.n	800244e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002442:	2220      	movs	r2, #32
 8002444:	431a      	orrs	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e026      	b.n	800249c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	2382      	movs	r3, #130	; 0x82
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	429a      	cmp	r2, r3
 8002458:	d11f      	bne.n	800249a <SPI_EndRxTransaction+0xb2>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	689a      	ldr	r2, [r3, #8]
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	021b      	lsls	r3, r3, #8
 8002462:	429a      	cmp	r2, r3
 8002464:	d005      	beq.n	8002472 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	429a      	cmp	r2, r3
 8002470:	d113      	bne.n	800249a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	23c0      	movs	r3, #192	; 0xc0
 8002476:	00d9      	lsls	r1, r3, #3
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	0013      	movs	r3, r2
 8002480:	2200      	movs	r2, #0
 8002482:	f7ff ff35 	bl	80022f0 <SPI_WaitFifoStateUntilTimeout>
 8002486:	1e03      	subs	r3, r0, #0
 8002488:	d007      	beq.n	800249a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800248e:	2220      	movs	r2, #32
 8002490:	431a      	orrs	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e000      	b.n	800249c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	0018      	movs	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	b004      	add	sp, #16
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	23c0      	movs	r3, #192	; 0xc0
 80024b4:	0159      	lsls	r1, r3, #5
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	0013      	movs	r3, r2
 80024be:	2200      	movs	r2, #0
 80024c0:	f7ff ff16 	bl	80022f0 <SPI_WaitFifoStateUntilTimeout>
 80024c4:	1e03      	subs	r3, r0, #0
 80024c6:	d007      	beq.n	80024d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024cc:	2220      	movs	r2, #32
 80024ce:	431a      	orrs	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e027      	b.n	8002528 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024d8:	68ba      	ldr	r2, [r7, #8]
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	0013      	movs	r3, r2
 80024e2:	2200      	movs	r2, #0
 80024e4:	2180      	movs	r1, #128	; 0x80
 80024e6:	f7ff fe95 	bl	8002214 <SPI_WaitFlagStateUntilTimeout>
 80024ea:	1e03      	subs	r3, r0, #0
 80024ec:	d007      	beq.n	80024fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f2:	2220      	movs	r2, #32
 80024f4:	431a      	orrs	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e014      	b.n	8002528 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	23c0      	movs	r3, #192	; 0xc0
 8002502:	00d9      	lsls	r1, r3, #3
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	0013      	movs	r3, r2
 800250c:	2200      	movs	r2, #0
 800250e:	f7ff feef 	bl	80022f0 <SPI_WaitFifoStateUntilTimeout>
 8002512:	1e03      	subs	r3, r0, #0
 8002514:	d007      	beq.n	8002526 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251a:	2220      	movs	r2, #32
 800251c:	431a      	orrs	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e000      	b.n	8002528 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	0018      	movs	r0, r3
 800252a:	46bd      	mov	sp, r7
 800252c:	b004      	add	sp, #16
 800252e:	bd80      	pop	{r7, pc}

08002530 <ResolveTwosCompliment2_8>:
	int x = (int)data;
	if (x >= 0x80) x -= 0xFF;
	return x;
}
// Resolving Two's Compliment at two bytes
int ResolveTwosCompliment2_8 (uint8_t hiByte, uint8_t loByte) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	0002      	movs	r2, r0
 8002538:	1dfb      	adds	r3, r7, #7
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	1dbb      	adds	r3, r7, #6
 800253e:	1c0a      	adds	r2, r1, #0
 8002540:	701a      	strb	r2, [r3, #0]
	int x = (int)hiByte*0x100;
 8002542:	1dfb      	adds	r3, r7, #7
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	60fb      	str	r3, [r7, #12]
	if (x >= 0x8000) x -= 0xFFFF;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	4a08      	ldr	r2, [pc, #32]	; (8002570 <ResolveTwosCompliment2_8+0x40>)
 800254e:	4293      	cmp	r3, r2
 8002550:	dd04      	ble.n	800255c <ResolveTwosCompliment2_8+0x2c>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4a07      	ldr	r2, [pc, #28]	; (8002574 <ResolveTwosCompliment2_8+0x44>)
 8002556:	4694      	mov	ip, r2
 8002558:	4463      	add	r3, ip
 800255a:	60fb      	str	r3, [r7, #12]
	x += loByte;
 800255c:	1dbb      	adds	r3, r7, #6
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	18d3      	adds	r3, r2, r3
 8002564:	60fb      	str	r3, [r7, #12]
	return x;
 8002566:	68fb      	ldr	r3, [r7, #12]
}
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	b004      	add	sp, #16
 800256e:	bd80      	pop	{r7, pc}
 8002570:	00007fff 	.word	0x00007fff
 8002574:	ffff0001 	.word	0xffff0001

08002578 <SPI_TxSensor>:
// Send Data to SensorX
void SPI_TxSensor (SPI_HandleTypeDef *hspi1,uint8_t data[], int len){
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8002584:	2390      	movs	r3, #144	; 0x90
 8002586:	05db      	lsls	r3, r3, #23
 8002588:	2200      	movs	r2, #0
 800258a:	2110      	movs	r1, #16
 800258c:	0018      	movs	r0, r3
 800258e:	f7fe fbc7 	bl	8000d20 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi1,data,(uint16_t)len,SPI_TimeOut);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	b29a      	uxth	r2, r3
 8002596:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <SPI_TxSensor+0x50>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68b9      	ldr	r1, [r7, #8]
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f7ff f975 	bl	800188c <HAL_SPI_Transmit>
	while( hspi1->State == HAL_SPI_STATE_BUSY );
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	225d      	movs	r2, #93	; 0x5d
 80025a8:	5c9b      	ldrb	r3, [r3, r2]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d0f9      	beq.n	80025a4 <SPI_TxSensor+0x2c>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80025b0:	2390      	movs	r3, #144	; 0x90
 80025b2:	05db      	lsls	r3, r3, #23
 80025b4:	2201      	movs	r2, #1
 80025b6:	2110      	movs	r1, #16
 80025b8:	0018      	movs	r0, r3
 80025ba:	f7fe fbb1 	bl	8000d20 <HAL_GPIO_WritePin>
}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b004      	add	sp, #16
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	20000014 	.word	0x20000014

080025cc <SPI_RxSensor>:
// Read Data from SensorX
uint8_t SPI_RxSensor (SPI_HandleTypeDef *hspi1,uint8_t adress) {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	000a      	movs	r2, r1
 80025d6:	1cfb      	adds	r3, r7, #3
 80025d8:	701a      	strb	r2, [r3, #0]
	uint8_t rxData;
	adress += 0x80;
 80025da:	1cfb      	adds	r3, r7, #3
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	3b80      	subs	r3, #128	; 0x80
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	1cfb      	adds	r3, r7, #3
 80025e4:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80025e6:	2390      	movs	r3, #144	; 0x90
 80025e8:	05db      	lsls	r3, r3, #23
 80025ea:	2200      	movs	r2, #0
 80025ec:	2110      	movs	r1, #16
 80025ee:	0018      	movs	r0, r3
 80025f0:	f7fe fb96 	bl	8000d20 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(hspi1,&adress,1,SPI_TimeOut);
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <SPI_RxSensor+0x70>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	1cf9      	adds	r1, r7, #3
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f7ff f945 	bl	800188c <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspi1,&rxData,1,SPI_TimeOut);
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <SPI_RxSensor+0x70>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	220f      	movs	r2, #15
 8002608:	18b9      	adds	r1, r7, r2
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f7ff faa7 	bl	8001b60 <HAL_SPI_Receive>
	while( hspi1->State == HAL_SPI_STATE_BUSY );
 8002612:	46c0      	nop			; (mov r8, r8)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	225d      	movs	r2, #93	; 0x5d
 8002618:	5c9b      	ldrb	r3, [r3, r2]
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d0f9      	beq.n	8002614 <SPI_RxSensor+0x48>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8002620:	2390      	movs	r3, #144	; 0x90
 8002622:	05db      	lsls	r3, r3, #23
 8002624:	2201      	movs	r2, #1
 8002626:	2110      	movs	r1, #16
 8002628:	0018      	movs	r0, r3
 800262a:	f7fe fb79 	bl	8000d20 <HAL_GPIO_WritePin>

	return rxData;
 800262e:	230f      	movs	r3, #15
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	781b      	ldrb	r3, [r3, #0]
}
 8002634:	0018      	movs	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	b004      	add	sp, #16
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000014 	.word	0x20000014

08002640 <ResolveAcceleration>:
		HAL_SPI_Receive(hspi1,&rxData[i],sizeof(uint8_t),SPI_TimeOut);
	}
	return rxData;
}*/
// Resolve Acceleration from Two's Compliment to float in mg
float ResolveAcceleration (uint8_t hiByte, uint8_t loByte) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	0002      	movs	r2, r0
 8002648:	1dfb      	adds	r3, r7, #7
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	1dbb      	adds	r3, r7, #6
 800264e:	1c0a      	adds	r2, r1, #0
 8002650:	701a      	strb	r2, [r3, #0]
	extern float sensorLsbValue;
	return ResolveTwosCompliment2_8(hiByte, loByte)*sensorLsbValue;
 8002652:	1dbb      	adds	r3, r7, #6
 8002654:	781a      	ldrb	r2, [r3, #0]
 8002656:	1dfb      	adds	r3, r7, #7
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	0011      	movs	r1, r2
 800265c:	0018      	movs	r0, r3
 800265e:	f7ff ff67 	bl	8002530 <ResolveTwosCompliment2_8>
 8002662:	0003      	movs	r3, r0
 8002664:	0018      	movs	r0, r3
 8002666:	f7fd fef9 	bl	800045c <__aeabi_i2f>
 800266a:	1c02      	adds	r2, r0, #0
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <ResolveAcceleration+0x44>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	1c19      	adds	r1, r3, #0
 8002672:	1c10      	adds	r0, r2, #0
 8002674:	f7fd fdd2 	bl	800021c <__aeabi_fmul>
 8002678:	1c03      	adds	r3, r0, #0
}
 800267a:	1c18      	adds	r0, r3, #0
 800267c:	46bd      	mov	sp, r7
 800267e:	b002      	add	sp, #8
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	20000010 	.word	0x20000010

08002688 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
	static uint8_t abc[6]={0};
	static uint8_t abd[6]={0};

//	uint8_t sensorData[4]= {SENSOR_OUT_X_H, SENSOR_OUT_X_L,0,0};
//  uint8_t sensorData[4]= {SENSOR_WHO_AM_I, SENSOR_WHO_AM_I,0,0};
	uint8_t sensorData[6]={0};
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	0018      	movs	r0, r3
 8002692:	2306      	movs	r3, #6
 8002694:	001a      	movs	r2, r3
 8002696:	2100      	movs	r1, #0
 8002698:	f000 fb5a 	bl	8002d50 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800269c:	f7fd ff4c 	bl	8000538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026a0:	f000 f8ac 	bl	80027fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026a4:	f000 f96e 	bl	8002984 <MX_GPIO_Init>
  MX_DMA_Init();
 80026a8:	f000 f94e 	bl	8002948 <MX_DMA_Init>
  MX_SPI1_Init();
 80026ac:	f000 f908 	bl	80028c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // CUBEMX-RESISTENT RECONFIG BEGIN
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80026b0:	2390      	movs	r3, #144	; 0x90
 80026b2:	05db      	lsls	r3, r3, #23
 80026b4:	2201      	movs	r2, #1
 80026b6:	2110      	movs	r1, #16
 80026b8:	0018      	movs	r0, r3
 80026ba:	f7fe fb31 	bl	8000d20 <HAL_GPIO_WritePin>
  /* Sensor Config */
//  SPI_TxSensor(&hspi1, sensorConf, (uint16_t)LEN(sensorConf));
//  configurationCorrect=VerifySensorConfig(&hspi1, sensorConf, LEN(sensorConf));

//  for (int i=0; i<6;i++) abc[i] = WriteVerifySensorRegister(&hspi1,sensorConf[i*2],sensorConf[i*2+1]);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80026be:	2390      	movs	r3, #144	; 0x90
 80026c0:	05db      	lsls	r3, r3, #23
 80026c2:	2200      	movs	r2, #0
 80026c4:	2110      	movs	r1, #16
 80026c6:	0018      	movs	r0, r3
 80026c8:	f7fe fb2a 	bl	8000d20 <HAL_GPIO_WritePin>
  	  HAL_SPI_Transmit(&hspi1,&sensorConf[0],2,50);
 80026cc:	4944      	ldr	r1, [pc, #272]	; (80027e0 <main+0x158>)
 80026ce:	4845      	ldr	r0, [pc, #276]	; (80027e4 <main+0x15c>)
 80026d0:	2332      	movs	r3, #50	; 0x32
 80026d2:	2202      	movs	r2, #2
 80026d4:	f7ff f8da 	bl	800188c <HAL_SPI_Transmit>
  	while( hspi1.State == HAL_SPI_STATE_BUSY );
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	4b42      	ldr	r3, [pc, #264]	; (80027e4 <main+0x15c>)
 80026dc:	225d      	movs	r2, #93	; 0x5d
 80026de:	5c9b      	ldrb	r3, [r3, r2]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d0f9      	beq.n	80026da <main+0x52>
  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80026e6:	2390      	movs	r3, #144	; 0x90
 80026e8:	05db      	lsls	r3, r3, #23
 80026ea:	2201      	movs	r2, #1
 80026ec:	2110      	movs	r1, #16
 80026ee:	0018      	movs	r0, r3
 80026f0:	f7fe fb16 	bl	8000d20 <HAL_GPIO_WritePin>
  	  //SPI_TxSensor(&hspi1, &sensorConf[2*i], 2);
//  	  HAL_Delay(1000);

  for (int i=1; i<7;i++){
 80026f4:	2301      	movs	r3, #1
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e01a      	b.n	8002730 <main+0xa8>
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
//	  HAL_SPI_Transmit(&hspi1,&sensorConf[(2*i)],2,50);
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
	  SPI_TxSensor(&hspi1, &sensorConf[2*i], 2);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	005a      	lsls	r2, r3, #1
 80026fe:	4b38      	ldr	r3, [pc, #224]	; (80027e0 <main+0x158>)
 8002700:	18d1      	adds	r1, r2, r3
 8002702:	4b38      	ldr	r3, [pc, #224]	; (80027e4 <main+0x15c>)
 8002704:	2202      	movs	r2, #2
 8002706:	0018      	movs	r0, r3
 8002708:	f7ff ff36 	bl	8002578 <SPI_TxSensor>
//	  abd[i-1]=sensorConf[(2*i)] + 0x80;
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
//	  HAL_SPI_Transmit(&hspi1,&abd[i-1],1,50);
//	  HAL_SPI_Receive(&hspi1,&abd[i-1],1,50);
//	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
	  abd[i-1] = SPI_RxSensor(&hspi1,sensorConf[2*i]);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1e5c      	subs	r4, r3, #1
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4a32      	ldr	r2, [pc, #200]	; (80027e0 <main+0x158>)
 8002716:	5cd2      	ldrb	r2, [r2, r3]
 8002718:	4b32      	ldr	r3, [pc, #200]	; (80027e4 <main+0x15c>)
 800271a:	0011      	movs	r1, r2
 800271c:	0018      	movs	r0, r3
 800271e:	f7ff ff55 	bl	80025cc <SPI_RxSensor>
 8002722:	0003      	movs	r3, r0
 8002724:	001a      	movs	r2, r3
 8002726:	4b30      	ldr	r3, [pc, #192]	; (80027e8 <main+0x160>)
 8002728:	551a      	strb	r2, [r3, r4]
  for (int i=1; i<7;i++){
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3301      	adds	r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b06      	cmp	r3, #6
 8002734:	dde1      	ble.n	80026fa <main+0x72>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	015b      	lsls	r3, r3, #5
 800273a:	4a2c      	ldr	r2, [pc, #176]	; (80027ec <main+0x164>)
 800273c:	0019      	movs	r1, r3
 800273e:	0010      	movs	r0, r2
 8002740:	f7fe fb0b 	bl	8000d5a <HAL_GPIO_TogglePin>

//	sensorData[2]=SPI_RxSensor(&hspi1,sensorData[0]);
//	sensorData[3]=SPI_RxSensor(&hspi1,sensorData[1]);

	sensorData[0]=0xA8;
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	22a8      	movs	r2, #168	; 0xa8
 8002748:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 800274a:	2390      	movs	r3, #144	; 0x90
 800274c:	05db      	lsls	r3, r3, #23
 800274e:	2200      	movs	r2, #0
 8002750:	2110      	movs	r1, #16
 8002752:	0018      	movs	r0, r3
 8002754:	f7fe fae4 	bl	8000d20 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&sensorData[0],1,5);
 8002758:	1d39      	adds	r1, r7, #4
 800275a:	4822      	ldr	r0, [pc, #136]	; (80027e4 <main+0x15c>)
 800275c:	2305      	movs	r3, #5
 800275e:	2201      	movs	r2, #1
 8002760:	f7ff f894 	bl	800188c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,&sensorData[0],6,5);
 8002764:	1d39      	adds	r1, r7, #4
 8002766:	481f      	ldr	r0, [pc, #124]	; (80027e4 <main+0x15c>)
 8002768:	2305      	movs	r3, #5
 800276a:	2206      	movs	r2, #6
 800276c:	f7ff f9f8 	bl	8001b60 <HAL_SPI_Receive>
	while( hspi1.State == HAL_SPI_STATE_BUSY );
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	4b1c      	ldr	r3, [pc, #112]	; (80027e4 <main+0x15c>)
 8002774:	225d      	movs	r2, #93	; 0x5d
 8002776:	5c9b      	ldrb	r3, [r3, r2]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d0f9      	beq.n	8002772 <main+0xea>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 800277e:	2390      	movs	r3, #144	; 0x90
 8002780:	05db      	lsls	r3, r3, #23
 8002782:	2201      	movs	r2, #1
 8002784:	2110      	movs	r1, #16
 8002786:	0018      	movs	r0, r3
 8002788:	f7fe faca 	bl	8000d20 <HAL_GPIO_WritePin>

	sensorOutputX = ResolveAcceleration(sensorData[1],sensorData[0]);
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	785a      	ldrb	r2, [r3, #1]
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	0019      	movs	r1, r3
 8002796:	0010      	movs	r0, r2
 8002798:	f7ff ff52 	bl	8002640 <ResolveAcceleration>
 800279c:	1c02      	adds	r2, r0, #0
 800279e:	4b14      	ldr	r3, [pc, #80]	; (80027f0 <main+0x168>)
 80027a0:	601a      	str	r2, [r3, #0]
	sensorOutputY = ResolveAcceleration(sensorData[3],sensorData[2]);
 80027a2:	1d3b      	adds	r3, r7, #4
 80027a4:	78da      	ldrb	r2, [r3, #3]
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	789b      	ldrb	r3, [r3, #2]
 80027aa:	0019      	movs	r1, r3
 80027ac:	0010      	movs	r0, r2
 80027ae:	f7ff ff47 	bl	8002640 <ResolveAcceleration>
 80027b2:	1c02      	adds	r2, r0, #0
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <main+0x16c>)
 80027b6:	601a      	str	r2, [r3, #0]
	sensorOutputZ = ResolveAcceleration(sensorData[5],sensorData[4]);
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	795a      	ldrb	r2, [r3, #5]
 80027bc:	1d3b      	adds	r3, r7, #4
 80027be:	791b      	ldrb	r3, [r3, #4]
 80027c0:	0019      	movs	r1, r3
 80027c2:	0010      	movs	r0, r2
 80027c4:	f7ff ff3c 	bl	8002640 <ResolveAcceleration>
 80027c8:	1c02      	adds	r2, r0, #0
 80027ca:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <main+0x170>)
 80027cc:	601a      	str	r2, [r3, #0]

//	HAL_Delay(1000);
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 80027ce:	2380      	movs	r3, #128	; 0x80
 80027d0:	015b      	lsls	r3, r3, #5
 80027d2:	4a06      	ldr	r2, [pc, #24]	; (80027ec <main+0x164>)
 80027d4:	0019      	movs	r1, r3
 80027d6:	0010      	movs	r0, r2
 80027d8:	f7fe fabf 	bl	8000d5a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_12);
 80027dc:	e7ab      	b.n	8002736 <main+0xae>
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	20000000 	.word	0x20000000
 80027e4:	20000054 	.word	0x20000054
 80027e8:	20000038 	.word	0x20000038
 80027ec:	48000400 	.word	0x48000400
 80027f0:	20000040 	.word	0x20000040
 80027f4:	20000044 	.word	0x20000044
 80027f8:	20000048 	.word	0x20000048

080027fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b092      	sub	sp, #72	; 0x48
 8002800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002802:	2314      	movs	r3, #20
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	2202      	movs	r2, #2
 8002808:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800280a:	2314      	movs	r3, #20
 800280c:	18fb      	adds	r3, r7, r3
 800280e:	2201      	movs	r2, #1
 8002810:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002812:	2314      	movs	r3, #20
 8002814:	18fb      	adds	r3, r7, r3
 8002816:	2210      	movs	r2, #16
 8002818:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800281a:	2314      	movs	r3, #20
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	2202      	movs	r2, #2
 8002820:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002822:	2314      	movs	r3, #20
 8002824:	18fb      	adds	r3, r7, r3
 8002826:	2280      	movs	r2, #128	; 0x80
 8002828:	0212      	lsls	r2, r2, #8
 800282a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 800282c:	2314      	movs	r3, #20
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	22c0      	movs	r2, #192	; 0xc0
 8002832:	0312      	lsls	r2, r2, #12
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002836:	2314      	movs	r3, #20
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	2200      	movs	r2, #0
 800283c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800283e:	2314      	movs	r3, #20
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	0018      	movs	r0, r3
 8002844:	f7fe fa9c 	bl	8000d80 <HAL_RCC_OscConfig>
 8002848:	1e03      	subs	r3, r0, #0
 800284a:	d004      	beq.n	8002856 <SystemClock_Config+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <SystemClock_Config+0xc0>)
 800284e:	21c9      	movs	r1, #201	; 0xc9
 8002850:	0018      	movs	r0, r3
 8002852:	f000 f8fd 	bl	8002a50 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002856:	1d3b      	adds	r3, r7, #4
 8002858:	2207      	movs	r2, #7
 800285a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800285c:	1d3b      	adds	r3, r7, #4
 800285e:	2202      	movs	r2, #2
 8002860:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002862:	1d3b      	adds	r3, r7, #4
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	2101      	movs	r1, #1
 8002872:	0018      	movs	r0, r3
 8002874:	f7fe fde2 	bl	800143c <HAL_RCC_ClockConfig>
 8002878:	1e03      	subs	r3, r0, #0
 800287a:	d004      	beq.n	8002886 <SystemClock_Config+0x8a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <SystemClock_Config+0xc0>)
 800287e:	21d6      	movs	r1, #214	; 0xd6
 8002880:	0018      	movs	r0, r3
 8002882:	f000 f8e5 	bl	8002a50 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8002886:	f7fe ff5f 	bl	8001748 <HAL_RCC_GetHCLKFreq>
 800288a:	0002      	movs	r2, r0
 800288c:	23fa      	movs	r3, #250	; 0xfa
 800288e:	0099      	lsls	r1, r3, #2
 8002890:	0010      	movs	r0, r2
 8002892:	f7fd fc37 	bl	8000104 <__udivsi3>
 8002896:	0003      	movs	r3, r0
 8002898:	0018      	movs	r0, r3
 800289a:	f7fd ff61 	bl	8000760 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800289e:	2004      	movs	r0, #4
 80028a0:	f7fd ff6c 	bl	800077c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80028a4:	2301      	movs	r3, #1
 80028a6:	425b      	negs	r3, r3
 80028a8:	2200      	movs	r2, #0
 80028aa:	2100      	movs	r1, #0
 80028ac:	0018      	movs	r0, r3
 80028ae:	f7fd ff31 	bl	8000714 <HAL_NVIC_SetPriority>
}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b012      	add	sp, #72	; 0x48
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	08002d98 	.word	0x08002d98

080028c0 <MX_SPI1_Init>:

/* SPI1 init function */
static void MX_SPI1_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0

  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028c4:	4b1d      	ldr	r3, [pc, #116]	; (800293c <MX_SPI1_Init+0x7c>)
 80028c6:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <MX_SPI1_Init+0x80>)
 80028c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028ca:	4b1c      	ldr	r3, [pc, #112]	; (800293c <MX_SPI1_Init+0x7c>)
 80028cc:	2282      	movs	r2, #130	; 0x82
 80028ce:	0052      	lsls	r2, r2, #1
 80028d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028d2:	4b1a      	ldr	r3, [pc, #104]	; (800293c <MX_SPI1_Init+0x7c>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028d8:	4b18      	ldr	r3, [pc, #96]	; (800293c <MX_SPI1_Init+0x7c>)
 80028da:	22e0      	movs	r2, #224	; 0xe0
 80028dc:	00d2      	lsls	r2, r2, #3
 80028de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80028e0:	4b16      	ldr	r3, [pc, #88]	; (800293c <MX_SPI1_Init+0x7c>)
 80028e2:	2202      	movs	r2, #2
 80028e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <MX_SPI1_Init+0x7c>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028ec:	4b13      	ldr	r3, [pc, #76]	; (800293c <MX_SPI1_Init+0x7c>)
 80028ee:	2280      	movs	r2, #128	; 0x80
 80028f0:	0092      	lsls	r2, r2, #2
 80028f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80028f4:	4b11      	ldr	r3, [pc, #68]	; (800293c <MX_SPI1_Init+0x7c>)
 80028f6:	2208      	movs	r2, #8
 80028f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028fa:	4b10      	ldr	r3, [pc, #64]	; (800293c <MX_SPI1_Init+0x7c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002900:	4b0e      	ldr	r3, [pc, #56]	; (800293c <MX_SPI1_Init+0x7c>)
 8002902:	2200      	movs	r2, #0
 8002904:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002906:	4b0d      	ldr	r3, [pc, #52]	; (800293c <MX_SPI1_Init+0x7c>)
 8002908:	2200      	movs	r2, #0
 800290a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <MX_SPI1_Init+0x7c>)
 800290e:	2207      	movs	r2, #7
 8002910:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <MX_SPI1_Init+0x7c>)
 8002914:	2200      	movs	r2, #0
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002918:	4b08      	ldr	r3, [pc, #32]	; (800293c <MX_SPI1_Init+0x7c>)
 800291a:	2200      	movs	r2, #0
 800291c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800291e:	4b07      	ldr	r3, [pc, #28]	; (800293c <MX_SPI1_Init+0x7c>)
 8002920:	0018      	movs	r0, r3
 8002922:	f7fe ff1b 	bl	800175c <HAL_SPI_Init>
 8002926:	1e03      	subs	r3, r0, #0
 8002928:	d004      	beq.n	8002934 <MX_SPI1_Init+0x74>
  {
    _Error_Handler(__FILE__, __LINE__);
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <MX_SPI1_Init+0x84>)
 800292c:	21fa      	movs	r1, #250	; 0xfa
 800292e:	0018      	movs	r0, r3
 8002930:	f000 f88e 	bl	8002a50 <_Error_Handler>
  }

}
 8002934:	46c0      	nop			; (mov r8, r8)
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	20000054 	.word	0x20000054
 8002940:	40013000 	.word	0x40013000
 8002944:	08002d98 	.word	0x08002d98

08002948 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800294e:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <MX_DMA_Init+0x38>)
 8002950:	4a0b      	ldr	r2, [pc, #44]	; (8002980 <MX_DMA_Init+0x38>)
 8002952:	6952      	ldr	r2, [r2, #20]
 8002954:	2101      	movs	r1, #1
 8002956:	430a      	orrs	r2, r1
 8002958:	615a      	str	r2, [r3, #20]
 800295a:	4b09      	ldr	r3, [pc, #36]	; (8002980 <MX_DMA_Init+0x38>)
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	2201      	movs	r2, #1
 8002960:	4013      	ands	r3, r2
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	2100      	movs	r1, #0
 800296a:	200a      	movs	r0, #10
 800296c:	f7fd fed2 	bl	8000714 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8002970:	200a      	movs	r0, #10
 8002972:	f7fd fee5 	bl	8000740 <HAL_NVIC_EnableIRQ>

}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	46bd      	mov	sp, r7
 800297a:	b002      	add	sp, #8
 800297c:	bd80      	pop	{r7, pc}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	40021000 	.word	0x40021000

08002984 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b088      	sub	sp, #32
 8002988:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <MX_GPIO_Init+0xc4>)
 800298c:	4a2e      	ldr	r2, [pc, #184]	; (8002a48 <MX_GPIO_Init+0xc4>)
 800298e:	6952      	ldr	r2, [r2, #20]
 8002990:	2180      	movs	r1, #128	; 0x80
 8002992:	0289      	lsls	r1, r1, #10
 8002994:	430a      	orrs	r2, r1
 8002996:	615a      	str	r2, [r3, #20]
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <MX_GPIO_Init+0xc4>)
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	029b      	lsls	r3, r3, #10
 80029a0:	4013      	ands	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a6:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <MX_GPIO_Init+0xc4>)
 80029a8:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <MX_GPIO_Init+0xc4>)
 80029aa:	6952      	ldr	r2, [r2, #20]
 80029ac:	2180      	movs	r1, #128	; 0x80
 80029ae:	02c9      	lsls	r1, r1, #11
 80029b0:	430a      	orrs	r2, r1
 80029b2:	615a      	str	r2, [r3, #20]
 80029b4:	4b24      	ldr	r3, [pc, #144]	; (8002a48 <MX_GPIO_Init+0xc4>)
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	02db      	lsls	r3, r3, #11
 80029bc:	4013      	ands	r3, r2
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80029c2:	2390      	movs	r3, #144	; 0x90
 80029c4:	05db      	lsls	r3, r3, #23
 80029c6:	2200      	movs	r2, #0
 80029c8:	2110      	movs	r1, #16
 80029ca:	0018      	movs	r0, r3
 80029cc:	f7fe f9a8 	bl	8000d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80029d0:	2380      	movs	r3, #128	; 0x80
 80029d2:	015b      	lsls	r3, r3, #5
 80029d4:	481d      	ldr	r0, [pc, #116]	; (8002a4c <MX_GPIO_Init+0xc8>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	0019      	movs	r1, r3
 80029da:	f7fe f9a1 	bl	8000d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80029de:	230c      	movs	r3, #12
 80029e0:	18fb      	adds	r3, r7, r3
 80029e2:	2210      	movs	r2, #16
 80029e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029e6:	230c      	movs	r3, #12
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	2201      	movs	r2, #1
 80029ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ee:	230c      	movs	r3, #12
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f6:	230c      	movs	r3, #12
 80029f8:	18fb      	adds	r3, r7, r3
 80029fa:	2200      	movs	r2, #0
 80029fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fe:	230c      	movs	r3, #12
 8002a00:	18fa      	adds	r2, r7, r3
 8002a02:	2390      	movs	r3, #144	; 0x90
 8002a04:	05db      	lsls	r3, r3, #23
 8002a06:	0011      	movs	r1, r2
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7fe f80d 	bl	8000a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a0e:	230c      	movs	r3, #12
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	2280      	movs	r2, #128	; 0x80
 8002a14:	0152      	lsls	r2, r2, #5
 8002a16:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a18:	230c      	movs	r3, #12
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	230c      	movs	r3, #12
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a28:	230c      	movs	r3, #12
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a30:	230c      	movs	r3, #12
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	4a05      	ldr	r2, [pc, #20]	; (8002a4c <MX_GPIO_Init+0xc8>)
 8002a36:	0019      	movs	r1, r3
 8002a38:	0010      	movs	r0, r2
 8002a3a:	f7fd fff5 	bl	8000a28 <HAL_GPIO_Init>

}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b008      	add	sp, #32
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	48000400 	.word	0x48000400

08002a50 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002a5a:	e7fe      	b.n	8002a5a <_Error_Handler+0xa>

08002a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a62:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_MspInit+0x6c>)
 8002a64:	4a18      	ldr	r2, [pc, #96]	; (8002ac8 <HAL_MspInit+0x6c>)
 8002a66:	6992      	ldr	r2, [r2, #24]
 8002a68:	2101      	movs	r1, #1
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	619a      	str	r2, [r3, #24]
 8002a6e:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <HAL_MspInit+0x6c>)
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2201      	movs	r2, #1
 8002a74:	4013      	ands	r3, r2
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7a:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <HAL_MspInit+0x6c>)
 8002a7c:	4a12      	ldr	r2, [pc, #72]	; (8002ac8 <HAL_MspInit+0x6c>)
 8002a7e:	69d2      	ldr	r2, [r2, #28]
 8002a80:	2180      	movs	r1, #128	; 0x80
 8002a82:	0549      	lsls	r1, r1, #21
 8002a84:	430a      	orrs	r2, r1
 8002a86:	61da      	str	r2, [r3, #28]
 8002a88:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <HAL_MspInit+0x6c>)
 8002a8a:	69da      	ldr	r2, [r3, #28]
 8002a8c:	2380      	movs	r3, #128	; 0x80
 8002a8e:	055b      	lsls	r3, r3, #21
 8002a90:	4013      	ands	r3, r2
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002a96:	2305      	movs	r3, #5
 8002a98:	425b      	negs	r3, r3
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f7fd fe38 	bl	8000714 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	425b      	negs	r3, r3
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2100      	movs	r1, #0
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7fd fe31 	bl	8000714 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	425b      	negs	r3, r3
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2100      	movs	r1, #0
 8002aba:	0018      	movs	r0, r3
 8002abc:	f7fd fe2a 	bl	8000714 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ac0:	46c0      	nop			; (mov r8, r8)
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	b002      	add	sp, #8
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40021000 	.word	0x40021000

08002acc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a34      	ldr	r2, [pc, #208]	; (8002bac <HAL_SPI_MspInit+0xe0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d162      	bne.n	8002ba4 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ade:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <HAL_SPI_MspInit+0xe4>)
 8002ae0:	4a33      	ldr	r2, [pc, #204]	; (8002bb0 <HAL_SPI_MspInit+0xe4>)
 8002ae2:	6992      	ldr	r2, [r2, #24]
 8002ae4:	2180      	movs	r1, #128	; 0x80
 8002ae6:	0149      	lsls	r1, r1, #5
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	619a      	str	r2, [r3, #24]
 8002aec:	4b30      	ldr	r3, [pc, #192]	; (8002bb0 <HAL_SPI_MspInit+0xe4>)
 8002aee:	699a      	ldr	r2, [r3, #24]
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	015b      	lsls	r3, r3, #5
 8002af4:	4013      	ands	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]
 8002af8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002afa:	230c      	movs	r3, #12
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	22e0      	movs	r2, #224	; 0xe0
 8002b00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b02:	230c      	movs	r3, #12
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	2202      	movs	r2, #2
 8002b08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	230c      	movs	r3, #12
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	2200      	movs	r2, #0
 8002b10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b12:	230c      	movs	r3, #12
 8002b14:	18fb      	adds	r3, r7, r3
 8002b16:	2203      	movs	r2, #3
 8002b18:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002b1a:	230c      	movs	r3, #12
 8002b1c:	18fb      	adds	r3, r7, r3
 8002b1e:	2200      	movs	r2, #0
 8002b20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b22:	230c      	movs	r3, #12
 8002b24:	18fa      	adds	r2, r7, r3
 8002b26:	2390      	movs	r3, #144	; 0x90
 8002b28:	05db      	lsls	r3, r3, #23
 8002b2a:	0011      	movs	r1, r2
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7fd ff7b 	bl	8000a28 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002b32:	4b20      	ldr	r3, [pc, #128]	; (8002bb4 <HAL_SPI_MspInit+0xe8>)
 8002b34:	4a20      	ldr	r2, [pc, #128]	; (8002bb8 <HAL_SPI_MspInit+0xec>)
 8002b36:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b38:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <HAL_SPI_MspInit+0xe8>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_SPI_MspInit+0xe8>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_SPI_MspInit+0xe8>)
 8002b46:	2280      	movs	r2, #128	; 0x80
 8002b48:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <HAL_SPI_MspInit+0xe8>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b50:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <HAL_SPI_MspInit+0xe8>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002b56:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <HAL_SPI_MspInit+0xe8>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b5c:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <HAL_SPI_MspInit+0xe8>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <HAL_SPI_MspInit+0xe8>)
 8002b64:	0018      	movs	r0, r3
 8002b66:	f7fd fe2f 	bl	80007c8 <HAL_DMA_Init>
 8002b6a:	1e03      	subs	r3, r0, #0
 8002b6c:	d004      	beq.n	8002b78 <HAL_SPI_MspInit+0xac>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002b6e:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <HAL_SPI_MspInit+0xf0>)
 8002b70:	216d      	movs	r1, #109	; 0x6d
 8002b72:	0018      	movs	r0, r3
 8002b74:	f7ff ff6c 	bl	8002a50 <_Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_SPI1_RX);
 8002b78:	4911      	ldr	r1, [pc, #68]	; (8002bc0 <HAL_SPI_MspInit+0xf4>)
 8002b7a:	4a11      	ldr	r2, [pc, #68]	; (8002bc0 <HAL_SPI_MspInit+0xf4>)
 8002b7c:	23a8      	movs	r3, #168	; 0xa8
 8002b7e:	58d3      	ldr	r3, [r2, r3]
 8002b80:	22f0      	movs	r2, #240	; 0xf0
 8002b82:	4393      	bics	r3, r2
 8002b84:	22a8      	movs	r2, #168	; 0xa8
 8002b86:	508b      	str	r3, [r1, r2]
 8002b88:	490d      	ldr	r1, [pc, #52]	; (8002bc0 <HAL_SPI_MspInit+0xf4>)
 8002b8a:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <HAL_SPI_MspInit+0xf4>)
 8002b8c:	23a8      	movs	r3, #168	; 0xa8
 8002b8e:	58d3      	ldr	r3, [r2, r3]
 8002b90:	2230      	movs	r2, #48	; 0x30
 8002b92:	4313      	orrs	r3, r2
 8002b94:	22a8      	movs	r2, #168	; 0xa8
 8002b96:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a06      	ldr	r2, [pc, #24]	; (8002bb4 <HAL_SPI_MspInit+0xe8>)
 8002b9c:	659a      	str	r2, [r3, #88]	; 0x58
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <HAL_SPI_MspInit+0xe8>)
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b008      	add	sp, #32
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40013000 	.word	0x40013000
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	200000b8 	.word	0x200000b8
 8002bb8:	4002001c 	.word	0x4002001c
 8002bbc:	08002da8 	.word	0x08002da8
 8002bc0:	40020000 	.word	0x40020000

08002bc4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	spiError = HAL_SPI_GetError(&hspi1);
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <HardFault_Handler+0x14>)
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f7ff fb12 	bl	8002200 <HAL_SPI_GetError>
 8002bdc:	0002      	movs	r2, r0
 8002bde:	4b02      	ldr	r3, [pc, #8]	; (8002be8 <HardFault_Handler+0x18>)
 8002be0:	601a      	str	r2, [r3, #0]
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002be2:	e7fe      	b.n	8002be2 <HardFault_Handler+0x12>
 8002be4:	20000054 	.word	0x20000054
 8002be8:	2000004c 	.word	0x2000004c

08002bec <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c04:	f7fd fcc8 	bl	8000598 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002c08:	f7fd fdd2 	bl	80007b0 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c0c:	46c0      	nop			; (mov r8, r8)
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
	...

08002c14 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x14>)
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f7fd fe28 	bl	8000870 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	200000b8 	.word	0x200000b8

08002c2c <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002c30:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <SystemInit+0x70>)
 8002c32:	4a1a      	ldr	r2, [pc, #104]	; (8002c9c <SystemInit+0x70>)
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	2101      	movs	r1, #1
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002c3c:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <SystemInit+0x70>)
 8002c3e:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <SystemInit+0x70>)
 8002c40:	6852      	ldr	r2, [r2, #4]
 8002c42:	4917      	ldr	r1, [pc, #92]	; (8002ca0 <SystemInit+0x74>)
 8002c44:	400a      	ands	r2, r1
 8002c46:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002c48:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <SystemInit+0x70>)
 8002c4a:	4a14      	ldr	r2, [pc, #80]	; (8002c9c <SystemInit+0x70>)
 8002c4c:	6812      	ldr	r2, [r2, #0]
 8002c4e:	4915      	ldr	r1, [pc, #84]	; (8002ca4 <SystemInit+0x78>)
 8002c50:	400a      	ands	r2, r1
 8002c52:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002c54:	4b11      	ldr	r3, [pc, #68]	; (8002c9c <SystemInit+0x70>)
 8002c56:	4a11      	ldr	r2, [pc, #68]	; (8002c9c <SystemInit+0x70>)
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	4913      	ldr	r1, [pc, #76]	; (8002ca8 <SystemInit+0x7c>)
 8002c5c:	400a      	ands	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002c60:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <SystemInit+0x70>)
 8002c62:	4a0e      	ldr	r2, [pc, #56]	; (8002c9c <SystemInit+0x70>)
 8002c64:	6852      	ldr	r2, [r2, #4]
 8002c66:	4911      	ldr	r1, [pc, #68]	; (8002cac <SystemInit+0x80>)
 8002c68:	400a      	ands	r2, r1
 8002c6a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <SystemInit+0x70>)
 8002c6e:	4a0b      	ldr	r2, [pc, #44]	; (8002c9c <SystemInit+0x70>)
 8002c70:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002c72:	210f      	movs	r1, #15
 8002c74:	438a      	bics	r2, r1
 8002c76:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 8002c78:	4b08      	ldr	r3, [pc, #32]	; (8002c9c <SystemInit+0x70>)
 8002c7a:	4a08      	ldr	r2, [pc, #32]	; (8002c9c <SystemInit+0x70>)
 8002c7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c7e:	490c      	ldr	r1, [pc, #48]	; (8002cb0 <SystemInit+0x84>)
 8002c80:	400a      	ands	r2, r1
 8002c82:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <SystemInit+0x70>)
 8002c86:	4a05      	ldr	r2, [pc, #20]	; (8002c9c <SystemInit+0x70>)
 8002c88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	438a      	bics	r2, r1
 8002c8e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002c90:	4b02      	ldr	r3, [pc, #8]	; (8002c9c <SystemInit+0x70>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]

}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	08ffb80c 	.word	0x08ffb80c
 8002ca4:	fef6ffff 	.word	0xfef6ffff
 8002ca8:	fffbffff 	.word	0xfffbffff
 8002cac:	ffc0ffff 	.word	0xffc0ffff
 8002cb0:	fff0feac 	.word	0xfff0feac

08002cb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cb4:	480d      	ldr	r0, [pc, #52]	; (8002cec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cb8:	480d      	ldr	r0, [pc, #52]	; (8002cf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cba:	490e      	ldr	r1, [pc, #56]	; (8002cf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cbc:	4a0e      	ldr	r2, [pc, #56]	; (8002cf8 <LoopForever+0xe>)
  movs r3, #0
 8002cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cc0:	e002      	b.n	8002cc8 <LoopCopyDataInit>

08002cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cc6:	3304      	adds	r3, #4

08002cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ccc:	d3f9      	bcc.n	8002cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cce:	4a0b      	ldr	r2, [pc, #44]	; (8002cfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cd0:	4c0b      	ldr	r4, [pc, #44]	; (8002d00 <LoopForever+0x16>)
  movs r3, #0
 8002cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cd4:	e001      	b.n	8002cda <LoopFillZerobss>

08002cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd8:	3204      	adds	r2, #4

08002cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cdc:	d3fb      	bcc.n	8002cd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002cde:	f7ff ffa5 	bl	8002c2c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002ce2:	f000 f811 	bl	8002d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ce6:	f7ff fccf 	bl	8002688 <main>

08002cea <LoopForever>:

LoopForever:
    b LoopForever
 8002cea:	e7fe      	b.n	8002cea <LoopForever>
  ldr   r0, =_estack
 8002cec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cf4:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002cf8:	08002e1c 	.word	0x08002e1c
  ldr r2, =_sbss
 8002cfc:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8002d00:	200000fc 	.word	0x200000fc

08002d04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d04:	e7fe      	b.n	8002d04 <ADC1_COMP_IRQHandler>
	...

08002d08 <__libc_init_array>:
 8002d08:	b570      	push	{r4, r5, r6, lr}
 8002d0a:	2600      	movs	r6, #0
 8002d0c:	4d0c      	ldr	r5, [pc, #48]	; (8002d40 <__libc_init_array+0x38>)
 8002d0e:	4c0d      	ldr	r4, [pc, #52]	; (8002d44 <__libc_init_array+0x3c>)
 8002d10:	1b64      	subs	r4, r4, r5
 8002d12:	10a4      	asrs	r4, r4, #2
 8002d14:	42a6      	cmp	r6, r4
 8002d16:	d109      	bne.n	8002d2c <__libc_init_array+0x24>
 8002d18:	2600      	movs	r6, #0
 8002d1a:	f000 f821 	bl	8002d60 <_init>
 8002d1e:	4d0a      	ldr	r5, [pc, #40]	; (8002d48 <__libc_init_array+0x40>)
 8002d20:	4c0a      	ldr	r4, [pc, #40]	; (8002d4c <__libc_init_array+0x44>)
 8002d22:	1b64      	subs	r4, r4, r5
 8002d24:	10a4      	asrs	r4, r4, #2
 8002d26:	42a6      	cmp	r6, r4
 8002d28:	d105      	bne.n	8002d36 <__libc_init_array+0x2e>
 8002d2a:	bd70      	pop	{r4, r5, r6, pc}
 8002d2c:	00b3      	lsls	r3, r6, #2
 8002d2e:	58eb      	ldr	r3, [r5, r3]
 8002d30:	4798      	blx	r3
 8002d32:	3601      	adds	r6, #1
 8002d34:	e7ee      	b.n	8002d14 <__libc_init_array+0xc>
 8002d36:	00b3      	lsls	r3, r6, #2
 8002d38:	58eb      	ldr	r3, [r5, r3]
 8002d3a:	4798      	blx	r3
 8002d3c:	3601      	adds	r6, #1
 8002d3e:	e7f2      	b.n	8002d26 <__libc_init_array+0x1e>
 8002d40:	08002e14 	.word	0x08002e14
 8002d44:	08002e14 	.word	0x08002e14
 8002d48:	08002e14 	.word	0x08002e14
 8002d4c:	08002e18 	.word	0x08002e18

08002d50 <memset>:
 8002d50:	0003      	movs	r3, r0
 8002d52:	1882      	adds	r2, r0, r2
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d100      	bne.n	8002d5a <memset+0xa>
 8002d58:	4770      	bx	lr
 8002d5a:	7019      	strb	r1, [r3, #0]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	e7f9      	b.n	8002d54 <memset+0x4>

08002d60 <_init>:
 8002d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d66:	bc08      	pop	{r3}
 8002d68:	469e      	mov	lr, r3
 8002d6a:	4770      	bx	lr

08002d6c <_fini>:
 8002d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d72:	bc08      	pop	{r3}
 8002d74:	469e      	mov	lr, r3
 8002d76:	4770      	bx	lr
